package com.github.ares.connector.file.sink.config;

import com.github.ares.api.common.CommonOptions;
import com.github.ares.api.table.type.AresRowType;
import com.github.ares.com.typesafe.config.Config;
import com.github.ares.common.exceptions.AresException;
import com.github.ares.common.exceptions.CommonErrorCode;
import com.github.ares.connector.file.config.BaseFileSinkConfig;
import com.github.ares.connector.file.config.BaseSinkConfig;
import com.github.ares.connector.file.config.FileFormat;
import com.github.ares.connector.file.config.PartitionConfig;
import com.github.ares.connector.file.exception.FileConnectorException;
import lombok.Data;
import lombok.NonNull;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static com.github.ares.com.google.common.base.Preconditions.checkArgument;

@Data
public class FileSinkConfig extends BaseFileSinkConfig implements PartitionConfig {

    private List<String> sinkColumnList;

    private List<String> partitionFieldList;

    private List<String> targetColumnTypeList;

    private String partitionDirExpression;

    private boolean isPartitionFieldWriteInFile =
            BaseSinkConfig.IS_PARTITION_FIELD_WRITE_IN_FILE.defaultValue();

    private String tmpPath = BaseSinkConfig.TMP_PATH.defaultValue();

    private String fileNameTimeFormat = BaseSinkConfig.FILENAME_TIME_FORMAT.defaultValue();

    private boolean isEnableTransaction = BaseSinkConfig.IS_ENABLE_TRANSACTION.defaultValue();

    private String encoding = BaseSinkConfig.ENCODING.defaultValue();

    // ---------------------generator by config params-------------------

    private List<Integer> sinkColumnsIndexInRow;

    private List<Integer> partitionFieldsIndexInRow;

    private int maxRowsInMemory;

    private String sheetName;

    private String xmlRootTag = BaseSinkConfig.XML_ROOT_TAG.defaultValue();

    private String xmlRowTag = BaseSinkConfig.XML_ROW_TAG.defaultValue();

    private Boolean xmlUseAttrFormat;

    public FileSinkConfig(@NonNull Config config, @NonNull AresRowType aresRowTypeInfo) {
        super(config);
        checkArgument(
                !CollectionUtils.isEmpty(Arrays.asList(aresRowTypeInfo.getFieldNames())));

        if (config.hasPath(BaseSinkConfig.SINK_COLUMNS.key())
                && !CollectionUtils.isEmpty(
                config.getStringList(BaseSinkConfig.SINK_COLUMNS.key()))) {
            this.sinkColumnList = config.getStringList(BaseSinkConfig.SINK_COLUMNS.key());
        }

        if (config.hasPath(BaseSinkConfig.TARGET_COLUMN_TYPES.key())
                && !CollectionUtils.isEmpty(
                config.getStringList(BaseSinkConfig.TARGET_COLUMN_TYPES.key()))) {
            this.targetColumnTypeList = config.getStringList(BaseSinkConfig.TARGET_COLUMN_TYPES.key());
        }

        // if the config sink_columns is empty, all fields in AresRowTypeInfo will being write
        if (CollectionUtils.isEmpty(this.sinkColumnList)) {
            // construct a new ArrayList, because `list` generated by `Arrays.asList` do not support
            // remove and add operations.
            this.sinkColumnList =
                    new ArrayList<>(Arrays.asList(aresRowTypeInfo.getFieldNames()));
        }

        if (config.hasPath(BaseSinkConfig.PARTITION_BY.key())) {
            this.partitionFieldList = config.getStringList(BaseSinkConfig.PARTITION_BY.key());
        } else {
            this.partitionFieldList = Collections.emptyList();
        }

        if (config.hasPath(BaseSinkConfig.PARTITION_DIR_EXPRESSION.key())
                && !StringUtils.isBlank(
                config.getString(BaseSinkConfig.PARTITION_DIR_EXPRESSION.key()))) {
            this.partitionDirExpression =
                    config.getString(BaseSinkConfig.PARTITION_DIR_EXPRESSION.key());
        }

        if (config.hasPath(BaseSinkConfig.IS_PARTITION_FIELD_WRITE_IN_FILE.key())) {
            this.isPartitionFieldWriteInFile =
                    config.getBoolean(BaseSinkConfig.IS_PARTITION_FIELD_WRITE_IN_FILE.key());
        }

        if (config.hasPath(BaseSinkConfig.TMP_PATH.key())
                && !StringUtils.isBlank(config.getString(BaseSinkConfig.TMP_PATH.key()))) {
            this.tmpPath = config.getString(BaseSinkConfig.TMP_PATH.key());
        }

        if (config.hasPath(BaseSinkConfig.FILENAME_TIME_FORMAT.key())
                && !StringUtils.isBlank(
                config.getString(BaseSinkConfig.FILENAME_TIME_FORMAT.key()))) {
            this.fileNameTimeFormat = config.getString(BaseSinkConfig.FILENAME_TIME_FORMAT.key());
        }

        if (config.hasPath(BaseSinkConfig.IS_ENABLE_TRANSACTION.key())) {
            this.isEnableTransaction =
                    config.getBoolean(BaseSinkConfig.IS_ENABLE_TRANSACTION.key());
        }

        if (config.hasPath(BaseSinkConfig.ENCODING.key())) {
            this.encoding = config.getString(BaseSinkConfig.ENCODING.key());
        }

        if (this.isEnableTransaction
                && !this.fileNameExpression.contains(BaseSinkConfig.TRANSACTION_EXPRESSION)) {
            throw new FileConnectorException(
                    CommonErrorCode.ILLEGAL_ARGUMENT,
                    "file_name_expression must contains "
                            + BaseSinkConfig.TRANSACTION_EXPRESSION
                            + " when is_enable_transaction is true");
        }

        // check partition field must in aresRowTypeInfo
        if (!CollectionUtils.isEmpty(this.partitionFieldList)
                && (CollectionUtils.isEmpty(this.sinkColumnList)
                || !new HashSet<>(this.sinkColumnList)
                .containsAll(this.partitionFieldList))) {
            throw new FileConnectorException(
                    CommonErrorCode.ILLEGAL_ARGUMENT,
                    "partition fields must in sink columns");
        }

        if (!CollectionUtils.isEmpty(this.partitionFieldList) && !isPartitionFieldWriteInFile) {
            if (!this.sinkColumnList.removeAll(this.partitionFieldList)) {
                throw new FileConnectorException(
                        CommonErrorCode.ILLEGAL_ARGUMENT,
                        "remove partition field from sink columns error");
            }
        }

        if (CollectionUtils.isEmpty(this.sinkColumnList)) {
            throw new FileConnectorException(
                    CommonErrorCode.ILLEGAL_ARGUMENT, "sink columns can not be empty");
        }

        if (!config.hasPath(CommonOptions.HAS_TARGET_COLUMNS.key()) ||
                !config.getBoolean(CommonOptions.HAS_TARGET_COLUMNS.key())) {
            // if (this.sinkColumnList.size() != aresRowTypeInfo.getFieldNames().length) {
            //     throw new AresException("Sink columns number not equal to target columns number");
            // }
            aresRowTypeInfo.setFieldNames(this.sinkColumnList.toArray(new String[0]));
        }

        this.sinkColumnsIndexInRow = new ArrayList<>();
        String[] fieldNames = aresRowTypeInfo.getFieldNames();


        LABEL:
        for (String sinkColumn : this.sinkColumnList) {
            for (int i = 0; i < fieldNames.length; i++) {
                String fieldName = fieldNames[i];
                if (this.partitionFieldList.contains(fieldName.toLowerCase())) {
                    continue;
                }
                if (fieldName.equalsIgnoreCase(sinkColumn)) {
                    this.sinkColumnsIndexInRow.add(i);
                    continue LABEL;
                }
            }
            throw new AresException(String.format("Target column not found in sink columns: %s", sinkColumn));

        }

        // init sink column index and partition field index, we will use the column index to found
        // the data in AresRow
        this.partitionFieldsIndexInRow = new ArrayList<>();
        LABEL:
        for (String partitionField : this.partitionFieldList) {
            for (int i = 0; i < fieldNames.length; i++) {
                String fieldName = fieldNames[i];
                if (!this.partitionFieldList.contains(fieldName.toLowerCase())) {
                    continue;
                }
                if (fieldName.equalsIgnoreCase(partitionField)) {
                    this.partitionFieldsIndexInRow.add(i);
                    continue LABEL;
                }
            }
            throw new AresException(String.format("Target partition column not found in sink partitions: %s", partitionField));
        }

        if (config.hasPath(BaseSinkConfig.MAX_ROWS_IN_MEMORY.key())) {
            this.maxRowsInMemory = config.getInt(BaseSinkConfig.MAX_ROWS_IN_MEMORY.key());
        }

        if (config.hasPath(BaseSinkConfig.SHEET_NAME.key())) {
            this.sheetName = config.getString(BaseSinkConfig.SHEET_NAME.key());
        }

        if (FileFormat.XML
                .name()
                .equalsIgnoreCase(config.getString(BaseSinkConfig.FILE_FORMAT_TYPE.key()))) {
            if (!config.hasPath(BaseSinkConfig.XML_USE_ATTR_FORMAT.key())) {
                throw new FileConnectorException(
                        CommonErrorCode.ILLEGAL_ARGUMENT,
                        "User must define xml_use_attr_format when file_format_type is xml");
            }

            this.xmlUseAttrFormat = config.getBoolean(BaseSinkConfig.XML_USE_ATTR_FORMAT.key());

            if (config.hasPath(BaseSinkConfig.XML_ROOT_TAG.key())) {
                this.xmlRootTag = config.getString(BaseSinkConfig.XML_ROOT_TAG.key());
            }

            if (config.hasPath(BaseSinkConfig.XML_ROW_TAG.key())) {
                this.xmlRowTag = config.getString(BaseSinkConfig.XML_ROW_TAG.key());
            }
        }
    }
}
