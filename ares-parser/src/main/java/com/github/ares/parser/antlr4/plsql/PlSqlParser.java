// Generated from /Users/rewerma/Develop/git_aliyun/ares/ares-parser/src/main/java/com/github/ares/parser/antlr4/plsql/PlSqlParser.g4 by ANTLR 4.12.0
package com.github.ares.parser.antlr4.plsql;
import com.github.ares.org.antlr.v4.runtime.atn.*;
import com.github.ares.org.antlr.v4.runtime.dfa.DFA;
import com.github.ares.org.antlr.v4.runtime.*;
import com.github.ares.org.antlr.v4.runtime.misc.*;
import com.github.ares.org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class PlSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.12.0", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ABORT=1, ABS=2, ABSENT=3, ACCESS=4, ACCESSED=5, ACCOUNT=6, ACL=7, ACOS=8, 
		ACROSS=9, ACTION=10, ACTIONS=11, ACTIVATE=12, ACTIVE=13, ACTIVE_COMPONENT=14, 
		ACTIVE_DATA=15, ACTIVE_FUNCTION=16, ACTIVE_TAG=17, ACTIVITY=18, ADAPTIVE_PLAN=19, 
		ADD=20, ADD_COLUMN=21, ADD_GROUP=22, ADD_MONTHS=23, ADJ_DATE=24, ADMIN=25, 
		ADMINISTER=26, ADMINISTRATOR=27, ADVANCED=28, ADVISE=29, ADVISOR=30, AFD_DISKSTRING=31, 
		AFTER=32, AGENT=33, AGGREGATE=34, A_LETTER=35, ALIAS=36, ALL=37, ALLOCATE=38, 
		ALLOW=39, ALL_ROWS=40, ALTER=41, ALTERNATE=42, ALWAYS=43, ANALYTIC=44, 
		ANALYZE=45, ANCESTOR=46, ANCILLARY=47, AND=48, AND_EQUAL=49, ANOMALY=50, 
		ANSI_REARCH=51, ANTIJOIN=52, ANY=53, ANYSCHEMA=54, APPEND=55, APPENDCHILDXML=56, 
		APPEND_VALUES=57, APPLICATION=58, APPLY=59, APPROX_COUNT_DISTINCT=60, 
		ARCHIVAL=61, ARCHIVE=62, ARCHIVED=63, ARCHIVELOG=64, ARRAY=65, AS=66, 
		ASC=67, ASCII=68, ASCIISTR=69, ASIN=70, ASIS=71, ASSEMBLY=72, ASSIGN=73, 
		ASSOCIATE=74, ASYNC=75, ASYNCHRONOUS=76, ATAN2=77, ATAN=78, AT=79, ATTRIBUTE=80, 
		ATTRIBUTES=81, AUDIT=82, AUTHENTICATED=83, AUTHENTICATION=84, AUTHID=85, 
		AUTHORIZATION=86, AUTOALLOCATE=87, AUTO=88, AUTOBACKUP=89, AUTOEXTEND=90, 
		AUTO_LOGIN=91, AUTOMATIC=92, AUTONOMOUS_TRANSACTION=93, AUTO_REOPTIMIZE=94, 
		AVAILABILITY=95, AVRO=96, BACKGROUND=97, BACKINGFILE=98, BACKUP=99, BACKUPS=100, 
		BACKUPSET=101, BASIC=102, BASICFILE=103, BATCH=104, BATCHSIZE=105, BATCH_TABLE_ACCESS_BY_ROWID=106, 
		BECOME=107, BEFORE=108, BEGIN=109, BEGINNING=110, BEGIN_OUTLINE_DATA=111, 
		BEHALF=112, BEQUEATH=113, BETWEEN=114, BFILE=115, BFILENAME=116, BIGFILE=117, 
		BINARY=118, BINARY_DOUBLE=119, BINARY_DOUBLE_INFINITY=120, BINARY_DOUBLE_NAN=121, 
		BINARY_FLOAT=122, BINARY_FLOAT_INFINITY=123, BINARY_FLOAT_NAN=124, BINARY_INTEGER=125, 
		BIND_AWARE=126, BINDING=127, BIN_TO_NUM=128, BITAND=129, BITMAP_AND=130, 
		BITMAP=131, BITMAPS=132, BITMAP_TREE=133, BITS=134, BLOB=135, BLOCK=136, 
		BLOCK_RANGE=137, BLOCKS=138, BLOCKSIZE=139, BODY=140, BOOLEAN=141, BOTH=142, 
		BOUND=143, BRANCH=144, BREADTH=145, BROADCAST=146, BSON=147, BUFFER=148, 
		BUFFER_CACHE=149, BUFFER_POOL=150, BUILD=151, BULK=152, BY=153, BYPASS_RECURSIVE_CHECK=154, 
		BYPASS_UJVC=155, BYTE=156, CACHE=157, CACHE_CB=158, CACHE_INSTANCES=159, 
		CACHE_TEMP_TABLE=160, CACHING=161, CALCULATED=162, CALLBACK=163, CALL=164, 
		CANCEL=165, CANONICAL=166, CAPACITY=167, CAPTION=168, CARDINALITY=169, 
		CASCADE=170, CASE=171, CAST=172, CASESENSITIVE=173, CATEGORY=174, CDBDEFAULT=175, 
		CEIL=176, CELL_FLASH_CACHE=177, CERTIFICATE=178, CFILE=179, CHAINED=180, 
		CHANGE=181, CHANGETRACKING=182, CHANGE_DUPKEY_ERROR_INDEX=183, CHARACTER=184, 
		CHAR=185, CHAR_CS=186, CHARTOROWID=187, CHECK_ACL_REWRITE=188, CHECK=189, 
		CHECKPOINT=190, CHILD=191, CHOOSE=192, CHR=193, CHUNK=194, CLASS=195, 
		CLASSIFICATION=196, CLASSIFIER=197, CLAUSE=198, CLEAN=199, CLEANUP=200, 
		CLEAR=201, C_LETTER=202, CLIENT=203, CLOB=204, CLONE=205, CLOSE_CACHED_OPEN_CURSORS=206, 
		CLOSE=207, CLUSTER_BY_ROWID=208, CLUSTER=209, CLUSTER_DETAILS=210, CLUSTER_DISTANCE=211, 
		CLUSTER_ID=212, CLUSTERING=213, CLUSTERING_FACTOR=214, CLUSTER_PROBABILITY=215, 
		CLUSTER_SET=216, COALESCE=217, COALESCE_SQ=218, COARSE=219, CO_AUTH_IND=220, 
		COLD=221, COLLECT=222, COLUMNAR=223, COLUMN_AUTH_INDICATOR=224, COLUMN=225, 
		COLUMNS=226, COLUMN_STATS=227, COLUMN_VALUE=228, COMMENT=229, COMMIT=230, 
		COMMITTED=231, COMMON=232, COMMON_DATA=233, COMPACT=234, COMPATIBILITY=235, 
		COMPILE=236, COMPLETE=237, COMPLIANCE=238, COMPONENT=239, COMPONENTS=240, 
		COMPOSE=241, COMPOSITE=242, COMPOSITE_LIMIT=243, COMPOUND=244, COMPRESS=245, 
		COMPUTE=246, CONCAT=247, CON_DBID_TO_ID=248, CONDITIONAL=249, CONDITION=250, 
		CONFIRM=251, CONFORMING=252, CON_GUID_TO_ID=253, CON_ID=254, CON_NAME_TO_ID=255, 
		CONNECT_BY_CB_WHR_ONLY=256, CONNECT_BY_COMBINE_SW=257, CONNECT_BY_COST_BASED=258, 
		CONNECT_BY_ELIM_DUPS=259, CONNECT_BY_FILTERING=260, CONNECT_BY_ISCYCLE=261, 
		CONNECT_BY_ISLEAF=262, CONNECT_BY_ROOT=263, CONNECT=264, CONNECT_TIME=265, 
		CONSIDER=266, CONSISTENT=267, CONSTANT=268, CONST=269, CONSTRAINT=270, 
		CONSTRAINTS=271, CONSTRUCTOR=272, CONTAINER=273, CONTAINERS=274, CONTAINERS_DEFAULT=275, 
		CONTAINER_DATA=276, CONTAINER_MAP=277, CONTENT=278, CONTENTS=279, CONTEXT=280, 
		CONTINUE=281, CONTROLFILE=282, CON_UID_TO_ID=283, CONVERT=284, CONVERSION=285, 
		COOKIE=286, COPY=287, CORR_K=288, CORR_S=289, CORRUPTION=290, CORRUPT_XID_ALL=291, 
		CORRUPT_XID=292, COS=293, COSH=294, COST=295, COST_XML_QUERY_REWRITE=296, 
		COUNT=297, COVAR_POP=298, COVAR_SAMP=299, CPU_COSTING=300, CPU_PER_CALL=301, 
		CPU_PER_SESSION=302, CRASH=303, CREATE=304, CREATE_FILE_DEST=305, CREATE_STORED_OUTLINES=306, 
		CREATION=307, CREDENTIAL=308, CRITICAL=309, CROSS=310, CROSSEDITION=311, 
		CSCONVERT=312, CUBE_AJ=313, CUBE=314, CUBE_GB=315, CUBE_SJ=316, CUME_DISTM=317, 
		CURRENT=318, CURRENT_DATE=319, CURRENT_SCHEMA=320, CURRENT_TIME=321, CURRENT_TIMESTAMP=322, 
		CURRENT_USER=323, CURRENTV=324, CURSOR=325, CURSOR_SHARING_EXACT=326, 
		CURSOR_SPECIFIC_SEGMENT=327, CUSTOMDATUM=328, CV=329, CYCLE=330, DANGLING=331, 
		DATABASE=332, DATA=333, DATAFILE=334, DATAFILES=335, DATAGUARDCONFIG=336, 
		DATAMOVEMENT=337, DATAOBJNO=338, DATAOBJ_TO_MAT_PARTITION=339, DATAOBJ_TO_PARTITION=340, 
		DATAPUMP=341, DATA_SECURITY_REWRITE_LIMIT=342, DATE=343, DATE_MODE=344, 
		DAY=345, DAYOFWEEK=346, DAYS=347, DBA=348, DBA_RECYCLEBIN=349, DBMS_STATS=350, 
		DB_ROLE_CHANGE=351, DBTIMEZONE=352, DB_UNIQUE_NAME=353, DB_VERSION=354, 
		DDL=355, DEALLOCATE=356, DEBUG=357, DEBUGGER=358, DEC=359, DECIMAL=360, 
		DECLARE=361, DECOMPOSE=362, DECORRELATE=363, DECR=364, DECREMENT=365, 
		DECRYPT=366, DEDUPLICATE=367, DEFAULT=368, DEFAULTS=369, DEFAULT_COLLATION=370, 
		DEFAULT_CREDENTIAL=371, DEFERRABLE=372, DEFERRED=373, DEFINED=374, DEFINE=375, 
		DEFINER=376, DEGREE=377, DELAY=378, DELEGATE=379, DELETE_ALL=380, DELETE=381, 
		DELETEXML=382, DEMAND=383, DENSE_RANKM=384, DEPENDENT=385, DEPTH=386, 
		DEQUEUE=387, DEREF=388, DEREF_NO_REWRITE=389, DESC=390, DESCRIPTION=391, 
		DESTROY=392, DETACHED=393, DETERMINES=394, DETERMINISTIC=395, DICTIONARY=396, 
		DIMENSION=397, DIMENSIONS=398, DIRECT_LOAD=399, DIRECTORY=400, DIRECT_PATH=401, 
		DISABLE_ALL=402, DISABLE=403, DISABLE_PARALLEL_DML=404, DISABLE_PRESET=405, 
		DISABLE_RPKE=406, DISALLOW=407, DISASSOCIATE=408, DISCARD=409, DISCONNECT=410, 
		DISK=411, DISKGROUP=412, DISKGROUP_PLUS=413, DISKS=414, DISMOUNT=415, 
		DISTINCT=416, DISTINGUISHED=417, DISTRIBUTED=418, DISTRIBUTE=419, DML=420, 
		DML_UPDATE=421, DOCFIDELITY=422, DOCUMENT=423, DOMAIN_INDEX_FILTER=424, 
		DOMAIN_INDEX_NO_SORT=425, DOMAIN_INDEX_SORT=426, DOY=427, DOUBLE=428, 
		DOWNGRADE=429, DRIVING_SITE=430, DROP_COLUMN=431, DROP=432, DROP_GROUP=433, 
		DSINTERVAL_UNCONSTRAINED=434, DST_UPGRADE_INSERT_CONV=435, DUMP=436, DUMPSET=437, 
		DUPLICATE=438, DV=439, DYNAMIC=440, DYNAMIC_SAMPLING=441, DYNAMIC_SAMPLING_EST_CDN=442, 
		E_LETTER=443, EACH=444, EDITIONABLE=445, EDITION=446, EDITIONING=447, 
		EDITIONS=448, ELEMENT=449, ELIM_GROUPBY=450, ELIMINATE_JOIN=451, ELIMINATE_OBY=452, 
		ELIMINATE_OUTER_JOIN=453, ELSE=454, ELSIF=455, EM=456, EMPTY_BLOB=457, 
		EMPTY_CLOB=458, EMPTY=459, ENABLE_ALL=460, ENABLE=461, ENABLE_PARALLEL_DML=462, 
		ENABLE_PRESET=463, ENCODING=464, ENCRYPT=465, ENCRYPTION=466, END=467, 
		END_OUTLINE_DATA=468, ENFORCED=469, ENFORCE=470, ENQUEUE=471, ENTERPRISE=472, 
		ENTITYESCAPING=473, ENTRY=474, EQUIPART=475, ERR=476, ERROR_ARGUMENT=477, 
		ERROR=478, ERROR_ON_OVERLAP_TIME=479, ERRORS=480, ESCAPE=481, ESTIMATE=482, 
		EVAL=483, EVALNAME=484, EVALUATE=485, EVALUATION=486, EVENTS=487, EVERY=488, 
		EXCEPT=489, EXCEPTION=490, EXCEPTION_INIT=491, EXCEPTIONS=492, EXCHANGE=493, 
		EXCLUDE=494, EXCLUDING=495, EXCLUSIVE=496, EXECUTE=497, EXEMPT=498, EXISTING=499, 
		EXISTS=500, EXISTSNODE=501, EXIT=502, EXPAND_GSET_TO_UNION=503, EXPAND_TABLE=504, 
		EXP=505, EXPIRE=506, EXPLAIN=507, EXPLOSION=508, EXPORT=509, EXPR_CORR_CHECK=510, 
		EXPRESS=511, EXTENDS=512, EXTENT=513, EXTENTS=514, EXTERNAL=515, EXTERNALLY=516, 
		EXTRACTCLOBXML=517, EXTRACT=518, EXTRACTVALUE=519, EXTRA=520, FACILITY=521, 
		FACT=522, FACTOR=523, FACTORIZE_JOIN=524, FAILED=525, FAILED_LOGIN_ATTEMPTS=526, 
		FAILGROUP=527, FAILOVER=528, FAILURE=529, FALSE=530, FAMILY=531, FAR=532, 
		FAST=533, FASTSTART=534, FBTSCAN=535, FEATURE=536, FEATURE_DETAILS=537, 
		FEATURE_ID=538, FEATURE_SET=539, FEATURE_VALUE=540, FETCH=541, FILE=542, 
		FILE_NAME_CONVERT=543, FILEGROUP=544, FILESTORE=545, FILESYSTEM_LIKE_LOGGING=546, 
		FILTER=547, FINAL=548, FINE=549, FINISH=550, FIRST=551, FIRSTM=552, FIRST_ROWS=553, 
		FIRST_VALUE=554, FIXED_VIEW_DATA=555, FLAGGER=556, FLASHBACK=557, FLASH_CACHE=558, 
		FLOAT=559, FLOB=560, FLEX=561, FLOOR=562, FLUSH=563, FOLDER=564, FOLLOWING=565, 
		FOLLOWS=566, FORALL=567, FORCE=568, FORCE_XML_QUERY_REWRITE=569, FOREIGN=570, 
		FOREVER=571, FOR=572, FORMAT=573, FORWARD=574, FRAGMENT_NUMBER=575, FREELIST=576, 
		FREELISTS=577, FREEPOOLS=578, FRESH=579, FROM=580, FROM_TZ=581, FULL=582, 
		FULL_OUTER_JOIN_TO_OUTER=583, FUNCTION=584, FUNCTIONS=585, FTP=586, G_LETTER=587, 
		GATHER_OPTIMIZER_STATISTICS=588, GATHER_PLAN_STATISTICS=589, GBY_CONC_ROLLUP=590, 
		GBY_PUSHDOWN=591, GENERATED=592, GET=593, GLOBAL=594, GLOBALLY=595, GLOBAL_NAME=596, 
		GLOBAL_TOPIC_ENABLED=597, GOTO=598, GRANT=599, GROUP_BY=600, GROUP=601, 
		GROUP_ID=602, GROUPING=603, GROUPING_ID=604, GROUPS=605, GUARANTEED=606, 
		GUARANTEE=607, GUARD=608, HALF_YEARS=609, HASH_AJ=610, HASH=611, HASHKEYS=612, 
		HASH_SJ=613, HAVING=614, HEADER=615, HEAP=616, HELP=617, HEXTORAW=618, 
		HEXTOREF=619, HIDDEN_KEYWORD=620, HIDE=621, HIER_ORDER=622, HIERARCHICAL=623, 
		HIERARCHIES=624, HIERARCHY=625, HIGH=626, HINTSET_BEGIN=627, HINTSET_END=628, 
		HOT=629, HOUR=630, HOURS=631, HTTP=632, HWM_BROKERED=633, HYBRID=634, 
		H_LETTER=635, IDENTIFIED=636, IDENTIFIER=637, IDENTITY=638, IDGENERATORS=639, 
		ID=640, IDLE_TIME=641, IF=642, IGNORE=643, IGNORE_OPTIM_EMBEDDED_HINTS=644, 
		IGNORE_ROW_ON_DUPKEY_INDEX=645, IGNORE_WHERE_CLAUSE=646, ILM=647, IMMEDIATE=648, 
		IMPACT=649, IMPORT=650, INACTIVE=651, INACTIVE_ACCOUNT_TIME=652, INCLUDE=653, 
		INCLUDE_VERSION=654, INCLUDING=655, INCREMENTAL=656, INCREMENT=657, INCR=658, 
		INDENT=659, INDEX_ASC=660, INDEX_COMBINE=661, INDEX_DESC=662, INDEXED=663, 
		INDEXES=664, INDEX_FFS=665, INDEX_FILTER=666, INDEX=667, INDEXING=668, 
		INDEX_JOIN=669, INDEX_ROWS=670, INDEX_RRS=671, INDEX_RS_ASC=672, INDEX_RS_DESC=673, 
		INDEX_RS=674, INDEX_SCAN=675, INDEX_SKIP_SCAN=676, INDEX_SS_ASC=677, INDEX_SS_DESC=678, 
		INDEX_SS=679, INDEX_STATS=680, INDEXTYPE=681, INDEXTYPES=682, INDICATOR=683, 
		INDICES=684, INFINITE=685, INFORMATIONAL=686, INHERIT=687, IN=688, INITCAP=689, 
		INITIAL=690, INITIALIZED=691, INITIALLY=692, INITRANS=693, INLINE=694, 
		INLINE_XMLTYPE_NT=695, INMEMORY=696, IN_MEMORY_METADATA=697, INMEMORY_PRUNING=698, 
		INNER=699, INOUT=700, INPLACE=701, INSERTCHILDXMLAFTER=702, INSERTCHILDXMLBEFORE=703, 
		INSERTCHILDXML=704, INSERT=705, INSERTXMLAFTER=706, INSERTXMLBEFORE=707, 
		INSTANCE=708, INSTANCES=709, INSTANTIABLE=710, INSTANTLY=711, INSTEAD=712, 
		INSTR2=713, INSTR4=714, INSTRB=715, INSTRC=716, INSTR=717, INTEGER=718, 
		INTERLEAVED=719, INTERMEDIATE=720, INTERNAL_CONVERT=721, INTERNAL_USE=722, 
		INTERPRETED=723, INTERSECT=724, INTERVAL=725, INT=726, BIGINT=727, INTO=728, 
		INVALIDATE=729, INVISIBLE=730, IN_XQUERY=731, IS=732, IS_LEAF=733, ISOLATION=734, 
		ISOLATION_LEVEL=735, ITERATE=736, ITERATION_NUMBER=737, JAVA=738, JOB=739, 
		JOIN=740, JSON_ARRAYAGG=741, JSON_ARRAY=742, JSON_EQUAL=743, JSON_EXISTS2=744, 
		JSON_EXISTS=745, JSONGET=746, JSON=747, JSON_OBJECTAGG=748, JSON_OBJECT=749, 
		JSONPARSE=750, JSON_QUERY=751, JSON_SERIALIZE=752, JSON_TABLE=753, JSON_TEXTCONTAINS2=754, 
		JSON_TEXTCONTAINS=755, JSON_TRANSFORM=756, JSON_VALUE=757, K_LETTER=758, 
		KEEP_DUPLICATES=759, KEEP=760, KERBEROS=761, KEY=762, KEY_LENGTH=763, 
		KEYSIZE=764, KEYS=765, KEYSTORE=766, KILL=767, LABEL=768, LANGUAGE=769, 
		LAST_DAY=770, LAST=771, LAST_VALUE=772, LATERAL=773, LAX=774, LAYER=775, 
		LDAP_REGISTRATION_ENABLED=776, LDAP_REGISTRATION=777, LDAP_REG_SYNC_INTERVAL=778, 
		LEAF=779, LEAD_CDB=780, LEAD_CDB_URI=781, LEADING=782, LEFT=783, LENGTH2=784, 
		LENGTH4=785, LENGTHB=786, LENGTHC=787, LENGTH=788, LESS=789, LEVEL=790, 
		LEVEL_NAME=791, LEVELS=792, LIBRARY=793, LIFECYCLE=794, LIFE=795, LIFETIME=796, 
		LIKE2=797, LIKE4=798, LIKEC=799, LIKE_EXPAND=800, LIKE=801, LIMIT=802, 
		LINEAR=803, LINK=804, LIST=805, LN=806, LNNVL=807, LOAD=808, LOB=809, 
		LOBNVL=810, LOBS=811, LOCAL_INDEXES=812, LOCAL=813, LOCALTIME=814, LOCALTIMESTAMP=815, 
		LOCATION=816, LOCATOR=817, LOCKDOWN=818, LOCKED=819, LOCKING=820, LOCK=821, 
		LOGFILE=822, LOGFILES=823, LOGGING=824, LOGICAL=825, LOGICAL_READS_PER_CALL=826, 
		LOGICAL_READS_PER_SESSION=827, LOG=828, LOGMINING=829, LOGOFF=830, LOGON=831, 
		LOG_READ_ONLY_VIOLATIONS=832, LONG=833, LOOP=834, LOST=835, LOWER=836, 
		LOW=837, LPAD=838, LTRIM=839, M_LETTER=840, MAIN=841, MAKE_REF=842, MANAGED=843, 
		MANAGE=844, MANAGEMENT=845, MANAGER=846, MANDATORY=847, MANUAL=848, MAP=849, 
		MAPPING=850, MASTER=851, MATCHED=852, MATCHES=853, MATCH=854, MATCH_NUMBER=855, 
		MATCH_RECOGNIZE=856, MATERIALIZED=857, MATERIALIZE=858, MAXARCHLOGS=859, 
		MAXDATAFILES=860, MAXEXTENTS=861, MAXIMIZE=862, MAXINSTANCES=863, MAXLOGFILES=864, 
		MAXLOGHISTORY=865, MAXLOGMEMBERS=866, MAX_SHARED_TEMP_SIZE=867, MAXSIZE=868, 
		MAXTRANS=869, MAXVALUE=870, MEASURE=871, MEASURES=872, MEDIUM=873, MEMBER=874, 
		MEMBER_CAPTION=875, MEMBER_DESCRIPTION=876, MEMBER_NAME=877, MEMBER_UNIQUE_NAME=878, 
		MEMCOMPRESS=879, MEMORY=880, MERGEACTIONS=881, MERGE_AJ=882, MERGE_CONST_ON=883, 
		MERGE=884, MERGE_SJ=885, METADATA=886, METHOD=887, MIGRATE=888, MIGRATION=889, 
		MINEXTENTS=890, MINIMIZE=891, MINIMUM=892, MINING=893, MINUS=894, MINUS_NULL=895, 
		MINUTE=896, MINUTES=897, MINVALUE=898, MIRRORCOLD=899, MIRRORHOT=900, 
		MIRROR=901, MISSING=902, MISMATCH=903, MLSLABEL=904, MODEL_COMPILE_SUBQUERY=905, 
		MODEL_DONTVERIFY_UNIQUENESS=906, MODEL_DYNAMIC_SUBQUERY=907, MODEL_MIN_ANALYSIS=908, 
		MODEL=909, MODEL_NB=910, MODEL_NO_ANALYSIS=911, MODEL_PBY=912, MODEL_PUSH_REF=913, 
		MODEL_SV=914, MODE=915, MODIFICATION=916, MODIFY_COLUMN_TYPE=917, MODIFY=918, 
		MOD=919, MODULE=920, MONITORING=921, MONITOR=922, MONTH=923, MONTHS_BETWEEN=924, 
		MONTHS=925, MOUNT=926, MOUNTPATH=927, MOUNTPOINT=928, MOVEMENT=929, MOVE=930, 
		MULTIDIMENSIONAL=931, MULTISET=932, MV_MERGE=933, NAMED=934, NAME=935, 
		NAMESPACE=936, NAN=937, NANVL=938, NATIONAL=939, NATIVE_FULL_OUTER_JOIN=940, 
		NATIVE=941, NATURAL=942, NATURALN=943, NAV=944, NCHAR_CS=945, NCHAR=946, 
		NCHR=947, NCLOB=948, NEEDED=949, NEG=950, NESTED=951, NESTED_TABLE_FAST_INSERT=952, 
		NESTED_TABLE_GET_REFS=953, NESTED_TABLE_ID=954, NESTED_TABLE_SET_REFS=955, 
		NESTED_TABLE_SET_SETID=956, NETWORK=957, NEVER=958, NEW=959, NEW_TIME=960, 
		NEXT_DAY=961, NEXT=962, NL_AJ=963, NLJ_BATCHING=964, NLJ_INDEX_FILTER=965, 
		NLJ_INDEX_SCAN=966, NLJ_PREFETCH=967, NLS_CALENDAR=968, NLS_CHARACTERSET=969, 
		NLS_CHARSET_DECL_LEN=970, NLS_CHARSET_ID=971, NLS_CHARSET_NAME=972, NLS_COMP=973, 
		NLS_CURRENCY=974, NLS_DATE_FORMAT=975, NLS_DATE_LANGUAGE=976, NLS_INITCAP=977, 
		NLS_ISO_CURRENCY=978, NL_SJ=979, NLS_LANG=980, NLS_LANGUAGE=981, NLS_LENGTH_SEMANTICS=982, 
		NLS_LOWER=983, NLS_NCHAR_CONV_EXCP=984, NLS_NUMERIC_CHARACTERS=985, NLS_SORT=986, 
		NLSSORT=987, NLS_SPECIAL_CHARS=988, NLS_TERRITORY=989, NLS_UPPER=990, 
		NO_ACCESS=991, NO_ADAPTIVE_PLAN=992, NO_ANSI_REARCH=993, NOAPPEND=994, 
		NOARCHIVELOG=995, NOAUDIT=996, NO_AUTO_REOPTIMIZE=997, NO_BASETABLE_MULTIMV_REWRITE=998, 
		NO_BATCH_TABLE_ACCESS_BY_ROWID=999, NO_BIND_AWARE=1000, NO_BUFFER=1001, 
		NOCACHE=1002, NO_CARTESIAN=1003, NO_CHECK_ACL_REWRITE=1004, NO_CLUSTER_BY_ROWID=1005, 
		NO_CLUSTERING=1006, NO_COALESCE_SQ=1007, NO_COMMON_DATA=1008, NOCOMPRESS=1009, 
		NO_CONNECT_BY_CB_WHR_ONLY=1010, NO_CONNECT_BY_COMBINE_SW=1011, NO_CONNECT_BY_COST_BASED=1012, 
		NO_CONNECT_BY_ELIM_DUPS=1013, NO_CONNECT_BY_FILTERING=1014, NOCOPY=1015, 
		NO_COST_XML_QUERY_REWRITE=1016, NO_CPU_COSTING=1017, NOCPU_COSTING=1018, 
		NOCYCLE=1019, NO_DATA_SECURITY_REWRITE=1020, NO_DECORRELATE=1021, NODELAY=1022, 
		NO_DOMAIN_INDEX_FILTER=1023, NO_DST_UPGRADE_INSERT_CONV=1024, NO_ELIM_GROUPBY=1025, 
		NO_ELIMINATE_JOIN=1026, NO_ELIMINATE_OBY=1027, NO_ELIMINATE_OUTER_JOIN=1028, 
		NOENTITYESCAPING=1029, NO_EXPAND_GSET_TO_UNION=1030, NO_EXPAND=1031, NO_EXPAND_TABLE=1032, 
		NO_FACT=1033, NO_FACTORIZE_JOIN=1034, NO_FILTERING=1035, NOFORCE=1036, 
		NO_FULL_OUTER_JOIN_TO_OUTER=1037, NO_GATHER_OPTIMIZER_STATISTICS=1038, 
		NO_GBY_PUSHDOWN=1039, NOGUARANTEE=1040, NO_INDEX_FFS=1041, NO_INDEX=1042, 
		NO_INDEX_SS=1043, NO_INMEMORY=1044, NO_INMEMORY_PRUNING=1045, NOKEEP=1046, 
		NO_LOAD=1047, NOLOCAL=1048, NOLOGGING=1049, NOMAPPING=1050, NOMAXVALUE=1051, 
		NO_MERGE=1052, NOMINIMIZE=1053, NOMINVALUE=1054, NO_MODEL_PUSH_REF=1055, 
		NO_MONITORING=1056, NOMONITORING=1057, NO_MONITOR=1058, NO_MULTIMV_REWRITE=1059, 
		NO_NATIVE_FULL_OUTER_JOIN=1060, NONBLOCKING=1061, NONEDITIONABLE=1062, 
		NONE=1063, NO_NLJ_BATCHING=1064, NO_NLJ_PREFETCH=1065, NO=1066, NONSCHEMA=1067, 
		NO_OBJECT_LINK=1068, NOORDER=1069, NO_ORDER_ROLLUPS=1070, NO_OUTER_JOIN_TO_ANTI=1071, 
		NO_OUTER_JOIN_TO_INNER=1072, NOOVERRIDE=1073, NO_PARALLEL_INDEX=1074, 
		NOPARALLEL_INDEX=1075, NO_PARALLEL=1076, NOPARALLEL=1077, NO_PARTIAL_COMMIT=1078, 
		NO_PARTIAL_JOIN=1079, NO_PARTIAL_ROLLUP_PUSHDOWN=1080, NOPARTITION=1081, 
		NO_PLACE_DISTINCT=1082, NO_PLACE_GROUP_BY=1083, NO_PQ_CONCURRENT_UNION=1084, 
		NO_PQ_MAP=1085, NOPROMPT=1086, NO_PQ_REPLICATE=1087, NO_PQ_SKEW=1088, 
		NO_PRUNE_GSETS=1089, NO_PULL_PRED=1090, NO_PUSH_PRED=1091, NO_PUSH_SUBQ=1092, 
		NO_PX_FAULT_TOLERANCE=1093, NO_PX_JOIN_FILTER=1094, NO_QKN_BUFF=1095, 
		NO_QUERY_TRANSFORMATION=1096, NO_REF_CASCADE=1097, NORELOCATE=1098, NORELY=1099, 
		NOREPAIR=1100, NOREPLAY=1101, NORESETLOGS=1102, NO_RESULT_CACHE=1103, 
		NOREVERSE=1104, NO_REWRITE=1105, NOREWRITE=1106, NORMAL=1107, NO_ROOT_SW_FOR_LOCAL=1108, 
		NOROWDEPENDENCIES=1109, NOSCHEMACHECK=1110, NOSEGMENT=1111, NO_SEMIJOIN=1112, 
		NO_SEMI_TO_INNER=1113, NO_SET_TO_JOIN=1114, NOSORT=1115, NO_SQL_TRANSLATION=1116, 
		NO_SQL_TUNE=1117, NO_STAR_TRANSFORMATION=1118, NO_STATEMENT_QUEUING=1119, 
		NO_STATS_GSETS=1120, NOSTRICT=1121, NO_SUBQUERY_PRUNING=1122, NO_SUBSTRB_PAD=1123, 
		NO_SWAP_JOIN_INPUTS=1124, NOSWITCH=1125, NO_TABLE_LOOKUP_BY_NL=1126, NO_TEMP_TABLE=1127, 
		NOTHING=1128, NOTIFICATION=1129, NOT=1130, NO_TRANSFORM_DISTINCT_AGG=1131, 
		NO_UNNEST=1132, NO_USE_CUBE=1133, NO_USE_HASH_AGGREGATION=1134, NO_USE_HASH_GBY_FOR_PUSHDOWN=1135, 
		NO_USE_HASH=1136, NO_USE_INVISIBLE_INDEXES=1137, NO_USE_MERGE=1138, NO_USE_NL=1139, 
		NO_USE_VECTOR_AGGREGATION=1140, NOVALIDATE=1141, NO_VECTOR_TRANSFORM_DIMS=1142, 
		NO_VECTOR_TRANSFORM_FACT=1143, NO_VECTOR_TRANSFORM=1144, NOWAIT=1145, 
		NO_XDB_FASTPATH_INSERT=1146, NO_XML_DML_REWRITE=1147, NO_XMLINDEX_REWRITE_IN_SELECT=1148, 
		NO_XMLINDEX_REWRITE=1149, NO_XML_QUERY_REWRITE=1150, NO_ZONEMAP=1151, 
		NTH_VALUE=1152, NULLIF=1153, NULL_=1154, NULLS=1155, NUMBER=1156, NUMERIC=1157, 
		NUM_INDEX_KEYS=1158, NUMTODSINTERVAL=1159, NUMTOYMINTERVAL=1160, NVARCHAR2=1161, 
		NVL2=1162, OBJECT2XML=1163, OBJECT=1164, OBJ_ID=1165, OBJNO=1166, OBJNO_REUSE=1167, 
		OCCURENCES=1168, OFFLINE=1169, OFF=1170, OFFSET=1171, OF=1172, OIDINDEX=1173, 
		OID=1174, OLAP=1175, OLD=1176, OLD_PUSH_PRED=1177, OLS=1178, OLTP=1179, 
		OMIT=1180, ONE=1181, ONLINE=1182, ONLINELOG=1183, ONLY=1184, ON=1185, 
		OPAQUE=1186, OPAQUE_TRANSFORM=1187, OPAQUE_XCANONICAL=1188, OPCODE=1189, 
		OPEN=1190, OPERATIONS=1191, OPERATOR=1192, OPT_ESTIMATE=1193, OPTIMAL=1194, 
		OPTIMIZE=1195, OPTIMIZER_FEATURES_ENABLE=1196, OPTIMIZER_GOAL=1197, OPTION=1198, 
		OPT_PARAM=1199, ORA_BRANCH=1200, ORA_CHECK_ACL=1201, ORA_CHECK_PRIVILEGE=1202, 
		ORA_CLUSTERING=1203, ORADATA=1204, ORADEBUG=1205, ORA_DST_AFFECTED=1206, 
		ORA_DST_CONVERT=1207, ORA_DST_ERROR=1208, ORA_GET_ACLIDS=1209, ORA_GET_PRIVILEGES=1210, 
		ORA_HASH=1211, ORA_INVOKING_USERID=1212, ORA_INVOKING_USER=1213, ORA_INVOKING_XS_USER_GUID=1214, 
		ORA_INVOKING_XS_USER=1215, ORA_RAWCOMPARE=1216, ORA_RAWCONCAT=1217, ORA_ROWSCN=1218, 
		ORA_ROWSCN_RAW=1219, ORA_ROWVERSION=1220, ORA_TABVERSION=1221, ORA_WRITE_TIME=1222, 
		ORDERED=1223, ORDERED_PREDICATES=1224, ORDER=1225, ORDINALITY=1226, OR_EXPAND=1227, 
		ORGANIZATION=1228, OR=1229, OR_PREDICATES=1230, OSERROR=1231, OTHER=1232, 
		OUTER_JOIN_TO_ANTI=1233, OUTER_JOIN_TO_INNER=1234, OUTER=1235, OUTLINE_LEAF=1236, 
		OUTLINE=1237, OUT_OF_LINE=1238, OUT=1239, OVERFLOW_NOMOVE=1240, OVERFLOW=1241, 
		OVERLAPS=1242, OVER=1243, OVERRIDING=1244, OWNER=1245, OWNERSHIP=1246, 
		OWN=1247, P_LETTER=1248, PACKAGE=1249, PACKAGES=1250, PARALLEL_ENABLE=1251, 
		PARALLEL_INDEX=1252, PARALLEL=1253, PARAMETERFILE=1254, PARAMETERS=1255, 
		PARAM=1256, PARENT=1257, PARENT_LEVEL_NAME=1258, PARENT_UNIQUE_NAME=1259, 
		PARITY=1260, PARTIAL_JOIN=1261, PARTIALLY=1262, PARTIAL=1263, PARTIAL_ROLLUP_PUSHDOWN=1264, 
		PARTITION_HASH=1265, PARTITION_LIST=1266, PARTITION=1267, PARTITION_RANGE=1268, 
		PARTITIONS=1269, PARTNUMINST=1270, PASSING=1271, PASSWORD_GRACE_TIME=1272, 
		PASSWORD_LIFE_TIME=1273, PASSWORD_LOCK_TIME=1274, PASSWORD=1275, PASSWORD_REUSE_MAX=1276, 
		PASSWORD_REUSE_TIME=1277, PASSWORD_ROLLOVER_TIME=1278, PASSWORD_VERIFY_FUNCTION=1279, 
		PAST=1280, PATCH=1281, PATH=1282, PATH_PREFIX=1283, PATHS=1284, PATTERN=1285, 
		PBL_HS_BEGIN=1286, PBL_HS_END=1287, PCTFREE=1288, PCTINCREASE=1289, PCTTHRESHOLD=1290, 
		PCTUSED=1291, PCTVERSION=1292, PENDING=1293, PERCENT_FOUND=1294, PERCENT_ISOPEN=1295, 
		PERCENT_NOTFOUND=1296, PERCENT_KEYWORD=1297, PERCENT_RANKM=1298, PERCENT_ROWCOUNT=1299, 
		PERCENT_ROWTYPE=1300, PERCENT_TYPE=1301, PERFORMANCE=1302, PERIOD_KEYWORD=1303, 
		PERMANENT=1304, PERMISSION=1305, PERMUTE=1306, PER=1307, PFILE=1308, PHYSICAL=1309, 
		PIKEY=1310, PIPELINED=1311, PIPE=1312, PIV_GB=1313, PIVOT=1314, PIV_SSF=1315, 
		PLACE_DISTINCT=1316, PLACE_GROUP_BY=1317, PLAN=1318, PLSCOPE_SETTINGS=1319, 
		PLS_INTEGER=1320, PLSQL_CCFLAGS=1321, PLSQL_CODE_TYPE=1322, PLSQL_DEBUG=1323, 
		PLSQL_OPTIMIZE_LEVEL=1324, PLSQL_WARNINGS=1325, PLUGGABLE=1326, PMEM=1327, 
		POINT=1328, POLICY=1329, POOL_16K=1330, POOL_2K=1331, POOL_32K=1332, POOL_4K=1333, 
		POOL_8K=1334, POSITIVEN=1335, POSITIVE=1336, POST_TRANSACTION=1337, POWERMULTISET_BY_CARDINALITY=1338, 
		POWERMULTISET=1339, POWER=1340, PQ_CONCURRENT_UNION=1341, PQ_DISTRIBUTE=1342, 
		PQ_DISTRIBUTE_WINDOW=1343, PQ_FILTER=1344, PQ_MAP=1345, PQ_NOMAP=1346, 
		PQ_REPLICATE=1347, PQ_SKEW=1348, PRAGMA=1349, PREBUILT=1350, PRECEDES=1351, 
		PRECEDING=1352, PRECISION=1353, PRECOMPUTE_SUBQUERY=1354, PREDICATE_REORDERS=1355, 
		PRELOAD=1356, PREPARE=1357, PRESENTNNV=1358, PRESENT=1359, PRESENTV=1360, 
		PRESERVE_OID=1361, PRESERVE=1362, PRETTY=1363, PREVIOUS=1364, PREV=1365, 
		PRIMARY=1366, PRINTBLOBTOCLOB=1367, PRIORITY=1368, PRIOR=1369, PRIVATE=1370, 
		PRIVATE_SGA=1371, PRIVILEGED=1372, PRIVILEGE=1373, PRIVILEGES=1374, PROCEDURAL=1375, 
		PROCEDURE=1376, PROCESS=1377, PROFILE=1378, PROGRAM=1379, PROJECT=1380, 
		PROPAGATE=1381, PROPERTY=1382, PROTECTED=1383, PROTECTION=1384, PROTOCOL=1385, 
		PROXY=1386, PRUNING=1387, PUBLIC=1388, PULL_PRED=1389, PURGE=1390, PUSH_PRED=1391, 
		PUSH_SUBQ=1392, PX_FAULT_TOLERANCE=1393, PX_GRANULE=1394, PX_JOIN_FILTER=1395, 
		QB_NAME=1396, QUARTER=1397, QUARTERS=1398, QUERY_BLOCK=1399, QUERY=1400, 
		QUEUE_CURR=1401, QUEUE=1402, QUEUE_ROWP=1403, QUIESCE=1404, QUORUM=1405, 
		QUOTA=1406, QUOTAGROUP=1407, RAISE=1408, RANDOM_LOCAL=1409, RANDOM=1410, 
		RANGE=1411, RANKM=1412, RAPIDLY=1413, RAW=1414, RAWTOHEX=1415, RAWTONHEX=1416, 
		RBA=1417, RBO_OUTLINE=1418, RDBA=1419, READ=1420, READS=1421, REALM=1422, 
		REAL=1423, REBALANCE=1424, REBUILD=1425, RECORD=1426, RECORDS_PER_BLOCK=1427, 
		RECOVERABLE=1428, RECOVER=1429, RECOVERY=1430, RECYCLEBIN=1431, RECYCLE=1432, 
		REDACTION=1433, REDEFINE=1434, REDO=1435, REDUCED=1436, REDUNDANCY=1437, 
		REF_CASCADE_CURSOR=1438, REFERENCED=1439, REFERENCE=1440, REFERENCES=1441, 
		REFERENCING=1442, REF=1443, REFRESH=1444, REFTOHEX=1445, REGEXP_COUNT=1446, 
		REGEXP_INSTR=1447, REGEXP_LIKE=1448, REGEXP_REPLACE=1449, REGEXP_SUBSTR=1450, 
		REGISTER=1451, REGR_AVGX=1452, REGR_AVGY=1453, REGR_COUNT=1454, REGR_INTERCEPT=1455, 
		REGR_R2=1456, REGR_SLOPE=1457, REGR_SXX=1458, REGR_SXY=1459, REGR_SYY=1460, 
		REGULAR=1461, REJECT=1462, REKEY=1463, RELATIONAL=1464, RELIES_ON=1465, 
		RELOCATE=1466, RELY=1467, REMAINDER=1468, REMOTE=1469, REMOTE_MAPPED=1470, 
		REMOVE=1471, RENAME=1472, REPAIR=1473, REPEAT=1474, REPLACE=1475, REPLICATION=1476, 
		REQUIRED=1477, RESETLOGS=1478, RESET=1479, RESIZE=1480, RESOLVE=1481, 
		RESOLVER=1482, RESOURCE=1483, RESPECT=1484, RESTART=1485, RESTORE_AS_INTERVALS=1486, 
		RESTORE=1487, RESTRICT_ALL_REF_CONS=1488, RESTRICTED=1489, RESTRICT_REFERENCES=1490, 
		RESTRICT=1491, RESULT_CACHE=1492, RESULT=1493, RESUMABLE=1494, RESUME=1495, 
		RETENTION=1496, RETRY_ON_ROW_CHANGE=1497, RETURNING=1498, RETURN=1499, 
		REUSE=1500, REVERSE=1501, REVOKE=1502, REWRITE_OR_ERROR=1503, REWRITE=1504, 
		RIGHT=1505, ROLE=1506, ROLESET=1507, ROLES=1508, ROLLBACK=1509, ROLLING=1510, 
		ROLLUP=1511, ROWDEPENDENCIES=1512, ROWID_MAPPING_TABLE=1513, ROWID=1514, 
		ROWIDTOCHAR=1515, ROWIDTONCHAR=1516, ROW_LENGTH=1517, ROWNUM=1518, ROW=1519, 
		ROWS=1520, RPAD=1521, RTRIM=1522, RULE=1523, RULES=1524, RUNNING=1525, 
		SALT=1526, SAMPLE=1527, SAVE_AS_INTERVALS=1528, SAVEPOINT=1529, SAVE=1530, 
		SB4=1531, SCALE_ROWS=1532, SCALE=1533, SCAN_INSTANCES=1534, SCAN=1535, 
		SCHEDULER=1536, SCHEMACHECK=1537, SCHEMA=1538, SCN_ASCENDING=1539, SCN=1540, 
		SCOPE=1541, SCRUB=1542, SD_ALL=1543, SD_INHIBIT=1544, SDO_GEOM_MBR=1545, 
		SDO_GEOMETRY=1546, SD_SHOW=1547, SEARCH=1548, SECOND=1549, SECONDS=1550, 
		SECRET=1551, SECUREFILE_DBA=1552, SECUREFILE=1553, SECURITY=1554, SEED=1555, 
		SEG_BLOCK=1556, SEG_FILE=1557, SEGMENT=1558, SELECTIVITY=1559, SELECT=1560, 
		SELF=1561, SEMIJOIN_DRIVER=1562, SEMIJOIN=1563, SEMI_TO_INNER=1564, SEQUENCED=1565, 
		SEQUENCE=1566, SEQUENTIAL=1567, SEQ=1568, SERIALIZABLE=1569, SERIALLY_REUSABLE=1570, 
		SERIAL=1571, SERVERERROR=1572, SERVICE_NAME_CONVERT=1573, SERVICE=1574, 
		SERVICES=1575, SESSION_CACHED_CURSORS=1576, SESSION=1577, SESSIONS_PER_USER=1578, 
		SESSIONTIMEZONE=1579, SESSIONTZNAME=1580, SET=1581, SETS=1582, SETTINGS=1583, 
		SET_TO_JOIN=1584, SEVERE=1585, SHARDSPACE=1586, SHARED_POOL=1587, SHARED=1588, 
		SHARE=1589, SHARING=1590, SHELFLIFE=1591, SHOW=1592, SHRINK=1593, SHUTDOWN=1594, 
		SIBLINGS=1595, SID=1596, SITE=1597, SIGNAL_COMPONENT=1598, SIGNAL_FUNCTION=1599, 
		SIGN=1600, SIGNTYPE=1601, SIMPLE_INTEGER=1602, SIMPLE=1603, SINGLE=1604, 
		SINGLETASK=1605, SINH=1606, SIN=1607, SIZE=1608, SKIP_EXT_OPTIMIZER=1609, 
		SKIP_=1610, SKIP_UNQ_UNUSABLE_IDX=1611, SKIP_UNUSABLE_INDEXES=1612, SMALLFILE=1613, 
		SMALLINT=1614, SNAPSHOT=1615, SOME=1616, SORT=1617, SOUNDEX=1618, SOURCE_FILE_DIRECTORY=1619, 
		SOURCE_FILE_NAME_CONVERT=1620, SOURCE=1621, SPACE_KEYWORD=1622, SPECIFICATION=1623, 
		SPFILE=1624, SPLIT=1625, SPREADSHEET=1626, SQLDATA=1627, SQLERROR=1628, 
		SQLLDR=1629, SQL=1630, SQL_MACRO=1631, SQL_TRACE=1632, SQL_TRANSLATION_PROFILE=1633, 
		SQRT=1634, STALE=1635, STANDALONE=1636, STANDARD=1637, STANDARD_HASH=1638, 
		STANDBY_MAX_DATA_DELAY=1639, STANDBYS=1640, STANDBY=1641, STAR=1642, STAR_TRANSFORMATION=1643, 
		START=1644, STARTUP=1645, STATEMENT_ID=1646, STATEMENT_QUEUING=1647, STATEMENTS=1648, 
		STATEMENT=1649, STATE=1650, STATIC=1651, STATISTICS=1652, STATS_BINOMIAL_TEST=1653, 
		STATS_CROSSTAB=1654, STATS_F_TEST=1655, STATS_KS_TEST=1656, STATS_MODE=1657, 
		STATS_MW_TEST=1658, STATS_ONE_WAY_ANOVA=1659, STATS_T_TEST_INDEP=1660, 
		STATS_T_TEST_INDEPU=1661, STATS_T_TEST_ONE=1662, STATS_T_TEST_PAIRED=1663, 
		STATS_WSR_TEST=1664, STDDEV_POP=1665, STDDEV_SAMP=1666, STOP=1667, STORAGE=1668, 
		STORE=1669, STREAMS=1670, STREAM=1671, STRICT=1672, STRING=1673, STRIPE_COLUMNS=1674, 
		STRIPE_WIDTH=1675, STRIP=1676, STRUCTURE=1677, SUBMULTISET=1678, SUBPARTITION_REL=1679, 
		SUBPARTITIONS=1680, SUBPARTITION=1681, SUBQUERIES=1682, SUBQUERY_PRUNING=1683, 
		SUBSCRIBE=1684, SUBSET=1685, SUBSTITUTABLE=1686, SUBSTR2=1687, SUBSTR4=1688, 
		SUBSTRB=1689, SUBSTRC=1690, SUBTYPE=1691, SUCCESSFUL=1692, SUCCESS=1693, 
		SUMMARY=1694, SUPPLEMENTAL=1695, SUSPEND=1696, SWAP_JOIN_INPUTS=1697, 
		SWITCHOVER=1698, SWITCH=1699, SYNCHRONOUS=1700, SYNC=1701, SYNONYM=1702, 
		SYS=1703, SYSASM=1704, SYS_AUDIT=1705, SYSAUX=1706, SYSBACKUP=1707, SYS_CHECKACL=1708, 
		SYS_CHECK_PRIVILEGE=1709, SYS_CONNECT_BY_PATH=1710, SYS_CONTEXT=1711, 
		SYSDATE=1712, SYSDBA=1713, SYS_DBURIGEN=1714, SYSDG=1715, SYS_DL_CURSOR=1716, 
		SYS_DM_RXFORM_CHR=1717, SYS_DM_RXFORM_NUM=1718, SYS_DOM_COMPARE=1719, 
		SYS_DST_PRIM2SEC=1720, SYS_DST_SEC2PRIM=1721, SYS_ET_BFILE_TO_RAW=1722, 
		SYS_ET_BLOB_TO_IMAGE=1723, SYS_ET_IMAGE_TO_BLOB=1724, SYS_ET_RAW_TO_BFILE=1725, 
		SYS_EXTPDTXT=1726, SYS_EXTRACT_UTC=1727, SYS_FBT_INSDEL=1728, SYS_FILTER_ACLS=1729, 
		SYS_FNMATCHES=1730, SYS_FNREPLACE=1731, SYS_GET_ACLIDS=1732, SYS_GET_COL_ACLIDS=1733, 
		SYS_GET_PRIVILEGES=1734, SYS_GETTOKENID=1735, SYS_GETXTIVAL=1736, SYS_GUID=1737, 
		SYSGUID=1738, SYSKM=1739, SYS_MAKE_XMLNODEID=1740, SYS_MAKEXML=1741, SYS_MKXMLATTR=1742, 
		SYS_MKXTI=1743, SYSOBJ=1744, SYS_OP_ADT2BIN=1745, SYS_OP_ADTCONS=1746, 
		SYS_OP_ALSCRVAL=1747, SYS_OP_ATG=1748, SYS_OP_BIN2ADT=1749, SYS_OP_BITVEC=1750, 
		SYS_OP_BL2R=1751, SYS_OP_BLOOM_FILTER_LIST=1752, SYS_OP_BLOOM_FILTER=1753, 
		SYS_OP_C2C=1754, SYS_OP_CAST=1755, SYS_OP_CEG=1756, SYS_OP_CL2C=1757, 
		SYS_OP_COMBINED_HASH=1758, SYS_OP_COMP=1759, SYS_OP_CONVERT=1760, SYS_OP_COUNTCHG=1761, 
		SYS_OP_CSCONV=1762, SYS_OP_CSCONVTEST=1763, SYS_OP_CSR=1764, SYS_OP_CSX_PATCH=1765, 
		SYS_OP_CYCLED_SEQ=1766, SYS_OP_DECOMP=1767, SYS_OP_DESCEND=1768, SYS_OP_DISTINCT=1769, 
		SYS_OP_DRA=1770, SYS_OP_DUMP=1771, SYS_OP_DV_CHECK=1772, SYS_OP_ENFORCE_NOT_NULL=1773, 
		SYSOPER=1774, SYS_OP_EXTRACT=1775, SYS_OP_GROUPING=1776, SYS_OP_GUID=1777, 
		SYS_OP_HASH=1778, SYS_OP_IIX=1779, SYS_OP_ITR=1780, SYS_OP_KEY_VECTOR_CREATE=1781, 
		SYS_OP_KEY_VECTOR_FILTER_LIST=1782, SYS_OP_KEY_VECTOR_FILTER=1783, SYS_OP_KEY_VECTOR_SUCCEEDED=1784, 
		SYS_OP_KEY_VECTOR_USE=1785, SYS_OP_LBID=1786, SYS_OP_LOBLOC2BLOB=1787, 
		SYS_OP_LOBLOC2CLOB=1788, SYS_OP_LOBLOC2ID=1789, SYS_OP_LOBLOC2NCLOB=1790, 
		SYS_OP_LOBLOC2TYP=1791, SYS_OP_LSVI=1792, SYS_OP_LVL=1793, SYS_OP_MAKEOID=1794, 
		SYS_OP_MAP_NONNULL=1795, SYS_OP_MSR=1796, SYS_OP_NICOMBINE=1797, SYS_OP_NIEXTRACT=1798, 
		SYS_OP_NII=1799, SYS_OP_NIX=1800, SYS_OP_NOEXPAND=1801, SYS_OP_NTCIMG=1802, 
		SYS_OP_NUMTORAW=1803, SYS_OP_OIDVALUE=1804, SYS_OP_OPNSIZE=1805, SYS_OP_PAR_1=1806, 
		SYS_OP_PARGID_1=1807, SYS_OP_PARGID=1808, SYS_OP_PAR=1809, SYS_OP_PART_ID=1810, 
		SYS_OP_PIVOT=1811, SYS_OP_R2O=1812, SYS_OP_RAWTONUM=1813, SYS_OP_RDTM=1814, 
		SYS_OP_REF=1815, SYS_OP_RMTD=1816, SYS_OP_ROWIDTOOBJ=1817, SYS_OP_RPB=1818, 
		SYS_OPTLOBPRBSC=1819, SYS_OP_TOSETID=1820, SYS_OP_TPR=1821, SYS_OP_TRTB=1822, 
		SYS_OPTXICMP=1823, SYS_OPTXQCASTASNQ=1824, SYS_OP_UNDESCEND=1825, SYS_OP_VECAND=1826, 
		SYS_OP_VECBIT=1827, SYS_OP_VECOR=1828, SYS_OP_VECXOR=1829, SYS_OP_VERSION=1830, 
		SYS_OP_VREF=1831, SYS_OP_VVD=1832, SYS_OP_XMLCONS_FOR_CSX=1833, SYS_OP_XPTHATG=1834, 
		SYS_OP_XPTHIDX=1835, SYS_OP_XPTHOP=1836, SYS_OP_XTXT2SQLT=1837, SYS_OP_ZONE_ID=1838, 
		SYS_ORDERKEY_DEPTH=1839, SYS_ORDERKEY_MAXCHILD=1840, SYS_ORDERKEY_PARENT=1841, 
		SYS_PARALLEL_TXN=1842, SYS_PATHID_IS_ATTR=1843, SYS_PATHID_IS_NMSPC=1844, 
		SYS_PATHID_LASTNAME=1845, SYS_PATHID_LASTNMSPC=1846, SYS_PATH_REVERSE=1847, 
		SYS_PXQEXTRACT=1848, SYS_RAW_TO_XSID=1849, SYS_RID_ORDER=1850, SYS_ROW_DELTA=1851, 
		SYS_SC_2_XMLT=1852, SYS_SYNRCIREDO=1853, SYSTEM_DEFINED=1854, SYSTEM=1855, 
		SYSTIMESTAMP=1856, SYS_TYPEID=1857, SYS_UMAKEXML=1858, SYS_XMLANALYZE=1859, 
		SYS_XMLCONTAINS=1860, SYS_XMLCONV=1861, SYS_XMLEXNSURI=1862, SYS_XMLGEN=1863, 
		SYS_XMLI_LOC_ISNODE=1864, SYS_XMLI_LOC_ISTEXT=1865, SYS_XMLINSTR=1866, 
		SYS_XMLLOCATOR_GETSVAL=1867, SYS_XMLNODEID_GETCID=1868, SYS_XMLNODEID_GETLOCATOR=1869, 
		SYS_XMLNODEID_GETOKEY=1870, SYS_XMLNODEID_GETPATHID=1871, SYS_XMLNODEID_GETPTRID=1872, 
		SYS_XMLNODEID_GETRID=1873, SYS_XMLNODEID_GETSVAL=1874, SYS_XMLNODEID_GETTID=1875, 
		SYS_XMLNODEID=1876, SYS_XMLT_2_SC=1877, SYS_XMLTRANSLATE=1878, SYS_XMLTYPE2SQL=1879, 
		SYS_XQ_ASQLCNV=1880, SYS_XQ_ATOMCNVCHK=1881, SYS_XQBASEURI=1882, SYS_XQCASTABLEERRH=1883, 
		SYS_XQCODEP2STR=1884, SYS_XQCODEPEQ=1885, SYS_XQCON2SEQ=1886, SYS_XQCONCAT=1887, 
		SYS_XQDELETE=1888, SYS_XQDFLTCOLATION=1889, SYS_XQDOC=1890, SYS_XQDOCURI=1891, 
		SYS_XQDURDIV=1892, SYS_XQED4URI=1893, SYS_XQENDSWITH=1894, SYS_XQERRH=1895, 
		SYS_XQERR=1896, SYS_XQESHTMLURI=1897, SYS_XQEXLOBVAL=1898, SYS_XQEXSTWRP=1899, 
		SYS_XQEXTRACT=1900, SYS_XQEXTRREF=1901, SYS_XQEXVAL=1902, SYS_XQFB2STR=1903, 
		SYS_XQFNBOOL=1904, SYS_XQFNCMP=1905, SYS_XQFNDATIM=1906, SYS_XQFNLNAME=1907, 
		SYS_XQFNNM=1908, SYS_XQFNNSURI=1909, SYS_XQFNPREDTRUTH=1910, SYS_XQFNQNM=1911, 
		SYS_XQFNROOT=1912, SYS_XQFORMATNUM=1913, SYS_XQFTCONTAIN=1914, SYS_XQFUNCR=1915, 
		SYS_XQGETCONTENT=1916, SYS_XQINDXOF=1917, SYS_XQINSERT=1918, SYS_XQINSPFX=1919, 
		SYS_XQIRI2URI=1920, SYS_XQLANG=1921, SYS_XQLLNMFRMQNM=1922, SYS_XQMKNODEREF=1923, 
		SYS_XQNILLED=1924, SYS_XQNODENAME=1925, SYS_XQNORMSPACE=1926, SYS_XQNORMUCODE=1927, 
		SYS_XQ_NRNG=1928, SYS_XQNSP4PFX=1929, SYS_XQNSPFRMQNM=1930, SYS_XQPFXFRMQNM=1931, 
		SYS_XQ_PKSQL2XML=1932, SYS_XQPOLYABS=1933, SYS_XQPOLYADD=1934, SYS_XQPOLYCEL=1935, 
		SYS_XQPOLYCSTBL=1936, SYS_XQPOLYCST=1937, SYS_XQPOLYDIV=1938, SYS_XQPOLYFLR=1939, 
		SYS_XQPOLYMOD=1940, SYS_XQPOLYMUL=1941, SYS_XQPOLYRND=1942, SYS_XQPOLYSQRT=1943, 
		SYS_XQPOLYSUB=1944, SYS_XQPOLYUMUS=1945, SYS_XQPOLYUPLS=1946, SYS_XQPOLYVEQ=1947, 
		SYS_XQPOLYVGE=1948, SYS_XQPOLYVGT=1949, SYS_XQPOLYVLE=1950, SYS_XQPOLYVLT=1951, 
		SYS_XQPOLYVNE=1952, SYS_XQREF2VAL=1953, SYS_XQRENAME=1954, SYS_XQREPLACE=1955, 
		SYS_XQRESVURI=1956, SYS_XQRNDHALF2EVN=1957, SYS_XQRSLVQNM=1958, SYS_XQRYENVPGET=1959, 
		SYS_XQRYVARGET=1960, SYS_XQRYWRP=1961, SYS_XQSEQ2CON4XC=1962, SYS_XQSEQ2CON=1963, 
		SYS_XQSEQDEEPEQ=1964, SYS_XQSEQINSB=1965, SYS_XQSEQRM=1966, SYS_XQSEQRVS=1967, 
		SYS_XQSEQSUB=1968, SYS_XQSEQTYPMATCH=1969, SYS_XQSTARTSWITH=1970, SYS_XQSTATBURI=1971, 
		SYS_XQSTR2CODEP=1972, SYS_XQSTRJOIN=1973, SYS_XQSUBSTRAFT=1974, SYS_XQSUBSTRBEF=1975, 
		SYS_XQTOKENIZE=1976, SYS_XQTREATAS=1977, SYS_XQ_UPKXML2SQL=1978, SYS_XQXFORM=1979, 
		SYS_XSID_TO_RAW=1980, SYS_ZMAP_FILTER=1981, SYS_ZMAP_REFRESH=1982, T_LETTER=1983, 
		TABLE_LOOKUP_BY_NL=1984, TABLESPACE_NO=1985, TABLESPACE=1986, TABLES=1987, 
		TABLE_STATS=1988, TABLE=1989, TABNO=1990, TAG=1991, TANH=1992, TAN=1993, 
		TBLORIDXPARTNUM=1994, TEMPFILE=1995, TEMPLATE=1996, TEMPORARY=1997, TEMP_TABLE=1998, 
		TEST=1999, TEXT=2000, THAN=2001, THEN=2002, THE=2003, THREAD=2004, THROUGH=2005, 
		TIER=2006, TIES=2007, TIMEOUT=2008, TIMESTAMP_LTZ_UNCONSTRAINED=2009, 
		TIMESTAMP=2010, TIMESTAMP_TZ_UNCONSTRAINED=2011, TIMESTAMP_UNCONSTRAINED=2012, 
		TIMES=2013, TIME=2014, TIMEZONE=2015, TIMEZONE_ABBR=2016, TIMEZONE_HOUR=2017, 
		TIMEZONE_MINUTE=2018, TIMEZONE_OFFSET=2019, TIMEZONE_REGION=2020, TIME_ZONE=2021, 
		TIMING=2022, TIV_GB=2023, TIV_SSF=2024, TO_ACLID=2025, TO_BINARY_DOUBLE=2026, 
		TO_BINARY_FLOAT=2027, TO_BLOB=2028, TO_CLOB=2029, TO_DSINTERVAL=2030, 
		TO_LOB=2031, TO_MULTI_BYTE=2032, TO_NCHAR=2033, TO_NCLOB=2034, TO_NUMBER=2035, 
		TOPLEVEL=2036, TO_SINGLE_BYTE=2037, TO_TIMESTAMP=2038, TO_TIMESTAMP_TZ=2039, 
		TO_TIME=2040, TO_TIME_TZ=2041, TO=2042, TO_YMINTERVAL=2043, TRACE=2044, 
		TRACING=2045, TRACKING=2046, TRAILING=2047, TRANSACTION=2048, TRANSFORM=2049, 
		TRANSFORM_DISTINCT_AGG=2050, TRANSITIONAL=2051, TRANSITION=2052, TRANSLATE=2053, 
		TRANSLATION=2054, TREAT=2055, TRIGGERS=2056, TRIGGER=2057, TRUE=2058, 
		TRUNCATE=2059, TRUNC=2060, TRUSTED=2061, TRUST=2062, TUNING=2063, TX=2064, 
		TYPES=2065, TYPE=2066, TZ_OFFSET=2067, UB2=2068, UBA=2069, UCS2=2070, 
		UID=2071, UNARCHIVED=2072, UNBOUNDED=2073, UNBOUND=2074, UNCONDITIONAL=2075, 
		UNDER=2076, UNDO=2077, UNDROP=2078, UNIFORM=2079, UNION=2080, UNIQUE=2081, 
		UNISTR=2082, UNLIMITED=2083, UNLOAD=2084, UNLOCK=2085, UNMATCHED=2086, 
		UNNEST_INNERJ_DISTINCT_VIEW=2087, UNNEST_NOSEMIJ_NODISTINCTVIEW=2088, 
		UNNEST_SEMIJ_VIEW=2089, UNNEST=2090, UNPACKED=2091, UNPIVOT=2092, UNPLUG=2093, 
		UNPROTECTED=2094, UNQUIESCE=2095, UNRECOVERABLE=2096, UNRESTRICTED=2097, 
		UNSUBSCRIBE=2098, UNTIL=2099, UNUSABLE=2100, UNUSED=2101, UPDATABLE=2102, 
		UPDATED=2103, UPDATE=2104, UPDATEXML=2105, UPD_INDEXES=2106, UPD_JOININDEX=2107, 
		UPGRADE=2108, UPPER=2109, UPSERT=2110, UROWID=2111, USABLE=2112, USAGE=2113, 
		USE_ANTI=2114, USE_CONCAT=2115, USE_CUBE=2116, USE_HASH_AGGREGATION=2117, 
		USE_HASH_GBY_FOR_PUSHDOWN=2118, USE_HASH=2119, USE_HIDDEN_PARTITIONS=2120, 
		USE_INVISIBLE_INDEXES=2121, USE_MERGE_CARTESIAN=2122, USE_MERGE=2123, 
		USE_NL=2124, USE_NL_WITH_INDEX=2125, USE_PRIVATE_OUTLINES=2126, USER_DATA=2127, 
		USER_DEFINED=2128, USERENV=2129, USERGROUP=2130, USER_RECYCLEBIN=2131, 
		USERS=2132, USER_TABLESPACES=2133, USER=2134, USE_SEMI=2135, USE_STORED_OUTLINES=2136, 
		USE_TTT_FOR_GSETS=2137, USE=2138, USE_VECTOR_AGGREGATION=2139, USE_WEAK_NAME_RESL=2140, 
		USING_NO_EXPAND=2141, USING=2142, UTF16BE=2143, UTF16LE=2144, UTF32=2145, 
		UTF8=2146, V1=2147, V2=2148, VALIDATE=2149, VALIDATE_CONVERSION=2150, 
		VALIDATION=2151, VALID_TIME_END=2152, VALUES=2153, VALUE=2154, VARCHAR2=2155, 
		VARCHAR=2156, VARIABLE=2157, VAR_POP=2158, VARRAYS=2159, VARRAY=2160, 
		VAR_SAMP=2161, VARYING=2162, VECTOR_READ_TRACE=2163, VECTOR_READ=2164, 
		VECTOR_TRANSFORM_DIMS=2165, VECTOR_TRANSFORM_FACT=2166, VECTOR_TRANSFORM=2167, 
		VERIFIER=2168, VERIFY=2169, VERSIONING=2170, VERSIONS_ENDSCN=2171, VERSIONS_ENDTIME=2172, 
		VERSIONS_OPERATION=2173, VERSIONS_STARTSCN=2174, VERSIONS_STARTTIME=2175, 
		VERSIONS=2176, VERSIONS_XID=2177, VERSION=2178, VIEW=2179, VIOLATION=2180, 
		VIRTUAL=2181, VISIBILITY=2182, VISIBLE=2183, VOLUME=2184, VSIZE=2185, 
		WAIT=2186, WALLET=2187, WARNING=2188, WEEKS=2189, WEEK=2190, WELLFORMED=2191, 
		WHENEVER=2192, WHEN=2193, WHERE=2194, WHILE=2195, WHITESPACE=2196, WIDTH_BUCKET=2197, 
		WITHIN=2198, WITHOUT=2199, WITH_PLSQL=2200, WITH=2201, WORK=2202, WRAPPED=2203, 
		WRAPPER=2204, WRITE=2205, XDB_FASTPATH_INSERT=2206, XDB=2207, X_DYN_PRUNE=2208, 
		XID=2209, XML2OBJECT=2210, XMLAGG=2211, XMLATTRIBUTES=2212, XMLCAST=2213, 
		XMLCDATA=2214, XMLCOLATTVAL=2215, XMLCOMMENT=2216, XMLCONCAT=2217, XMLDIFF=2218, 
		XML_DML_RWT_STMT=2219, XMLELEMENT=2220, XMLEXISTS2=2221, XMLEXISTS=2222, 
		XMLFOREST=2223, XMLINDEX=2224, XMLINDEX_REWRITE_IN_SELECT=2225, XMLINDEX_REWRITE=2226, 
		XMLINDEX_SEL_IDX_TBL=2227, XMLISNODE=2228, XMLISVALID=2229, XMLNAMESPACES=2230, 
		XMLPARSE=2231, XMLPATCH=2232, XMLPI=2233, XMLQUERYVAL=2234, XMLQUERY=2235, 
		XMLROOT=2236, XMLSCHEMA=2237, XMLSERIALIZE=2238, XMLTABLE=2239, XMLTRANSFORMBLOB=2240, 
		XMLTRANSFORM=2241, XMLTYPE=2242, XML=2243, XPATHTABLE=2244, XS_SYS_CONTEXT=2245, 
		XS=2246, XTRANSPORT=2247, YEARS=2248, YEAR=2249, YEAROFWEEK=2250, YES=2251, 
		YMINTERVAL_UNCONSTRAINED=2252, ZONEMAP=2253, ZONE=2254, PREDICTION=2255, 
		PREDICTION_BOUNDS=2256, PREDICTION_COST=2257, PREDICTION_DETAILS=2258, 
		PREDICTION_PROBABILITY=2259, PREDICTION_SET=2260, BLOCKCHAIN=2261, COLLATE=2262, 
		COLLATION=2263, DEFINITION=2264, DUPLICATED=2265, EXTENDED=2266, HASHING=2267, 
		IDLE=2268, IMMUTABLE=2269, ORACLE_DATAPUMP=2270, ORACLE_HDFS=2271, ORACLE_HIVE=2272, 
		ORACLE_LOADER=2273, SHA2_512_Q=2274, SHARDED=2275, V1_Q=2276, ISOLATE=2277, 
		ROOT=2278, UNITE=2279, ALGORITHM=2280, CUME_DIST=2281, DENSE_RANK=2282, 
		LISTAGG=2283, PERCENT_RANK=2284, PERCENTILE_CONT=2285, PERCENTILE_DISC=2286, 
		RANK=2287, AVG=2288, CORR=2289, COVAR_=2290, DECODE=2291, LAG=2292, LAG_DIFF=2293, 
		LAG_DIFF_PERCENT=2294, LEAD=2295, MAX=2296, MEDIAN=2297, MEMOPTIMIZE=2298, 
		MIN=2299, NTILE=2300, NVL=2301, RATIO_TO_REPORT=2302, REGR_=2303, ROUND=2304, 
		ROW_NUMBER=2305, SUBSTR=2306, TO_CHAR=2307, TRIM=2308, SUM=2309, STDDEV=2310, 
		VAR_=2311, VARIANCE=2312, LEAST=2313, GREATEST=2314, TO_DATE=2315, JAR=2316, 
		NATIONAL_CHAR_STRING_LIT=2317, BIT_STRING_LIT=2318, HEX_STRING_LIT=2319, 
		DOUBLE_PERIOD=2320, PERIOD=2321, UNSIGNED_INTEGER=2322, APPROXIMATE_NUM_LIT=2323, 
		CHAR_STRING=2324, DELIMITED_ID=2325, PERCENT=2326, AMPERSAND=2327, LEFT_PAREN=2328, 
		RIGHT_PAREN=2329, DOUBLE_ASTERISK=2330, ASTERISK=2331, PLUS_SIGN=2332, 
		MINUS_SIGN=2333, COMMA=2334, SOLIDUS=2335, AT_SIGN=2336, ASSIGN_OP=2337, 
		HASH_OP=2338, SQ=2339, BINDVAR=2340, NOT_EQUAL_OP=2341, CARRET_OPERATOR_PART=2342, 
		TILDE_OPERATOR_PART=2343, EXCLAMATION_OPERATOR_PART=2344, GREATER_THAN_OP=2345, 
		LESS_THAN_OP=2346, COLON=2347, SEMICOLON=2348, BAR=2349, EQUALS_OP=2350, 
		LEFT_BRACKET=2351, RIGHT_BRACKET=2352, INTRODUCER=2353, SINGLE_LINE_COMMENT=2354, 
		MULTI_LINE_COMMENT=2355, REMARK_COMMENT=2356, PROMPT_MESSAGE=2357, START_CMD=2358, 
		REGULAR_ID=2359, SPACES=2360;
	public static final int
		RULE_sql_script = 0, RULE_unit_statement = 1, RULE_function_body = 2, 
		RULE_create_procedure_body = 3, RULE_create_function_body = 4, RULE_anonymous_body = 5, 
		RULE_create_table_as = 6, RULE_create_table_as2 = 7, RULE_create_table = 8, 
		RULE_create_with = 9, RULE_create_options = 10, RULE_option_ = 11, RULE_table_name = 12, 
		RULE_relational_table = 13, RULE_relational_property = 14, RULE_column_definition = 15, 
		RULE_column_collation_name = 16, RULE_identity_clause = 17, RULE_identity_options_parentheses = 18, 
		RULE_identity_options = 19, RULE_encryption_spec = 20, RULE_truncate_table = 21, 
		RULE_rule_on_column = 22, RULE_parameter = 23, RULE_default_value_part = 24, 
		RULE_seq_of_declare_specs = 25, RULE_declare_spec = 26, RULE_variable_declaration = 27, 
		RULE_seq_of_statements = 28, RULE_statement = 29, RULE_assignment_statement = 30, 
		RULE_continue_statement = 31, RULE_exit_statement = 32, RULE_if_statement = 33, 
		RULE_elsif_part = 34, RULE_else_part = 35, RULE_loop_statement = 36, RULE_cursor_loop_param = 37, 
		RULE_select_only_statement = 38, RULE_lower_bound = 39, RULE_upper_bound = 40, 
		RULE_raise_statement = 41, RULE_return_statement = 42, RULE_call_statement = 43, 
		RULE_body = 44, RULE_exception_handler = 45, RULE_block = 46, RULE_sql_statement = 47, 
		RULE_data_manipulation_language_statements = 48, RULE_select_statement = 49, 
		RULE_subquery = 50, RULE_subquery_basic_elements = 51, RULE_subquery_operation_part = 52, 
		RULE_select_block = 53, RULE_query_block = 54, RULE_rollup_cube_clause = 55, 
		RULE_grouping_sets_elements = 56, RULE_update_block = 57, RULE_update_statement = 58, 
		RULE_delete_block = 59, RULE_delete_statement = 60, RULE_insert_block = 61, 
		RULE_insert_statement = 62, RULE_set_bleck = 63, RULE_truncate_table_block = 64, 
		RULE_truncate_table_block2 = 65, RULE_merge_block = 66, RULE_merge_statement = 67, 
		RULE_condition = 68, RULE_expressions = 69, RULE_expression = 70, RULE_logical_expression = 71, 
		RULE_unary_logical_expression = 72, RULE_logical_operation = 73, RULE_multiset_expression = 74, 
		RULE_relational_expression = 75, RULE_compound_expression = 76, RULE_relational_operator = 77, 
		RULE_in_elements = 78, RULE_between_elements = 79, RULE_concatenation = 80, 
		RULE_interval_expression = 81, RULE_model_expression = 82, RULE_unary_expression = 83, 
		RULE_other_function = 84, RULE_case_statement = 85, RULE_simple_case_statement = 86, 
		RULE_simple_case_when_part = 87, RULE_searched_case_statement = 88, RULE_searched_case_when_part = 89, 
		RULE_case_else_part = 90, RULE_atom = 91, RULE_quantified_expression = 92, 
		RULE_routine_name = 93, RULE_parameter_name = 94, RULE_label_name = 95, 
		RULE_type_name = 96, RULE_exception_name = 97, RULE_procedure_name = 98, 
		RULE_variable_name = 99, RULE_index_name = 100, RULE_cursor_name = 101, 
		RULE_record_name = 102, RULE_link_name = 103, RULE_column_name = 104, 
		RULE_tableview_name = 105, RULE_char_set_name = 106, RULE_function_argument = 107, 
		RULE_argument = 108, RULE_type_spec = 109, RULE_datatype = 110, RULE_precision_part = 111, 
		RULE_native_datatype_element = 112, RULE_bind_variable = 113, RULE_general_element = 114, 
		RULE_general_element_part = 115, RULE_table_element = 116, RULE_constant = 117, 
		RULE_numeric = 118, RULE_numeric_negative = 119, RULE_quoted_string = 120, 
		RULE_identifier = 121, RULE_id_expression = 122, RULE_outer_join_sign = 123, 
		RULE_regular_id = 124, RULE_non_reserved_keywords_in_12c = 125, RULE_non_reserved_keywords_pre12c = 126;
	private static String[] makeRuleNames() {
		return new String[] {
			"sql_script", "unit_statement", "function_body", "create_procedure_body", 
			"create_function_body", "anonymous_body", "create_table_as", "create_table_as2", 
			"create_table", "create_with", "create_options", "option_", "table_name", 
			"relational_table", "relational_property", "column_definition", "column_collation_name", 
			"identity_clause", "identity_options_parentheses", "identity_options", 
			"encryption_spec", "truncate_table", "rule_on_column", "parameter", "default_value_part", 
			"seq_of_declare_specs", "declare_spec", "variable_declaration", "seq_of_statements", 
			"statement", "assignment_statement", "continue_statement", "exit_statement", 
			"if_statement", "elsif_part", "else_part", "loop_statement", "cursor_loop_param", 
			"select_only_statement", "lower_bound", "upper_bound", "raise_statement", 
			"return_statement", "call_statement", "body", "exception_handler", "block", 
			"sql_statement", "data_manipulation_language_statements", "select_statement", 
			"subquery", "subquery_basic_elements", "subquery_operation_part", "select_block", 
			"query_block", "rollup_cube_clause", "grouping_sets_elements", "update_block", 
			"update_statement", "delete_block", "delete_statement", "insert_block", 
			"insert_statement", "set_bleck", "truncate_table_block", "truncate_table_block2", 
			"merge_block", "merge_statement", "condition", "expressions", "expression", 
			"logical_expression", "unary_logical_expression", "logical_operation", 
			"multiset_expression", "relational_expression", "compound_expression", 
			"relational_operator", "in_elements", "between_elements", "concatenation", 
			"interval_expression", "model_expression", "unary_expression", "other_function", 
			"case_statement", "simple_case_statement", "simple_case_when_part", "searched_case_statement", 
			"searched_case_when_part", "case_else_part", "atom", "quantified_expression", 
			"routine_name", "parameter_name", "label_name", "type_name", "exception_name", 
			"procedure_name", "variable_name", "index_name", "cursor_name", "record_name", 
			"link_name", "column_name", "tableview_name", "char_set_name", "function_argument", 
			"argument", "type_spec", "datatype", "precision_part", "native_datatype_element", 
			"bind_variable", "general_element", "general_element_part", "table_element", 
			"constant", "numeric", "numeric_negative", "quoted_string", "identifier", 
			"id_expression", "outer_join_sign", "regular_id", "non_reserved_keywords_in_12c", 
			"non_reserved_keywords_pre12c"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'ABORT'", "'ABS'", "'ABSENT'", "'ACCESS'", "'ACCESSED'", "'ACCOUNT'", 
			"'ACL'", "'ACOS'", "'ACROSS'", "'ACTION'", "'ACTIONS'", "'ACTIVATE'", 
			"'ACTIVE'", "'ACTIVE_COMPONENT'", "'ACTIVE_DATA'", "'ACTIVE_FUNCTION'", 
			"'ACTIVE_TAG'", "'ACTIVITY'", "'ADAPTIVE_PLAN'", "'ADD'", "'ADD_COLUMN'", 
			"'ADD_GROUP'", "'ADD_MONTHS'", "'ADJ_DATE'", "'ADMIN'", "'ADMINISTER'", 
			"'ADMINISTRATOR'", "'ADVANCED'", "'ADVISE'", "'ADVISOR'", "'AFD_DISKSTRING'", 
			"'AFTER'", "'AGENT'", "'AGGREGATE'", "'A'", "'ALIAS'", "'ALL'", "'ALLOCATE'", 
			"'ALLOW'", "'ALL_ROWS'", "'ALTER'", "'ALTERNATE'", "'ALWAYS'", "'ANALYTIC'", 
			"'ANALYZE'", "'ANCESTOR'", "'ANCILLARY'", "'AND'", "'AND_EQUAL'", "'ANOMALY'", 
			"'ANSI_REARCH'", "'ANTIJOIN'", "'ANY'", "'ANYSCHEMA'", "'APPEND'", "'APPENDCHILDXML'", 
			"'APPEND_VALUES'", "'APPLICATION'", "'APPLY'", "'APPROX_COUNT_DISTINCT'", 
			"'ARCHIVAL'", "'ARCHIVE'", "'ARCHIVED'", "'ARCHIVELOG'", "'ARRAY'", "'AS'", 
			"'ASC'", "'ASCII'", "'ASCIISTR'", "'ASIN'", "'ASIS'", "'ASSEMBLY'", "'ASSIGN'", 
			"'ASSOCIATE'", "'ASYNC'", "'ASYNCHRONOUS'", "'ATAN2'", "'ATAN'", "'AT'", 
			"'ATTRIBUTE'", "'ATTRIBUTES'", "'AUDIT'", "'AUTHENTICATED'", "'AUTHENTICATION'", 
			"'AUTHID'", "'AUTHORIZATION'", "'AUTOALLOCATE'", "'AUTO'", "'AUTOBACKUP'", 
			"'AUTOEXTEND'", "'AUTO_LOGIN'", "'AUTOMATIC'", "'AUTONOMOUS_TRANSACTION'", 
			"'AUTO_REOPTIMIZE'", "'AVAILABILITY'", "'AVRO'", "'BACKGROUND'", "'BACKINGFILE'", 
			"'BACKUP'", "'BACKUPS'", "'BACKUPSET'", "'BASIC'", "'BASICFILE'", "'BATCH'", 
			"'BATCHSIZE'", "'BATCH_TABLE_ACCESS_BY_ROWID'", "'BECOME'", "'BEFORE'", 
			"'BEGIN'", "'BEGINNING'", "'BEGIN_OUTLINE_DATA'", "'BEHALF'", "'BEQUEATH'", 
			"'BETWEEN'", "'BFILE'", "'BFILENAME'", "'BIGFILE'", "'BINARY'", "'BINARY_DOUBLE'", 
			"'BINARY_DOUBLE_INFINITY'", "'BINARY_DOUBLE_NAN'", "'BINARY_FLOAT'", 
			"'BINARY_FLOAT_INFINITY'", "'BINARY_FLOAT_NAN'", "'BINARY_INTEGER'", 
			"'BIND_AWARE'", "'BINDING'", "'BIN_TO_NUM'", "'BITAND'", "'BITMAP_AND'", 
			"'BITMAP'", "'BITMAPS'", "'BITMAP_TREE'", "'BITS'", "'BLOB'", "'BLOCK'", 
			"'BLOCK_RANGE'", "'BLOCKS'", "'BLOCKSIZE'", "'BODY'", "'BOOLEAN'", "'BOTH'", 
			"'BOUND'", "'BRANCH'", "'BREADTH'", "'BROADCAST'", "'BSON'", "'BUFFER'", 
			"'BUFFER_CACHE'", "'BUFFER_POOL'", "'BUILD'", "'BULK'", "'BY'", "'BYPASS_RECURSIVE_CHECK'", 
			"'BYPASS_UJVC'", "'BYTE'", "'CACHE'", "'CACHE_CB'", "'CACHE_INSTANCES'", 
			"'CACHE_TEMP_TABLE'", "'CACHING'", "'CALCULATED'", "'CALLBACK'", "'CALL'", 
			"'CANCEL'", "'CANONICAL'", "'CAPACITY'", "'CAPTION'", "'CARDINALITY'", 
			"'CASCADE'", "'CASE'", "'CAST'", "'CASE-SENSITIVE'", "'CATEGORY'", "'CDB$DEFAULT'", 
			"'CEIL'", "'CELL_FLASH_CACHE'", "'CERTIFICATE'", "'CFILE'", "'CHAINED'", 
			"'CHANGE'", "'CHANGETRACKING'", "'CHANGE_DUPKEY_ERROR_INDEX'", "'CHARACTER'", 
			"'CHAR'", "'CHAR_CS'", "'CHARTOROWID'", "'CHECK_ACL_REWRITE'", "'CHECK'", 
			"'CHECKPOINT'", "'CHILD'", "'CHOOSE'", "'CHR'", "'CHUNK'", "'CLASS'", 
			"'CLASSIFICATION'", "'CLASSIFIER'", "'CLAUSE'", "'CLEAN'", "'CLEANUP'", 
			"'CLEAR'", "'C'", "'CLIENT'", "'CLOB'", "'CLONE'", "'CLOSE_CACHED_OPEN_CURSORS'", 
			"'CLOSE'", "'CLUSTER_BY_ROWID'", "'CLUSTER'", "'CLUSTER_DETAILS'", "'CLUSTER_DISTANCE'", 
			"'CLUSTER_ID'", "'CLUSTERING'", "'CLUSTERING_FACTOR'", "'CLUSTER_PROBABILITY'", 
			"'CLUSTER_SET'", "'COALESCE'", "'COALESCE_SQ'", "'COARSE'", "'CO_AUTH_IND'", 
			"'COLD'", "'COLLECT'", "'COLUMNAR'", "'COLUMN_AUTH_INDICATOR'", "'COLUMN'", 
			"'COLUMNS'", "'COLUMN_STATS'", "'COLUMN_VALUE'", "'COMMENT'", "'COMMIT'", 
			"'COMMITTED'", "'COMMON'", "'COMMON_DATA'", "'COMPACT'", "'COMPATIBILITY'", 
			"'COMPILE'", "'COMPLETE'", "'COMPLIANCE'", "'COMPONENT'", "'COMPONENTS'", 
			"'COMPOSE'", "'COMPOSITE'", "'COMPOSITE_LIMIT'", "'COMPOUND'", "'COMPRESS'", 
			"'COMPUTE'", "'CONCAT'", "'CON_DBID_TO_ID'", "'CONDITIONAL'", "'CONDITION'", 
			"'CONFIRM'", "'CONFORMING'", "'CON_GUID_TO_ID'", "'CON_ID'", "'CON_NAME_TO_ID'", 
			"'CONNECT_BY_CB_WHR_ONLY'", "'CONNECT_BY_COMBINE_SW'", "'CONNECT_BY_COST_BASED'", 
			"'CONNECT_BY_ELIM_DUPS'", "'CONNECT_BY_FILTERING'", "'CONNECT_BY_ISCYCLE'", 
			"'CONNECT_BY_ISLEAF'", "'CONNECT_BY_ROOT'", "'CONNECT'", "'CONNECT_TIME'", 
			"'CONSIDER'", "'CONSISTENT'", "'CONSTANT'", "'CONST'", "'CONSTRAINT'", 
			"'CONSTRAINTS'", "'CONSTRUCTOR'", "'CONTAINER'", "'CONTAINERS'", "'CONTAINERS_DEFAULT'", 
			"'CONTAINER_DATA'", "'CONTAINER_MAP'", "'CONTENT'", "'CONTENTS'", "'CONTEXT'", 
			"'CONTINUE'", "'CONTROLFILE'", "'CON_UID_TO_ID'", "'CONVERT'", "'CONVERSION'", 
			"'COOKIE'", "'COPY'", "'CORR_K'", "'CORR_S'", "'CORRUPTION'", "'CORRUPT_XID_ALL'", 
			"'CORRUPT_XID'", "'COS'", "'COSH'", "'COST'", "'COST_XML_QUERY_REWRITE'", 
			"'COUNT'", "'COVAR_POP'", "'COVAR_SAMP'", "'CPU_COSTING'", "'CPU_PER_CALL'", 
			"'CPU_PER_SESSION'", "'CRASH'", "'CREATE'", "'CREATE_FILE_DEST'", "'CREATE_STORED_OUTLINES'", 
			"'CREATION'", "'CREDENTIAL'", "'CRITICAL'", "'CROSS'", "'CROSSEDITION'", 
			"'CSCONVERT'", "'CUBE_AJ'", "'CUBE'", "'CUBE_GB'", "'CUBE_SJ'", "'CUME_DISTM'", 
			"'CURRENT'", "'CURRENT_DATE'", "'CURRENT_SCHEMA'", "'CURRENT_TIME'", 
			"'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'CURRENTV'", "'CURSOR'", "'CURSOR_SHARING_EXACT'", 
			"'CURSOR_SPECIFIC_SEGMENT'", "'CUSTOMDATUM'", "'CV'", "'CYCLE'", "'DANGLING'", 
			"'DATABASE'", "'DATA'", "'DATAFILE'", "'DATAFILES'", "'DATAGUARDCONFIG'", 
			"'DATAMOVEMENT'", "'DATAOBJNO'", "'DATAOBJ_TO_MAT_PARTITION'", "'DATAOBJ_TO_PARTITION'", 
			"'DATAPUMP'", "'DATA_SECURITY_REWRITE_LIMIT'", "'DATE'", "'DATE_MODE'", 
			"'DAY'", "'DAYOFWEEK'", "'DAYS'", "'DBA'", "'DBA_RECYCLEBIN'", "'DBMS_STATS'", 
			"'DB_ROLE_CHANGE'", "'DBTIMEZONE'", "'DB_UNIQUE_NAME'", "'DB_VERSION'", 
			"'DDL'", "'DEALLOCATE'", "'DEBUG'", "'DEBUGGER'", "'DEC'", "'DECIMAL'", 
			"'DECLARE'", "'DECOMPOSE'", "'DECORRELATE'", "'DECR'", "'DECREMENT'", 
			"'DECRYPT'", "'DEDUPLICATE'", "'DEFAULT'", "'DEFAULTS'", "'DEFAULT_COLLATION'", 
			"'DEFAULT_CREDENTIAL'", "'DEFERRABLE'", "'DEFERRED'", "'DEFINED'", "'DEFINE'", 
			"'DEFINER'", "'DEGREE'", "'DELAY'", "'DELEGATE'", "'DELETE_ALL'", "'DELETE'", 
			"'DELETEXML'", "'DEMAND'", "'DENSE_RANKM'", "'DEPENDENT'", "'DEPTH'", 
			"'DEQUEUE'", "'DEREF'", "'DEREF_NO_REWRITE'", "'DESC'", "'DESCRIPTION'", 
			"'DESTROY'", "'DETACHED'", "'DETERMINES'", "'DETERMINISTIC'", "'DICTIONARY'", 
			"'DIMENSION'", "'DIMENSIONS'", "'DIRECT_LOAD'", "'DIRECTORY'", "'DIRECT_PATH'", 
			"'DISABLE_ALL'", "'DISABLE'", "'DISABLE_PARALLEL_DML'", "'DISABLE_PRESET'", 
			"'DISABLE_RPKE'", "'DISALLOW'", "'DISASSOCIATE'", "'DISCARD'", "'DISCONNECT'", 
			"'DISK'", "'DISKGROUP'", "''+ DISKGROUP'", "'DISKS'", "'DISMOUNT'", "'DISTINCT'", 
			"'DISTINGUISHED'", "'DISTRIBUTED'", "'DISTRIBUTE'", "'DML'", "'DML_UPDATE'", 
			"'DOCFIDELITY'", "'DOCUMENT'", "'DOMAIN_INDEX_FILTER'", "'DOMAIN_INDEX_NO_SORT'", 
			"'DOMAIN_INDEX_SORT'", "'DOY'", "'DOUBLE'", "'DOWNGRADE'", "'DRIVING_SITE'", 
			"'DROP_COLUMN'", "'DROP'", "'DROP_GROUP'", "'DSINTERVAL_UNCONSTRAINED'", 
			"'DST_UPGRADE_INSERT_CONV'", "'DUMP'", "'DUMPSET'", "'DUPLICATE'", "'DV'", 
			"'DYNAMIC'", "'DYNAMIC_SAMPLING'", "'DYNAMIC_SAMPLING_EST_CDN'", "'E'", 
			"'EACH'", "'EDITIONABLE'", "'EDITION'", "'EDITIONING'", "'EDITIONS'", 
			"'ELEMENT'", "'ELIM_GROUPBY'", "'ELIMINATE_JOIN'", "'ELIMINATE_OBY'", 
			"'ELIMINATE_OUTER_JOIN'", "'ELSE'", "'ELSIF'", "'EM'", "'EMPTY_BLOB'", 
			"'EMPTY_CLOB'", "'EMPTY'", "'ENABLE_ALL'", "'ENABLE'", "'ENABLE_PARALLEL_DML'", 
			"'ENABLE_PRESET'", "'ENCODING'", "'ENCRYPT'", "'ENCRYPTION'", "'END'", 
			"'END_OUTLINE_DATA'", "'ENFORCED'", "'ENFORCE'", "'ENQUEUE'", "'ENTERPRISE'", 
			"'ENTITYESCAPING'", "'ENTRY'", "'EQUIPART'", "'ERR'", "'ERROR_ARGUMENT'", 
			"'ERROR'", "'ERROR_ON_OVERLAP_TIME'", "'ERRORS'", "'ESCAPE'", "'ESTIMATE'", 
			"'EVAL'", "'EVALNAME'", "'EVALUATE'", "'EVALUATION'", "'EVENTS'", "'EVERY'", 
			"'EXCEPT'", "'EXCEPTION'", "'EXCEPTION_INIT'", "'EXCEPTIONS'", "'EXCHANGE'", 
			"'EXCLUDE'", "'EXCLUDING'", "'EXCLUSIVE'", "'EXECUTE'", "'EXEMPT'", "'EXISTING'", 
			"'EXISTS'", "'EXISTSNODE'", "'EXIT'", "'EXPAND_GSET_TO_UNION'", "'EXPAND_TABLE'", 
			"'EXP'", "'EXPIRE'", "'EXPLAIN'", "'EXPLOSION'", "'EXPORT'", "'EXPR_CORR_CHECK'", 
			"'EXPRESS'", "'EXTENDS'", "'EXTENT'", "'EXTENTS'", "'EXTERNAL'", "'EXTERNALLY'", 
			"'EXTRACTCLOBXML'", "'EXTRACT'", "'EXTRACTVALUE'", "'EXTRA'", "'FACILITY'", 
			"'FACT'", "'FACTOR'", "'FACTORIZE_JOIN'", "'FAILED'", "'FAILED_LOGIN_ATTEMPTS'", 
			"'FAILGROUP'", "'FAILOVER'", "'FAILURE'", "'FALSE'", "'FAMILY'", "'FAR'", 
			"'FAST'", "'FASTSTART'", "'FBTSCAN'", "'FEATURE'", "'FEATURE_DETAILS'", 
			"'FEATURE_ID'", "'FEATURE_SET'", "'FEATURE_VALUE'", "'FETCH'", "'FILE'", 
			"'FILE_NAME_CONVERT'", "'FILEGROUP'", "'FILESTORE'", "'FILESYSTEM_LIKE_LOGGING'", 
			"'FILTER'", "'FINAL'", "'FINE'", "'FINISH'", "'FIRST'", "'FIRSTM'", "'FIRST_ROWS'", 
			"'FIRST_VALUE'", "'FIXED_VIEW_DATA'", "'FLAGGER'", "'FLASHBACK'", "'FLASH_CACHE'", 
			"'FLOAT'", "'FLOB'", "'FLEX'", "'FLOOR'", "'FLUSH'", "'FOLDER'", "'FOLLOWING'", 
			"'FOLLOWS'", "'FORALL'", "'FORCE'", "'FORCE_XML_QUERY_REWRITE'", "'FOREIGN'", 
			"'FOREVER'", "'FOR'", "'FORMAT'", "'FORWARD'", "'FRAGMENT_NUMBER'", "'FREELIST'", 
			"'FREELISTS'", "'FREEPOOLS'", "'FRESH'", "'FROM'", "'FROM_TZ'", "'FULL'", 
			"'FULL_OUTER_JOIN_TO_OUTER'", "'FUNCTION'", "'FUNCTIONS'", "'FTP'", "'G'", 
			"'GATHER_OPTIMIZER_STATISTICS'", "'GATHER_PLAN_STATISTICS'", "'GBY_CONC_ROLLUP'", 
			"'GBY_PUSHDOWN'", "'GENERATED'", "'GET'", "'GLOBAL'", "'GLOBALLY'", "'GLOBAL_NAME'", 
			"'GLOBAL_TOPIC_ENABLED'", "'GOTO'", "'GRANT'", "'GROUP_BY'", "'GROUP'", 
			"'GROUP_ID'", "'GROUPING'", "'GROUPING_ID'", "'GROUPS'", "'GUARANTEED'", 
			"'GUARANTEE'", "'GUARD'", "'HALF_YEARS'", "'HASH_AJ'", "'HASH'", "'HASHKEYS'", 
			"'HASH_SJ'", "'HAVING'", "'HEADER'", "'HEAP'", "'HELP'", "'HEXTORAW'", 
			"'HEXTOREF'", "'HIDDEN'", "'HIDE'", "'HIER_ORDER'", "'HIERARCHICAL'", 
			"'HIERARCHIES'", "'HIERARCHY'", "'HIGH'", "'HINTSET_BEGIN'", "'HINTSET_END'", 
			"'HOT'", "'HOUR'", "'HOURS'", "'HTTP'", "'HWM_BROKERED'", "'HYBRID'", 
			"'H'", "'IDENTIFIED'", "'IDENTIFIER'", "'IDENTITY'", "'IDGENERATORS'", 
			"'ID'", "'IDLE_TIME'", "'IF'", "'IGNORE'", "'IGNORE_OPTIM_EMBEDDED_HINTS'", 
			"'IGNORE_ROW_ON_DUPKEY_INDEX'", "'IGNORE_WHERE_CLAUSE'", "'ILM'", "'IMMEDIATE'", 
			"'IMPACT'", "'IMPORT'", "'INACTIVE'", "'INACTIVE_ACCOUNT_TIME'", "'INCLUDE'", 
			"'INCLUDE_VERSION'", "'INCLUDING'", "'INCREMENTAL'", "'INCREMENT'", "'INCR'", 
			"'INDENT'", "'INDEX_ASC'", "'INDEX_COMBINE'", "'INDEX_DESC'", "'INDEXED'", 
			"'INDEXES'", "'INDEX_FFS'", "'INDEX_FILTER'", "'INDEX'", "'INDEXING'", 
			"'INDEX_JOIN'", "'INDEX_ROWS'", "'INDEX_RRS'", "'INDEX_RS_ASC'", "'INDEX_RS_DESC'", 
			"'INDEX_RS'", "'INDEX_SCAN'", "'INDEX_SKIP_SCAN'", "'INDEX_SS_ASC'", 
			"'INDEX_SS_DESC'", "'INDEX_SS'", "'INDEX_STATS'", "'INDEXTYPE'", "'INDEXTYPES'", 
			"'INDICATOR'", "'INDICES'", "'INFINITE'", "'INFORMATIONAL'", "'INHERIT'", 
			"'IN'", "'INITCAP'", "'INITIAL'", "'INITIALIZED'", "'INITIALLY'", "'INITRANS'", 
			"'INLINE'", "'INLINE_XMLTYPE_NT'", "'INMEMORY'", "'IN_MEMORY_METADATA'", 
			"'INMEMORY_PRUNING'", "'INNER'", "'INOUT'", "'INPLACE'", "'INSERTCHILDXMLAFTER'", 
			"'INSERTCHILDXMLBEFORE'", "'INSERTCHILDXML'", "'INSERT'", "'INSERTXMLAFTER'", 
			"'INSERTXMLBEFORE'", "'INSTANCE'", "'INSTANCES'", "'INSTANTIABLE'", "'INSTANTLY'", 
			"'INSTEAD'", "'INSTR2'", "'INSTR4'", "'INSTRB'", "'INSTRC'", "'INSTR'", 
			"'INTEGER'", "'INTERLEAVED'", "'INTERMEDIATE'", "'INTERNAL_CONVERT'", 
			"'INTERNAL_USE'", "'INTERPRETED'", "'INTERSECT'", "'INTERVAL'", "'INT'", 
			"'BIGINT'", "'INTO'", "'INVALIDATE'", "'INVISIBLE'", "'IN_XQUERY'", "'IS'", 
			"'IS_LEAF'", "'ISOLATION'", "'ISOLATION_LEVEL'", "'ITERATE'", "'ITERATION_NUMBER'", 
			"'JAVA'", "'JOB'", "'JOIN'", "'JSON_ARRAYAGG'", "'JSON_ARRAY'", "'JSON_EQUAL'", 
			"'JSON_EXISTS2'", "'JSON_EXISTS'", "'JSONGET'", "'JSON'", "'JSON_OBJECTAGG'", 
			"'JSON_OBJECT'", "'JSONPARSE'", "'JSON_QUERY'", "'JSON_SERIALIZE'", "'JSON_TABLE'", 
			"'JSON_TEXTCONTAINS2'", "'JSON_TEXTCONTAINS'", "'JSON_TRANSFORM'", "'JSON_VALUE'", 
			"'K'", "'KEEP_DUPLICATES'", "'KEEP'", "'KERBEROS'", "'KEY'", "'KEY_LENGTH'", 
			"'KEYSIZE'", "'KEYS'", "'KEYSTORE'", "'KILL'", "'LABEL'", "'LANGUAGE'", 
			"'LAST_DAY'", "'LAST'", "'LAST_VALUE'", "'LATERAL'", "'LAX'", "'LAYER'", 
			"'LDAP_REGISTRATION_ENABLED'", "'LDAP_REGISTRATION'", "'LDAP_REG_SYNC_INTERVAL'", 
			"'LEAF'", "'LEAD_CDB'", "'LEAD_CDB_URI'", "'LEADING'", "'LEFT'", "'LENGTH2'", 
			"'LENGTH4'", "'LENGTHB'", "'LENGTHC'", "'LENGTH'", "'LESS'", "'LEVEL'", 
			"'LEVEL_NAME'", "'LEVELS'", "'LIBRARY'", "'LIFECYCLE'", "'LIFE'", "'LIFETIME'", 
			"'LIKE2'", "'LIKE4'", "'LIKEC'", "'LIKE_EXPAND'", "'LIKE'", "'LIMIT'", 
			"'LINEAR'", "'LINK'", "'LIST'", "'LN'", "'LNNVL'", "'LOAD'", "'LOB'", 
			"'LOBNVL'", "'LOBS'", "'LOCAL_INDEXES'", "'LOCAL'", "'LOCALTIME'", "'LOCALTIMESTAMP'", 
			"'LOCATION'", "'LOCATOR'", "'LOCKDOWN'", "'LOCKED'", "'LOCKING'", "'LOCK'", 
			"'LOGFILE'", "'LOGFILES'", "'LOGGING'", "'LOGICAL'", "'LOGICAL_READS_PER_CALL'", 
			"'LOGICAL_READS_PER_SESSION'", "'LOG'", "'LOGMINING'", "'LOGOFF'", "'LOGON'", 
			"'LOG_READ_ONLY_VIOLATIONS'", "'LONG'", "'LOOP'", "'LOST'", "'LOWER'", 
			"'LOW'", "'LPAD'", "'LTRIM'", "'M'", "'MAIN'", "'MAKE_REF'", "'MANAGED'", 
			"'MANAGE'", "'MANAGEMENT'", "'MANAGER'", "'MANDATORY'", "'MANUAL'", "'MAP'", 
			"'MAPPING'", "'MASTER'", "'MATCHED'", "'MATCHES'", "'MATCH'", "'MATCH_NUMBER'", 
			"'MATCH_RECOGNIZE'", "'MATERIALIZED'", "'MATERIALIZE'", "'MAXARCHLOGS'", 
			"'MAXDATAFILES'", "'MAXEXTENTS'", "'MAXIMIZE'", "'MAXINSTANCES'", "'MAXLOGFILES'", 
			"'MAXLOGHISTORY'", "'MAXLOGMEMBERS'", "'MAX_SHARED_TEMP_SIZE'", "'MAXSIZE'", 
			"'MAXTRANS'", "'MAXVALUE'", "'MEASURE'", "'MEASURES'", "'MEDIUM'", "'MEMBER'", 
			"'MEMBER_CAPTION'", "'MEMBER_DESCRIPTION'", "'MEMBER_NAME'", "'MEMBER_UNIQUE_NAME'", 
			"'MEMCOMPRESS'", "'MEMORY'", "'MERGE$ACTIONS'", "'MERGE_AJ'", "'MERGE_CONST_ON'", 
			"'MERGE'", "'MERGE_SJ'", "'METADATA'", "'METHOD'", "'MIGRATE'", "'MIGRATION'", 
			"'MINEXTENTS'", "'MINIMIZE'", "'MINIMUM'", "'MINING'", "'MINUS'", "'MINUS_NULL'", 
			"'MINUTE'", "'MINUTES'", "'MINVALUE'", "'MIRRORCOLD'", "'MIRRORHOT'", 
			"'MIRROR'", "'MISSING'", "'MISMATCH'", "'MLSLABEL'", "'MODEL_COMPILE_SUBQUERY'", 
			"'MODEL_DONTVERIFY_UNIQUENESS'", "'MODEL_DYNAMIC_SUBQUERY'", "'MODEL_MIN_ANALYSIS'", 
			"'MODEL'", "'MODEL_NB'", "'MODEL_NO_ANALYSIS'", "'MODEL_PBY'", "'MODEL_PUSH_REF'", 
			"'MODEL_SV'", "'MODE'", "'MODIFICATION'", "'MODIFY_COLUMN_TYPE'", "'MODIFY'", 
			"'MOD'", "'MODULE'", "'MONITORING'", "'MONITOR'", "'MONTH'", "'MONTHS_BETWEEN'", 
			"'MONTHS'", "'MOUNT'", "'MOUNTPATH'", "'MOUNTPOINT'", "'MOVEMENT'", "'MOVE'", 
			"'MULTIDIMENSIONAL'", "'MULTISET'", "'MV_MERGE'", "'NAMED'", "'NAME'", 
			"'NAMESPACE'", "'NAN'", "'NANVL'", "'NATIONAL'", "'NATIVE_FULL_OUTER_JOIN'", 
			"'NATIVE'", "'NATURAL'", "'NATURALN'", "'NAV'", "'NCHAR_CS'", "'NCHAR'", 
			"'NCHR'", "'NCLOB'", "'NEEDED'", "'NEG'", "'NESTED'", "'NESTED_TABLE_FAST_INSERT'", 
			"'NESTED_TABLE_GET_REFS'", "'NESTED_TABLE_ID'", "'NESTED_TABLE_SET_REFS'", 
			"'NESTED_TABLE_SET_SETID'", "'NETWORK'", "'NEVER'", "'NEW'", "'NEW_TIME'", 
			"'NEXT_DAY'", "'NEXT'", "'NL_AJ'", "'NLJ_BATCHING'", "'NLJ_INDEX_FILTER'", 
			"'NLJ_INDEX_SCAN'", "'NLJ_PREFETCH'", "'NLS_CALENDAR'", "'NLS_CHARACTERSET'", 
			"'NLS_CHARSET_DECL_LEN'", "'NLS_CHARSET_ID'", "'NLS_CHARSET_NAME'", "'NLS_COMP'", 
			"'NLS_CURRENCY'", "'NLS_DATE_FORMAT'", "'NLS_DATE_LANGUAGE'", "'NLS_INITCAP'", 
			"'NLS_ISO_CURRENCY'", "'NL_SJ'", "'NLS_LANG'", "'NLS_LANGUAGE'", "'NLS_LENGTH_SEMANTICS'", 
			"'NLS_LOWER'", "'NLS_NCHAR_CONV_EXCP'", "'NLS_NUMERIC_CHARACTERS'", "'NLS_SORT'", 
			"'NLSSORT'", "'NLS_SPECIAL_CHARS'", "'NLS_TERRITORY'", "'NLS_UPPER'", 
			"'NO_ACCESS'", "'NO_ADAPTIVE_PLAN'", "'NO_ANSI_REARCH'", "'NOAPPEND'", 
			"'NOARCHIVELOG'", "'NOAUDIT'", "'NO_AUTO_REOPTIMIZE'", "'NO_BASETABLE_MULTIMV_REWRITE'", 
			"'NO_BATCH_TABLE_ACCESS_BY_ROWID'", "'NO_BIND_AWARE'", "'NO_BUFFER'", 
			"'NOCACHE'", "'NO_CARTESIAN'", "'NO_CHECK_ACL_REWRITE'", "'NO_CLUSTER_BY_ROWID'", 
			"'NO_CLUSTERING'", "'NO_COALESCE_SQ'", "'NO_COMMON_DATA'", "'NOCOMPRESS'", 
			"'NO_CONNECT_BY_CB_WHR_ONLY'", "'NO_CONNECT_BY_COMBINE_SW'", "'NO_CONNECT_BY_COST_BASED'", 
			"'NO_CONNECT_BY_ELIM_DUPS'", "'NO_CONNECT_BY_FILTERING'", "'NOCOPY'", 
			"'NO_COST_XML_QUERY_REWRITE'", "'NO_CPU_COSTING'", "'NOCPU_COSTING'", 
			"'NOCYCLE'", "'NO_DATA_SECURITY_REWRITE'", "'NO_DECORRELATE'", "'NODELAY'", 
			"'NO_DOMAIN_INDEX_FILTER'", "'NO_DST_UPGRADE_INSERT_CONV'", "'NO_ELIM_GROUPBY'", 
			"'NO_ELIMINATE_JOIN'", "'NO_ELIMINATE_OBY'", "'NO_ELIMINATE_OUTER_JOIN'", 
			"'NOENTITYESCAPING'", "'NO_EXPAND_GSET_TO_UNION'", "'NO_EXPAND'", "'NO_EXPAND_TABLE'", 
			"'NO_FACT'", "'NO_FACTORIZE_JOIN'", "'NO_FILTERING'", "'NOFORCE'", "'NO_FULL_OUTER_JOIN_TO_OUTER'", 
			"'NO_GATHER_OPTIMIZER_STATISTICS'", "'NO_GBY_PUSHDOWN'", "'NOGUARANTEE'", 
			"'NO_INDEX_FFS'", "'NO_INDEX'", "'NO_INDEX_SS'", "'NO_INMEMORY'", "'NO_INMEMORY_PRUNING'", 
			"'NOKEEP'", "'NO_LOAD'", "'NOLOCAL'", "'NOLOGGING'", "'NOMAPPING'", "'NOMAXVALUE'", 
			"'NO_MERGE'", "'NOMINIMIZE'", "'NOMINVALUE'", "'NO_MODEL_PUSH_REF'", 
			"'NO_MONITORING'", "'NOMONITORING'", "'NO_MONITOR'", "'NO_MULTIMV_REWRITE'", 
			"'NO_NATIVE_FULL_OUTER_JOIN'", "'NONBLOCKING'", "'NONEDITIONABLE'", "'NONE'", 
			"'NO_NLJ_BATCHING'", "'NO_NLJ_PREFETCH'", "'NO'", "'NONSCHEMA'", "'NO_OBJECT_LINK'", 
			"'NOORDER'", "'NO_ORDER_ROLLUPS'", "'NO_OUTER_JOIN_TO_ANTI'", "'NO_OUTER_JOIN_TO_INNER'", 
			"'NOOVERRIDE'", "'NO_PARALLEL_INDEX'", "'NOPARALLEL_INDEX'", "'NO_PARALLEL'", 
			"'NOPARALLEL'", "'NO_PARTIAL_COMMIT'", "'NO_PARTIAL_JOIN'", "'NO_PARTIAL_ROLLUP_PUSHDOWN'", 
			"'NOPARTITION'", "'NO_PLACE_DISTINCT'", "'NO_PLACE_GROUP_BY'", "'NO_PQ_CONCURRENT_UNION'", 
			"'NO_PQ_MAP'", "'NOPROMPT'", "'NO_PQ_REPLICATE'", "'NO_PQ_SKEW'", "'NO_PRUNE_GSETS'", 
			"'NO_PULL_PRED'", "'NO_PUSH_PRED'", "'NO_PUSH_SUBQ'", "'NO_PX_FAULT_TOLERANCE'", 
			"'NO_PX_JOIN_FILTER'", "'NO_QKN_BUFF'", "'NO_QUERY_TRANSFORMATION'", 
			"'NO_REF_CASCADE'", "'NORELOCATE'", "'NORELY'", "'NOREPAIR'", "'NOREPLAY'", 
			"'NORESETLOGS'", "'NO_RESULT_CACHE'", "'NOREVERSE'", "'NO_REWRITE'", 
			"'NOREWRITE'", "'NORMAL'", "'NO_ROOT_SW_FOR_LOCAL'", "'NOROWDEPENDENCIES'", 
			"'NOSCHEMACHECK'", "'NOSEGMENT'", "'NO_SEMIJOIN'", "'NO_SEMI_TO_INNER'", 
			"'NO_SET_TO_JOIN'", "'NOSORT'", "'NO_SQL_TRANSLATION'", "'NO_SQL_TUNE'", 
			"'NO_STAR_TRANSFORMATION'", "'NO_STATEMENT_QUEUING'", "'NO_STATS_GSETS'", 
			"'NOSTRICT'", "'NO_SUBQUERY_PRUNING'", "'NO_SUBSTRB_PAD'", "'NO_SWAP_JOIN_INPUTS'", 
			"'NOSWITCH'", "'NO_TABLE_LOOKUP_BY_NL'", "'NO_TEMP_TABLE'", "'NOTHING'", 
			"'NOTIFICATION'", "'NOT'", "'NO_TRANSFORM_DISTINCT_AGG'", "'NO_UNNEST'", 
			"'NO_USE_CUBE'", "'NO_USE_HASH_AGGREGATION'", "'NO_USE_HASH_GBY_FOR_PUSHDOWN'", 
			"'NO_USE_HASH'", "'NO_USE_INVISIBLE_INDEXES'", "'NO_USE_MERGE'", "'NO_USE_NL'", 
			"'NO_USE_VECTOR_AGGREGATION'", "'NOVALIDATE'", "'NO_VECTOR_TRANSFORM_DIMS'", 
			"'NO_VECTOR_TRANSFORM_FACT'", "'NO_VECTOR_TRANSFORM'", "'NOWAIT'", "'NO_XDB_FASTPATH_INSERT'", 
			"'NO_XML_DML_REWRITE'", "'NO_XMLINDEX_REWRITE_IN_SELECT'", "'NO_XMLINDEX_REWRITE'", 
			"'NO_XML_QUERY_REWRITE'", "'NO_ZONEMAP'", "'NTH_VALUE'", "'NULLIF'", 
			"'NULL'", "'NULLS'", "'NUMBER'", "'NUMERIC'", "'NUM_INDEX_KEYS'", "'NUMTODSINTERVAL'", 
			"'NUMTOYMINTERVAL'", "'NVARCHAR2'", "'NVL2'", "'OBJECT2XML'", "'OBJECT'", 
			"'OBJ_ID'", "'OBJNO'", "'OBJNO_REUSE'", "'OCCURENCES'", "'OFFLINE'", 
			"'OFF'", "'OFFSET'", "'OF'", "'OIDINDEX'", "'OID'", "'OLAP'", "'OLD'", 
			"'OLD_PUSH_PRED'", "'OLS'", "'OLTP'", "'OMIT'", "'ONE'", "'ONLINE'", 
			"'ONLINELOG'", "'ONLY'", "'ON'", "'OPAQUE'", "'OPAQUE_TRANSFORM'", "'OPAQUE_XCANONICAL'", 
			"'OPCODE'", "'OPEN'", "'OPERATIONS'", "'OPERATOR'", "'OPT_ESTIMATE'", 
			"'OPTIMAL'", "'OPTIMIZE'", "'OPTIMIZER_FEATURES_ENABLE'", "'OPTIMIZER_GOAL'", 
			"'OPTION'", "'OPT_PARAM'", "'ORA_BRANCH'", "'ORA_CHECK_ACL'", "'ORA_CHECK_PRIVILEGE'", 
			"'ORA_CLUSTERING'", "'ORADATA'", "'ORADEBUG'", "'ORA_DST_AFFECTED'", 
			"'ORA_DST_CONVERT'", "'ORA_DST_ERROR'", "'ORA_GET_ACLIDS'", "'ORA_GET_PRIVILEGES'", 
			"'ORA_HASH'", "'ORA_INVOKING_USERID'", "'ORA_INVOKING_USER'", "'ORA_INVOKING_XS_USER_GUID'", 
			"'ORA_INVOKING_XS_USER'", "'ORA_RAWCOMPARE'", "'ORA_RAWCONCAT'", "'ORA_ROWSCN'", 
			"'ORA_ROWSCN_RAW'", "'ORA_ROWVERSION'", "'ORA_TABVERSION'", "'ORA_WRITE_TIME'", 
			"'ORDERED'", "'ORDERED_PREDICATES'", "'ORDER'", "'ORDINALITY'", "'OR_EXPAND'", 
			"'ORGANIZATION'", "'OR'", "'OR_PREDICATES'", "'OSERROR'", "'OTHER'", 
			"'OUTER_JOIN_TO_ANTI'", "'OUTER_JOIN_TO_INNER'", "'OUTER'", "'OUTLINE_LEAF'", 
			"'OUTLINE'", "'OUT_OF_LINE'", "'OUT'", "'OVERFLOW_NOMOVE'", "'OVERFLOW'", 
			"'OVERLAPS'", "'OVER'", "'OVERRIDING'", "'OWNER'", "'OWNERSHIP'", "'OWN'", 
			"'P'", "'PACKAGE'", "'PACKAGES'", "'PARALLEL_ENABLE'", "'PARALLEL_INDEX'", 
			"'PARALLEL'", "'PARAMETERFILE'", "'PARAMETERS'", "'PARAM'", "'PARENT'", 
			"'PARENT_LEVEL_NAME'", "'PARENT_UNIQUE_NAME'", "'PARITY'", "'PARTIAL_JOIN'", 
			"'PARTIALLY'", "'PARTIAL'", "'PARTIAL_ROLLUP_PUSHDOWN'", "'PARTITION_HASH'", 
			"'PARTITION_LIST'", "'PARTITION'", "'PARTITION_RANGE'", "'PARTITIONS'", 
			"'PART$NUM$INST'", "'PASSING'", "'PASSWORD_GRACE_TIME'", "'PASSWORD_LIFE_TIME'", 
			"'PASSWORD_LOCK_TIME'", "'PASSWORD'", "'PASSWORD_REUSE_MAX'", "'PASSWORD_REUSE_TIME'", 
			"'PASSWORD_ROLLOVER_TIME'", "'PASSWORD_VERIFY_FUNCTION'", "'PAST'", "'PATCH'", 
			"'PATH'", "'PATH_PREFIX'", "'PATHS'", "'PATTERN'", "'PBL_HS_BEGIN'", 
			"'PBL_HS_END'", "'PCTFREE'", "'PCTINCREASE'", "'PCTTHRESHOLD'", "'PCTUSED'", 
			"'PCTVERSION'", "'PENDING'", null, null, null, "'PERCENT'", "'PERCENT_RANKM'", 
			null, null, null, "'PERFORMANCE'", "'PERIOD'", "'PERMANENT'", "'PERMISSION'", 
			"'PERMUTE'", "'PER'", "'PFILE'", "'PHYSICAL'", "'PIKEY'", "'PIPELINED'", 
			"'PIPE'", "'PIV_GB'", "'PIVOT'", "'PIV_SSF'", "'PLACE_DISTINCT'", "'PLACE_GROUP_BY'", 
			"'PLAN'", "'PLSCOPE_SETTINGS'", "'PLS_INTEGER'", "'PLSQL_CCFLAGS'", "'PLSQL_CODE_TYPE'", 
			"'PLSQL_DEBUG'", "'PLSQL_OPTIMIZE_LEVEL'", "'PLSQL_WARNINGS'", "'PLUGGABLE'", 
			"'PMEM'", "'POINT'", "'POLICY'", "'POOL_16K'", "'POOL_2K'", "'POOL_32K'", 
			"'POOL_4K'", "'POOL_8K'", "'POSITIVEN'", "'POSITIVE'", "'POST_TRANSACTION'", 
			"'POWERMULTISET_BY_CARDINALITY'", "'POWERMULTISET'", "'POWER'", "'PQ_CONCURRENT_UNION'", 
			"'PQ_DISTRIBUTE'", "'PQ_DISTRIBUTE_WINDOW'", "'PQ_FILTER'", "'PQ_MAP'", 
			"'PQ_NOMAP'", "'PQ_REPLICATE'", "'PQ_SKEW'", "'PRAGMA'", "'PREBUILT'", 
			"'PRECEDES'", "'PRECEDING'", "'PRECISION'", "'PRECOMPUTE_SUBQUERY'", 
			"'PREDICATE_REORDERS'", "'PRELOAD'", "'PREPARE'", "'PRESENTNNV'", "'PRESENT'", 
			"'PRESENTV'", "'PRESERVE_OID'", "'PRESERVE'", "'PRETTY'", "'PREVIOUS'", 
			"'PREV'", "'PRIMARY'", "'PRINTBLOBTOCLOB'", "'PRIORITY'", "'PRIOR'", 
			"'PRIVATE'", "'PRIVATE_SGA'", "'PRIVILEGED'", "'PRIVILEGE'", "'PRIVILEGES'", 
			"'PROCEDURAL'", "'PROCEDURE'", "'PROCESS'", "'PROFILE'", "'PROGRAM'", 
			"'PROJECT'", "'PROPAGATE'", "'PROPERTY'", "'PROTECTED'", "'PROTECTION'", 
			"'PROTOCOL'", "'PROXY'", "'PRUNING'", "'PUBLIC'", "'PULL_PRED'", "'PURGE'", 
			"'PUSH_PRED'", "'PUSH_SUBQ'", "'PX_FAULT_TOLERANCE'", "'PX_GRANULE'", 
			"'PX_JOIN_FILTER'", "'QB_NAME'", "'QUARTER'", "'QUARTERS'", "'QUERY_BLOCK'", 
			"'QUERY'", "'QUEUE_CURR'", "'QUEUE'", "'QUEUE_ROWP'", "'QUIESCE'", "'QUORUM'", 
			"'QUOTA'", "'QUOTAGROUP'", "'RAISE'", "'RANDOM_LOCAL'", "'RANDOM'", "'RANGE'", 
			"'RANKM'", "'RAPIDLY'", "'RAW'", "'RAWTOHEX'", "'RAWTONHEX'", "'RBA'", 
			"'RBO_OUTLINE'", "'RDBA'", "'READ'", "'READS'", "'REALM'", "'REAL'", 
			"'REBALANCE'", "'REBUILD'", "'RECORD'", "'RECORDS_PER_BLOCK'", "'RECOVERABLE'", 
			"'RECOVER'", "'RECOVERY'", "'RECYCLEBIN'", "'RECYCLE'", "'REDACTION'", 
			"'REDEFINE'", "'REDO'", "'REDUCED'", "'REDUNDANCY'", "'REF_CASCADE_CURSOR'", 
			"'REFERENCED'", "'REFERENCE'", "'REFERENCES'", "'REFERENCING'", "'REF'", 
			"'REFRESH'", "'REFTOHEX'", "'REGEXP_COUNT'", "'REGEXP_INSTR'", "'REGEXP_LIKE'", 
			"'REGEXP_REPLACE'", "'REGEXP_SUBSTR'", "'REGISTER'", "'REGR_AVGX'", "'REGR_AVGY'", 
			"'REGR_COUNT'", "'REGR_INTERCEPT'", "'REGR_R2'", "'REGR_SLOPE'", "'REGR_SXX'", 
			"'REGR_SXY'", "'REGR_SYY'", "'REGULAR'", "'REJECT'", "'REKEY'", "'RELATIONAL'", 
			"'RELIES_ON'", "'RELOCATE'", "'RELY'", "'REMAINDER'", "'REMOTE'", "'REMOTE_MAPPED'", 
			"'REMOVE'", "'RENAME'", "'REPAIR'", "'REPEAT'", "'REPLACE'", "'REPLICATION'", 
			"'REQUIRED'", "'RESETLOGS'", "'RESET'", "'RESIZE'", "'RESOLVE'", "'RESOLVER'", 
			"'RESOURCE'", "'RESPECT'", "'RESTART'", "'RESTORE_AS_INTERVALS'", "'RESTORE'", 
			"'RESTRICT_ALL_REF_CONS'", "'RESTRICTED'", "'RESTRICT_REFERENCES'", "'RESTRICT'", 
			"'RESULT_CACHE'", "'RESULT'", "'RESUMABLE'", "'RESUME'", "'RETENTION'", 
			"'RETRY_ON_ROW_CHANGE'", "'RETURNING'", "'RETURN'", "'REUSE'", "'REVERSE'", 
			"'REVOKE'", "'REWRITE_OR_ERROR'", "'REWRITE'", "'RIGHT'", "'ROLE'", "'ROLESET'", 
			"'ROLES'", "'ROLLBACK'", "'ROLLING'", "'ROLLUP'", "'ROWDEPENDENCIES'", 
			"'ROWID_MAPPING_TABLE'", "'ROWID'", "'ROWIDTOCHAR'", "'ROWIDTONCHAR'", 
			"'ROW_LENGTH'", "'ROWNUM'", "'ROW'", "'ROWS'", "'RPAD'", "'RTRIM'", "'RULE'", 
			"'RULES'", "'RUNNING'", "'SALT'", "'SAMPLE'", "'SAVE_AS_INTERVALS'", 
			"'SAVEPOINT'", "'SAVE'", "'SB4'", "'SCALE_ROWS'", "'SCALE'", "'SCAN_INSTANCES'", 
			"'SCAN'", "'SCHEDULER'", "'SCHEMACHECK'", "'SCHEMA'", "'SCN_ASCENDING'", 
			"'SCN'", "'SCOPE'", "'SCRUB'", "'SD_ALL'", "'SD_INHIBIT'", "'SDO_GEOM_MBR'", 
			"'SDO_GEOMETRY'", "'SD_SHOW'", "'SEARCH'", "'SECOND'", "'SECONDS'", "'SECRET'", 
			"'SECUREFILE_DBA'", "'SECUREFILE'", "'SECURITY'", "'SEED'", "'SEG_BLOCK'", 
			"'SEG_FILE'", "'SEGMENT'", "'SELECTIVITY'", "'SELECT'", "'SELF'", "'SEMIJOIN_DRIVER'", 
			"'SEMIJOIN'", "'SEMI_TO_INNER'", "'SEQUENCED'", "'SEQUENCE'", "'SEQUENTIAL'", 
			"'SEQ'", "'SERIALIZABLE'", "'SERIALLY_REUSABLE'", "'SERIAL'", "'SERVERERROR'", 
			"'SERVICE_NAME_CONVERT'", "'SERVICE'", "'SERVICES'", "'SESSION_CACHED_CURSORS'", 
			"'SESSION'", "'SESSIONS_PER_USER'", "'SESSIONTIMEZONE'", "'SESSIONTZNAME'", 
			"'SET'", "'SETS'", "'SETTINGS'", "'SET_TO_JOIN'", "'SEVERE'", "'SHARDSPACE'", 
			"'SHARED_POOL'", "'SHARED'", "'SHARE'", "'SHARING'", "'SHELFLIFE'", "'SHOW'", 
			"'SHRINK'", "'SHUTDOWN'", "'SIBLINGS'", "'SID'", "'SITE'", "'SIGNAL_COMPONENT'", 
			"'SIGNAL_FUNCTION'", "'SIGN'", "'SIGNTYPE'", "'SIMPLE_INTEGER'", "'SIMPLE'", 
			"'SINGLE'", "'SINGLETASK'", "'SINH'", "'SIN'", "'SIZE'", "'SKIP_EXT_OPTIMIZER'", 
			"'SKIP'", "'SKIP_UNQ_UNUSABLE_IDX'", "'SKIP_UNUSABLE_INDEXES'", "'SMALLFILE'", 
			"'SMALLINT'", "'SNAPSHOT'", "'SOME'", "'SORT'", "'SOUNDEX'", "'SOURCE_FILE_DIRECTORY'", 
			"'SOURCE_FILE_NAME_CONVERT'", "'SOURCE'", "'SPACE'", "'SPECIFICATION'", 
			"'SPFILE'", "'SPLIT'", "'SPREADSHEET'", "'SQLDATA'", "'SQLERROR'", "'SQLLDR'", 
			"'SQL'", "'SQL_MACRO'", "'SQL_TRACE'", "'SQL_TRANSLATION_PROFILE'", "'SQRT'", 
			"'STALE'", "'STANDALONE'", "'STANDARD'", "'STANDARD_HASH'", "'STANDBY_MAX_DATA_DELAY'", 
			"'STANDBYS'", "'STANDBY'", "'STAR'", "'STAR_TRANSFORMATION'", "'START'", 
			"'STARTUP'", "'STATEMENT_ID'", "'STATEMENT_QUEUING'", "'STATEMENTS'", 
			"'STATEMENT'", "'STATE'", "'STATIC'", "'STATISTICS'", "'STATS_BINOMIAL_TEST'", 
			"'STATS_CROSSTAB'", "'STATS_F_TEST'", "'STATS_KS_TEST'", "'STATS_MODE'", 
			"'STATS_MW_TEST'", "'STATS_ONE_WAY_ANOVA'", "'STATS_T_TEST_INDEP'", "'STATS_T_TEST_INDEPU'", 
			"'STATS_T_TEST_ONE'", "'STATS_T_TEST_PAIRED'", "'STATS_WSR_TEST'", "'STDDEV_POP'", 
			"'STDDEV_SAMP'", "'STOP'", "'STORAGE'", "'STORE'", "'STREAMS'", "'STREAM'", 
			"'STRICT'", "'STRING'", "'STRIPE_COLUMNS'", "'STRIPE_WIDTH'", "'STRIP'", 
			"'STRUCTURE'", "'SUBMULTISET'", "'SUBPARTITION_REL'", "'SUBPARTITIONS'", 
			"'SUBPARTITION'", "'SUBQUERIES'", "'SUBQUERY_PRUNING'", "'SUBSCRIBE'", 
			"'SUBSET'", "'SUBSTITUTABLE'", "'SUBSTR2'", "'SUBSTR4'", "'SUBSTRB'", 
			"'SUBSTRC'", "'SUBTYPE'", "'SUCCESSFUL'", "'SUCCESS'", "'SUMMARY'", "'SUPPLEMENTAL'", 
			"'SUSPEND'", "'SWAP_JOIN_INPUTS'", "'SWITCHOVER'", "'SWITCH'", "'SYNCHRONOUS'", 
			"'SYNC'", "'SYNONYM'", "'SYS'", "'SYSASM'", "'SYS_AUDIT'", "'SYSAUX'", 
			"'SYSBACKUP'", "'SYS_CHECKACL'", "'SYS_CHECK_PRIVILEGE'", "'SYS_CONNECT_BY_PATH'", 
			"'SYS_CONTEXT'", "'SYSDATE'", "'SYSDBA'", "'SYS_DBURIGEN'", "'SYSDG'", 
			"'SYS_DL_CURSOR'", "'SYS_DM_RXFORM_CHR'", "'SYS_DM_RXFORM_NUM'", "'SYS_DOM_COMPARE'", 
			"'SYS_DST_PRIM2SEC'", "'SYS_DST_SEC2PRIM'", "'SYS_ET_BFILE_TO_RAW'", 
			"'SYS_ET_BLOB_TO_IMAGE'", "'SYS_ET_IMAGE_TO_BLOB'", "'SYS_ET_RAW_TO_BFILE'", 
			"'SYS_EXTPDTXT'", "'SYS_EXTRACT_UTC'", "'SYS_FBT_INSDEL'", "'SYS_FILTER_ACLS'", 
			"'SYS_FNMATCHES'", "'SYS_FNREPLACE'", "'SYS_GET_ACLIDS'", "'SYS_GET_COL_ACLIDS'", 
			"'SYS_GET_PRIVILEGES'", "'SYS_GETTOKENID'", "'SYS_GETXTIVAL'", "'SYS_GUID'", 
			"'SYSGUID'", "'SYSKM'", "'SYS_MAKE_XMLNODEID'", "'SYS_MAKEXML'", "'SYS_MKXMLATTR'", 
			"'SYS_MKXTI'", "'SYSOBJ'", "'SYS_OP_ADT2BIN'", "'SYS_OP_ADTCONS'", "'SYS_OP_ALSCRVAL'", 
			"'SYS_OP_ATG'", "'SYS_OP_BIN2ADT'", "'SYS_OP_BITVEC'", "'SYS_OP_BL2R'", 
			"'SYS_OP_BLOOM_FILTER_LIST'", "'SYS_OP_BLOOM_FILTER'", "'SYS_OP_C2C'", 
			"'SYS_OP_CAST'", "'SYS_OP_CEG'", "'SYS_OP_CL2C'", "'SYS_OP_COMBINED_HASH'", 
			"'SYS_OP_COMP'", "'SYS_OP_CONVERT'", "'SYS_OP_COUNTCHG'", "'SYS_OP_CSCONV'", 
			"'SYS_OP_CSCONVTEST'", "'SYS_OP_CSR'", "'SYS_OP_CSX_PATCH'", "'SYS_OP_CYCLED_SEQ'", 
			"'SYS_OP_DECOMP'", "'SYS_OP_DESCEND'", "'SYS_OP_DISTINCT'", "'SYS_OP_DRA'", 
			"'SYS_OP_DUMP'", "'SYS_OP_DV_CHECK'", "'SYS_OP_ENFORCE_NOT_NULL$'", "'SYSOPER'", 
			"'SYS_OP_EXTRACT'", "'SYS_OP_GROUPING'", "'SYS_OP_GUID'", "'SYS_OP_HASH'", 
			"'SYS_OP_IIX'", "'SYS_OP_ITR'", "'SYS_OP_KEY_VECTOR_CREATE'", "'SYS_OP_KEY_VECTOR_FILTER_LIST'", 
			"'SYS_OP_KEY_VECTOR_FILTER'", "'SYS_OP_KEY_VECTOR_SUCCEEDED'", "'SYS_OP_KEY_VECTOR_USE'", 
			"'SYS_OP_LBID'", "'SYS_OP_LOBLOC2BLOB'", "'SYS_OP_LOBLOC2CLOB'", "'SYS_OP_LOBLOC2ID'", 
			"'SYS_OP_LOBLOC2NCLOB'", "'SYS_OP_LOBLOC2TYP'", "'SYS_OP_LSVI'", "'SYS_OP_LVL'", 
			"'SYS_OP_MAKEOID'", "'SYS_OP_MAP_NONNULL'", "'SYS_OP_MSR'", "'SYS_OP_NICOMBINE'", 
			"'SYS_OP_NIEXTRACT'", "'SYS_OP_NII'", "'SYS_OP_NIX'", "'SYS_OP_NOEXPAND'", 
			"'SYS_OP_NTCIMG$'", "'SYS_OP_NUMTORAW'", "'SYS_OP_OIDVALUE'", "'SYS_OP_OPNSIZE'", 
			"'SYS_OP_PAR_1'", "'SYS_OP_PARGID_1'", "'SYS_OP_PARGID'", "'SYS_OP_PAR'", 
			"'SYS_OP_PART_ID'", "'SYS_OP_PIVOT'", "'SYS_OP_R2O'", "'SYS_OP_RAWTONUM'", 
			"'SYS_OP_RDTM'", "'SYS_OP_REF'", "'SYS_OP_RMTD'", "'SYS_OP_ROWIDTOOBJ'", 
			"'SYS_OP_RPB'", "'SYS_OPTLOBPRBSC'", "'SYS_OP_TOSETID'", "'SYS_OP_TPR'", 
			"'SYS_OP_TRTB'", "'SYS_OPTXICMP'", "'SYS_OPTXQCASTASNQ'", "'SYS_OP_UNDESCEND'", 
			"'SYS_OP_VECAND'", "'SYS_OP_VECBIT'", "'SYS_OP_VECOR'", "'SYS_OP_VECXOR'", 
			"'SYS_OP_VERSION'", "'SYS_OP_VREF'", "'SYS_OP_VVD'", "'SYS_OP_XMLCONS_FOR_CSX'", 
			"'SYS_OP_XPTHATG'", "'SYS_OP_XPTHIDX'", "'SYS_OP_XPTHOP'", "'SYS_OP_XTXT2SQLT'", 
			"'SYS_OP_ZONE_ID'", "'SYS_ORDERKEY_DEPTH'", "'SYS_ORDERKEY_MAXCHILD'", 
			"'SYS_ORDERKEY_PARENT'", "'SYS_PARALLEL_TXN'", "'SYS_PATHID_IS_ATTR'", 
			"'SYS_PATHID_IS_NMSPC'", "'SYS_PATHID_LASTNAME'", "'SYS_PATHID_LASTNMSPC'", 
			"'SYS_PATH_REVERSE'", "'SYS_PXQEXTRACT'", "'SYS_RAW_TO_XSID'", "'SYS_RID_ORDER'", 
			"'SYS_ROW_DELTA'", "'SYS_SC_2_XMLT'", "'SYS_SYNRCIREDO'", "'SYSTEM_DEFINED'", 
			"'SYSTEM'", "'SYSTIMESTAMP'", "'SYS_TYPEID'", "'SYS_UMAKEXML'", "'SYS_XMLANALYZE'", 
			"'SYS_XMLCONTAINS'", "'SYS_XMLCONV'", "'SYS_XMLEXNSURI'", "'SYS_XMLGEN'", 
			"'SYS_XMLI_LOC_ISNODE'", "'SYS_XMLI_LOC_ISTEXT'", "'SYS_XMLINSTR'", "'SYS_XMLLOCATOR_GETSVAL'", 
			"'SYS_XMLNODEID_GETCID'", "'SYS_XMLNODEID_GETLOCATOR'", "'SYS_XMLNODEID_GETOKEY'", 
			"'SYS_XMLNODEID_GETPATHID'", "'SYS_XMLNODEID_GETPTRID'", "'SYS_XMLNODEID_GETRID'", 
			"'SYS_XMLNODEID_GETSVAL'", "'SYS_XMLNODEID_GETTID'", "'SYS_XMLNODEID'", 
			"'SYS_XMLT_2_SC'", "'SYS_XMLTRANSLATE'", "'SYS_XMLTYPE2SQL'", "'SYS_XQ_ASQLCNV'", 
			"'SYS_XQ_ATOMCNVCHK'", "'SYS_XQBASEURI'", "'SYS_XQCASTABLEERRH'", "'SYS_XQCODEP2STR'", 
			"'SYS_XQCODEPEQ'", "'SYS_XQCON2SEQ'", "'SYS_XQCONCAT'", "'SYS_XQDELETE'", 
			"'SYS_XQDFLTCOLATION'", "'SYS_XQDOC'", "'SYS_XQDOCURI'", "'SYS_XQDURDIV'", 
			"'SYS_XQED4URI'", "'SYS_XQENDSWITH'", "'SYS_XQERRH'", "'SYS_XQERR'", 
			"'SYS_XQESHTMLURI'", "'SYS_XQEXLOBVAL'", "'SYS_XQEXSTWRP'", "'SYS_XQEXTRACT'", 
			"'SYS_XQEXTRREF'", "'SYS_XQEXVAL'", "'SYS_XQFB2STR'", "'SYS_XQFNBOOL'", 
			"'SYS_XQFNCMP'", "'SYS_XQFNDATIM'", "'SYS_XQFNLNAME'", "'SYS_XQFNNM'", 
			"'SYS_XQFNNSURI'", "'SYS_XQFNPREDTRUTH'", "'SYS_XQFNQNM'", "'SYS_XQFNROOT'", 
			"'SYS_XQFORMATNUM'", "'SYS_XQFTCONTAIN'", "'SYS_XQFUNCR'", "'SYS_XQGETCONTENT'", 
			"'SYS_XQINDXOF'", "'SYS_XQINSERT'", "'SYS_XQINSPFX'", "'SYS_XQIRI2URI'", 
			"'SYS_XQLANG'", "'SYS_XQLLNMFRMQNM'", "'SYS_XQMKNODEREF'", "'SYS_XQNILLED'", 
			"'SYS_XQNODENAME'", "'SYS_XQNORMSPACE'", "'SYS_XQNORMUCODE'", "'SYS_XQ_NRNG'", 
			"'SYS_XQNSP4PFX'", "'SYS_XQNSPFRMQNM'", "'SYS_XQPFXFRMQNM'", "'SYS_XQ_PKSQL2XML'", 
			"'SYS_XQPOLYABS'", "'SYS_XQPOLYADD'", "'SYS_XQPOLYCEL'", "'SYS_XQPOLYCSTBL'", 
			"'SYS_XQPOLYCST'", "'SYS_XQPOLYDIV'", "'SYS_XQPOLYFLR'", "'SYS_XQPOLYMOD'", 
			"'SYS_XQPOLYMUL'", "'SYS_XQPOLYRND'", "'SYS_XQPOLYSQRT'", "'SYS_XQPOLYSUB'", 
			"'SYS_XQPOLYUMUS'", "'SYS_XQPOLYUPLS'", "'SYS_XQPOLYVEQ'", "'SYS_XQPOLYVGE'", 
			"'SYS_XQPOLYVGT'", "'SYS_XQPOLYVLE'", "'SYS_XQPOLYVLT'", "'SYS_XQPOLYVNE'", 
			"'SYS_XQREF2VAL'", "'SYS_XQRENAME'", "'SYS_XQREPLACE'", "'SYS_XQRESVURI'", 
			"'SYS_XQRNDHALF2EVN'", "'SYS_XQRSLVQNM'", "'SYS_XQRYENVPGET'", "'SYS_XQRYVARGET'", 
			"'SYS_XQRYWRP'", "'SYS_XQSEQ2CON4XC'", "'SYS_XQSEQ2CON'", "'SYS_XQSEQDEEPEQ'", 
			"'SYS_XQSEQINSB'", "'SYS_XQSEQRM'", "'SYS_XQSEQRVS'", "'SYS_XQSEQSUB'", 
			"'SYS_XQSEQTYPMATCH'", "'SYS_XQSTARTSWITH'", "'SYS_XQSTATBURI'", "'SYS_XQSTR2CODEP'", 
			"'SYS_XQSTRJOIN'", "'SYS_XQSUBSTRAFT'", "'SYS_XQSUBSTRBEF'", "'SYS_XQTOKENIZE'", 
			"'SYS_XQTREATAS'", "'SYS_XQ_UPKXML2SQL'", "'SYS_XQXFORM'", "'SYS_XSID_TO_RAW'", 
			"'SYS_ZMAP_FILTER'", "'SYS_ZMAP_REFRESH'", "'T'", "'TABLE_LOOKUP_BY_NL'", 
			"'TABLESPACE_NO'", "'TABLESPACE'", "'TABLES'", "'TABLE_STATS'", "'TABLE'", 
			"'TABNO'", "'TAG'", "'TANH'", "'TAN'", "'TBL$OR$IDX$PART$NUM'", "'TEMPFILE'", 
			"'TEMPLATE'", "'TEMPORARY'", "'TEMP_TABLE'", "'TEST'", "'TEXT'", "'THAN'", 
			"'THEN'", "'THE'", "'THREAD'", "'THROUGH'", "'TIER'", "'TIES'", "'TIMEOUT'", 
			"'TIMESTAMP_LTZ_UNCONSTRAINED'", "'TIMESTAMP'", "'TIMESTAMP_TZ_UNCONSTRAINED'", 
			"'TIMESTAMP_UNCONSTRAINED'", "'TIMES'", "'TIME'", "'TIMEZONE'", "'TIMEZONE_ABBR'", 
			"'TIMEZONE_HOUR'", "'TIMEZONE_MINUTE'", "'TIMEZONE_OFFSET'", "'TIMEZONE_REGION'", 
			"'TIME_ZONE'", "'TIMING'", "'TIV_GB'", "'TIV_SSF'", "'TO_ACLID'", "'TO_BINARY_DOUBLE'", 
			"'TO_BINARY_FLOAT'", "'TO_BLOB'", "'TO_CLOB'", "'TO_DSINTERVAL'", "'TO_LOB'", 
			"'TO_MULTI_BYTE'", "'TO_NCHAR'", "'TO_NCLOB'", "'TO_NUMBER'", "'TOPLEVEL'", 
			"'TO_SINGLE_BYTE'", "'TO_TIMESTAMP'", "'TO_TIMESTAMP_TZ'", "'TO_TIME'", 
			"'TO_TIME_TZ'", "'TO'", "'TO_YMINTERVAL'", "'TRACE'", "'TRACING'", "'TRACKING'", 
			"'TRAILING'", "'TRANSACTION'", "'TRANSFORM'", "'TRANSFORM_DISTINCT_AGG'", 
			"'TRANSITIONAL'", "'TRANSITION'", "'TRANSLATE'", "'TRANSLATION'", "'TREAT'", 
			"'TRIGGERS'", "'TRIGGER'", "'TRUE'", "'TRUNCATE'", "'TRUNC'", "'TRUSTED'", 
			"'TRUST'", "'TUNING'", "'TX'", "'TYPES'", "'TYPE'", "'TZ_OFFSET'", "'UB2'", 
			"'UBA'", "'UCS2'", "'UID'", "'UNARCHIVED'", "'UNBOUNDED'", "'UNBOUND'", 
			"'UNCONDITIONAL'", "'UNDER'", "'UNDO'", "'UNDROP'", "'UNIFORM'", "'UNION'", 
			"'UNIQUE'", "'UNISTR'", "'UNLIMITED'", "'UNLOAD'", "'UNLOCK'", "'UNMATCHED'", 
			"'UNNEST_INNERJ_DISTINCT_VIEW'", "'UNNEST_NOSEMIJ_NODISTINCTVIEW'", "'UNNEST_SEMIJ_VIEW'", 
			"'UNNEST'", "'UNPACKED'", "'UNPIVOT'", "'UNPLUG'", "'UNPROTECTED'", "'UNQUIESCE'", 
			"'UNRECOVERABLE'", "'UNRESTRICTED'", "'UNSUBSCRIBE'", "'UNTIL'", "'UNUSABLE'", 
			"'UNUSED'", "'UPDATABLE'", "'UPDATED'", "'UPDATE'", "'UPDATEXML'", "'UPD_INDEXES'", 
			"'UPD_JOININDEX'", "'UPGRADE'", "'UPPER'", "'UPSERT'", "'UROWID'", "'USABLE'", 
			"'USAGE'", "'USE_ANTI'", "'USE_CONCAT'", "'USE_CUBE'", "'USE_HASH_AGGREGATION'", 
			"'USE_HASH_GBY_FOR_PUSHDOWN'", "'USE_HASH'", "'USE_HIDDEN_PARTITIONS'", 
			"'USE_INVISIBLE_INDEXES'", "'USE_MERGE_CARTESIAN'", "'USE_MERGE'", "'USE_NL'", 
			"'USE_NL_WITH_INDEX'", "'USE_PRIVATE_OUTLINES'", "'USER_DATA'", "'USER_DEFINED'", 
			"'USERENV'", "'USERGROUP'", "'USER_RECYCLEBIN'", "'USERS'", "'USER_TABLESPACES'", 
			"'USER'", "'USE_SEMI'", "'USE_STORED_OUTLINES'", "'USE_TTT_FOR_GSETS'", 
			"'USE'", "'USE_VECTOR_AGGREGATION'", "'USE_WEAK_NAME_RESL'", "'USING_NO_EXPAND'", 
			"'USING'", "'UTF16BE'", "'UTF16LE'", "'UTF32'", "'UTF8'", "'V1'", "'V2'", 
			"'VALIDATE'", "'VALIDATE_CONVERSION'", "'VALIDATION'", "'VALID_TIME_END'", 
			"'VALUES'", "'VALUE'", "'VARCHAR2'", "'VARCHAR'", "'VARIABLE'", "'VAR_POP'", 
			"'VARRAYS'", "'VARRAY'", "'VAR_SAMP'", "'VARYING'", "'VECTOR_READ_TRACE'", 
			"'VECTOR_READ'", "'VECTOR_TRANSFORM_DIMS'", "'VECTOR_TRANSFORM_FACT'", 
			"'VECTOR_TRANSFORM'", "'VERIFIER'", "'VERIFY'", "'VERSIONING'", "'VERSIONS_ENDSCN'", 
			"'VERSIONS_ENDTIME'", "'VERSIONS_OPERATION'", "'VERSIONS_STARTSCN'", 
			"'VERSIONS_STARTTIME'", "'VERSIONS'", "'VERSIONS_XID'", "'VERSION'", 
			"'VIEW'", "'VIOLATION'", "'VIRTUAL'", "'VISIBILITY'", "'VISIBLE'", "'VOLUME'", 
			"'VSIZE'", "'WAIT'", "'WALLET'", "'WARNING'", "'WEEKS'", "'WEEK'", "'WELLFORMED'", 
			"'WHENEVER'", "'WHEN'", "'WHERE'", "'WHILE'", "'WHITESPACE'", "'WIDTH_BUCKET'", 
			"'WITHIN'", "'WITHOUT'", "'WITH_PLSQL'", "'WITH'", "'WORK'", "'WRAPPED'", 
			"'WRAPPER'", "'WRITE'", "'XDB_FASTPATH_INSERT'", "'XDB'", "'X_DYN_PRUNE'", 
			"'XID'", "'XML2OBJECT'", "'XMLAGG'", "'XMLATTRIBUTES'", "'XMLCAST'", 
			"'XMLCDATA'", "'XMLCOLATTVAL'", "'XMLCOMMENT'", "'XMLCONCAT'", "'XMLDIFF'", 
			"'XML_DML_RWT_STMT'", "'XMLELEMENT'", "'XMLEXISTS2'", "'XMLEXISTS'", 
			"'XMLFOREST'", "'XMLINDEX'", "'XMLINDEX_REWRITE_IN_SELECT'", "'XMLINDEX_REWRITE'", 
			"'XMLINDEX_SEL_IDX_TBL'", "'XMLISNODE'", "'XMLISVALID'", "'XMLNAMESPACES'", 
			"'XMLPARSE'", "'XMLPATCH'", "'XMLPI'", "'XMLQUERYVAL'", "'XMLQUERY'", 
			"'XMLROOT'", "'XMLSCHEMA'", "'XMLSERIALIZE'", "'XMLTABLE'", "'XMLTRANSFORMBLOB'", 
			"'XMLTRANSFORM'", "'XMLTYPE'", "'XML'", "'XPATHTABLE'", "'XS_SYS_CONTEXT'", 
			"'XS'", "'XTRANSPORT'", "'YEARS'", "'YEAR'", "'YEAROFWEEK'", "'YES'", 
			"'YMINTERVAL_UNCONSTRAINED'", "'ZONEMAP'", "'ZONE'", "'PREDICTION'", 
			"'PREDICTION_BOUNDS'", "'PREDICTION_COST'", "'PREDICTION_DETAILS'", "'PREDICTION_PROBABILITY'", 
			"'PREDICTION_SET'", "'BLOCKCHAIN'", "'COLLATE'", "'COLLATION'", "'DEFINITION'", 
			"'DUPLICATED'", "'EXTENDED'", "'HASHING'", "'IDLE'", "'IMMUTABLE'", "'ORACLE_DATAPUMP'", 
			"'ORACLE_HDFS'", "'ORACLE_HIVE'", "'ORACLE_LOADER'", "'\"SHA2_512\"'", 
			"'SHARDED'", "'\"V1\"'", "'ISOLATE'", "'ROOT'", "'UNITE'", "'ALGORITHM'", 
			"'CUME_DIST'", "'DENSE_RANK'", "'LISTAGG'", "'PERCENT_RANK'", "'PERCENTILE_CONT'", 
			"'PERCENTILE_DISC'", "'RANK'", "'AVG'", "'CORR'", "'COVAR_'", "'DECODE'", 
			"'LAG'", "'LAG_DIFF'", "'LAG_DIFF_PERCENT'", "'LEAD'", "'MAX'", "'MEDIAN'", 
			"'MEMOPTIMIZE'", "'MIN'", "'NTILE'", "'NVL'", "'RATIO_TO_REPORT'", "'REGR_'", 
			"'ROUND'", "'ROW_NUMBER'", "'SUBSTR'", "'TO_CHAR'", "'TRIM'", "'SUM'", 
			"'STDDEV'", "'VAR_'", "'VARIANCE'", "'LEAST'", "'GREATEST'", "'TO_DATE'", 
			"'JAR'", null, null, null, "'..'", "'.'", null, null, null, null, "'%'", 
			"'&'", "'('", "')'", "'**'", "'*'", "'+'", "'-'", "','", "'/'", "'@'", 
			"':='", "'#'", "'''", null, null, "'^'", "'~'", "'!'", "'>'", "'<'", 
			"':'", "';'", "'|'", "'='", "'['", "']'", "'_'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "ABORT", "ABS", "ABSENT", "ACCESS", "ACCESSED", "ACCOUNT", "ACL", 
			"ACOS", "ACROSS", "ACTION", "ACTIONS", "ACTIVATE", "ACTIVE", "ACTIVE_COMPONENT", 
			"ACTIVE_DATA", "ACTIVE_FUNCTION", "ACTIVE_TAG", "ACTIVITY", "ADAPTIVE_PLAN", 
			"ADD", "ADD_COLUMN", "ADD_GROUP", "ADD_MONTHS", "ADJ_DATE", "ADMIN", 
			"ADMINISTER", "ADMINISTRATOR", "ADVANCED", "ADVISE", "ADVISOR", "AFD_DISKSTRING", 
			"AFTER", "AGENT", "AGGREGATE", "A_LETTER", "ALIAS", "ALL", "ALLOCATE", 
			"ALLOW", "ALL_ROWS", "ALTER", "ALTERNATE", "ALWAYS", "ANALYTIC", "ANALYZE", 
			"ANCESTOR", "ANCILLARY", "AND", "AND_EQUAL", "ANOMALY", "ANSI_REARCH", 
			"ANTIJOIN", "ANY", "ANYSCHEMA", "APPEND", "APPENDCHILDXML", "APPEND_VALUES", 
			"APPLICATION", "APPLY", "APPROX_COUNT_DISTINCT", "ARCHIVAL", "ARCHIVE", 
			"ARCHIVED", "ARCHIVELOG", "ARRAY", "AS", "ASC", "ASCII", "ASCIISTR", 
			"ASIN", "ASIS", "ASSEMBLY", "ASSIGN", "ASSOCIATE", "ASYNC", "ASYNCHRONOUS", 
			"ATAN2", "ATAN", "AT", "ATTRIBUTE", "ATTRIBUTES", "AUDIT", "AUTHENTICATED", 
			"AUTHENTICATION", "AUTHID", "AUTHORIZATION", "AUTOALLOCATE", "AUTO", 
			"AUTOBACKUP", "AUTOEXTEND", "AUTO_LOGIN", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", 
			"AUTO_REOPTIMIZE", "AVAILABILITY", "AVRO", "BACKGROUND", "BACKINGFILE", 
			"BACKUP", "BACKUPS", "BACKUPSET", "BASIC", "BASICFILE", "BATCH", "BATCHSIZE", 
			"BATCH_TABLE_ACCESS_BY_ROWID", "BECOME", "BEFORE", "BEGIN", "BEGINNING", 
			"BEGIN_OUTLINE_DATA", "BEHALF", "BEQUEATH", "BETWEEN", "BFILE", "BFILENAME", 
			"BIGFILE", "BINARY", "BINARY_DOUBLE", "BINARY_DOUBLE_INFINITY", "BINARY_DOUBLE_NAN", 
			"BINARY_FLOAT", "BINARY_FLOAT_INFINITY", "BINARY_FLOAT_NAN", "BINARY_INTEGER", 
			"BIND_AWARE", "BINDING", "BIN_TO_NUM", "BITAND", "BITMAP_AND", "BITMAP", 
			"BITMAPS", "BITMAP_TREE", "BITS", "BLOB", "BLOCK", "BLOCK_RANGE", "BLOCKS", 
			"BLOCKSIZE", "BODY", "BOOLEAN", "BOTH", "BOUND", "BRANCH", "BREADTH", 
			"BROADCAST", "BSON", "BUFFER", "BUFFER_CACHE", "BUFFER_POOL", "BUILD", 
			"BULK", "BY", "BYPASS_RECURSIVE_CHECK", "BYPASS_UJVC", "BYTE", "CACHE", 
			"CACHE_CB", "CACHE_INSTANCES", "CACHE_TEMP_TABLE", "CACHING", "CALCULATED", 
			"CALLBACK", "CALL", "CANCEL", "CANONICAL", "CAPACITY", "CAPTION", "CARDINALITY", 
			"CASCADE", "CASE", "CAST", "CASESENSITIVE", "CATEGORY", "CDBDEFAULT", 
			"CEIL", "CELL_FLASH_CACHE", "CERTIFICATE", "CFILE", "CHAINED", "CHANGE", 
			"CHANGETRACKING", "CHANGE_DUPKEY_ERROR_INDEX", "CHARACTER", "CHAR", "CHAR_CS", 
			"CHARTOROWID", "CHECK_ACL_REWRITE", "CHECK", "CHECKPOINT", "CHILD", "CHOOSE", 
			"CHR", "CHUNK", "CLASS", "CLASSIFICATION", "CLASSIFIER", "CLAUSE", "CLEAN", 
			"CLEANUP", "CLEAR", "C_LETTER", "CLIENT", "CLOB", "CLONE", "CLOSE_CACHED_OPEN_CURSORS", 
			"CLOSE", "CLUSTER_BY_ROWID", "CLUSTER", "CLUSTER_DETAILS", "CLUSTER_DISTANCE", 
			"CLUSTER_ID", "CLUSTERING", "CLUSTERING_FACTOR", "CLUSTER_PROBABILITY", 
			"CLUSTER_SET", "COALESCE", "COALESCE_SQ", "COARSE", "CO_AUTH_IND", "COLD", 
			"COLLECT", "COLUMNAR", "COLUMN_AUTH_INDICATOR", "COLUMN", "COLUMNS", 
			"COLUMN_STATS", "COLUMN_VALUE", "COMMENT", "COMMIT", "COMMITTED", "COMMON", 
			"COMMON_DATA", "COMPACT", "COMPATIBILITY", "COMPILE", "COMPLETE", "COMPLIANCE", 
			"COMPONENT", "COMPONENTS", "COMPOSE", "COMPOSITE", "COMPOSITE_LIMIT", 
			"COMPOUND", "COMPRESS", "COMPUTE", "CONCAT", "CON_DBID_TO_ID", "CONDITIONAL", 
			"CONDITION", "CONFIRM", "CONFORMING", "CON_GUID_TO_ID", "CON_ID", "CON_NAME_TO_ID", 
			"CONNECT_BY_CB_WHR_ONLY", "CONNECT_BY_COMBINE_SW", "CONNECT_BY_COST_BASED", 
			"CONNECT_BY_ELIM_DUPS", "CONNECT_BY_FILTERING", "CONNECT_BY_ISCYCLE", 
			"CONNECT_BY_ISLEAF", "CONNECT_BY_ROOT", "CONNECT", "CONNECT_TIME", "CONSIDER", 
			"CONSISTENT", "CONSTANT", "CONST", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", 
			"CONTAINER", "CONTAINERS", "CONTAINERS_DEFAULT", "CONTAINER_DATA", "CONTAINER_MAP", 
			"CONTENT", "CONTENTS", "CONTEXT", "CONTINUE", "CONTROLFILE", "CON_UID_TO_ID", 
			"CONVERT", "CONVERSION", "COOKIE", "COPY", "CORR_K", "CORR_S", "CORRUPTION", 
			"CORRUPT_XID_ALL", "CORRUPT_XID", "COS", "COSH", "COST", "COST_XML_QUERY_REWRITE", 
			"COUNT", "COVAR_POP", "COVAR_SAMP", "CPU_COSTING", "CPU_PER_CALL", "CPU_PER_SESSION", 
			"CRASH", "CREATE", "CREATE_FILE_DEST", "CREATE_STORED_OUTLINES", "CREATION", 
			"CREDENTIAL", "CRITICAL", "CROSS", "CROSSEDITION", "CSCONVERT", "CUBE_AJ", 
			"CUBE", "CUBE_GB", "CUBE_SJ", "CUME_DISTM", "CURRENT", "CURRENT_DATE", 
			"CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
			"CURRENTV", "CURSOR", "CURSOR_SHARING_EXACT", "CURSOR_SPECIFIC_SEGMENT", 
			"CUSTOMDATUM", "CV", "CYCLE", "DANGLING", "DATABASE", "DATA", "DATAFILE", 
			"DATAFILES", "DATAGUARDCONFIG", "DATAMOVEMENT", "DATAOBJNO", "DATAOBJ_TO_MAT_PARTITION", 
			"DATAOBJ_TO_PARTITION", "DATAPUMP", "DATA_SECURITY_REWRITE_LIMIT", "DATE", 
			"DATE_MODE", "DAY", "DAYOFWEEK", "DAYS", "DBA", "DBA_RECYCLEBIN", "DBMS_STATS", 
			"DB_ROLE_CHANGE", "DBTIMEZONE", "DB_UNIQUE_NAME", "DB_VERSION", "DDL", 
			"DEALLOCATE", "DEBUG", "DEBUGGER", "DEC", "DECIMAL", "DECLARE", "DECOMPOSE", 
			"DECORRELATE", "DECR", "DECREMENT", "DECRYPT", "DEDUPLICATE", "DEFAULT", 
			"DEFAULTS", "DEFAULT_COLLATION", "DEFAULT_CREDENTIAL", "DEFERRABLE", 
			"DEFERRED", "DEFINED", "DEFINE", "DEFINER", "DEGREE", "DELAY", "DELEGATE", 
			"DELETE_ALL", "DELETE", "DELETEXML", "DEMAND", "DENSE_RANKM", "DEPENDENT", 
			"DEPTH", "DEQUEUE", "DEREF", "DEREF_NO_REWRITE", "DESC", "DESCRIPTION", 
			"DESTROY", "DETACHED", "DETERMINES", "DETERMINISTIC", "DICTIONARY", "DIMENSION", 
			"DIMENSIONS", "DIRECT_LOAD", "DIRECTORY", "DIRECT_PATH", "DISABLE_ALL", 
			"DISABLE", "DISABLE_PARALLEL_DML", "DISABLE_PRESET", "DISABLE_RPKE", 
			"DISALLOW", "DISASSOCIATE", "DISCARD", "DISCONNECT", "DISK", "DISKGROUP", 
			"DISKGROUP_PLUS", "DISKS", "DISMOUNT", "DISTINCT", "DISTINGUISHED", "DISTRIBUTED", 
			"DISTRIBUTE", "DML", "DML_UPDATE", "DOCFIDELITY", "DOCUMENT", "DOMAIN_INDEX_FILTER", 
			"DOMAIN_INDEX_NO_SORT", "DOMAIN_INDEX_SORT", "DOY", "DOUBLE", "DOWNGRADE", 
			"DRIVING_SITE", "DROP_COLUMN", "DROP", "DROP_GROUP", "DSINTERVAL_UNCONSTRAINED", 
			"DST_UPGRADE_INSERT_CONV", "DUMP", "DUMPSET", "DUPLICATE", "DV", "DYNAMIC", 
			"DYNAMIC_SAMPLING", "DYNAMIC_SAMPLING_EST_CDN", "E_LETTER", "EACH", "EDITIONABLE", 
			"EDITION", "EDITIONING", "EDITIONS", "ELEMENT", "ELIM_GROUPBY", "ELIMINATE_JOIN", 
			"ELIMINATE_OBY", "ELIMINATE_OUTER_JOIN", "ELSE", "ELSIF", "EM", "EMPTY_BLOB", 
			"EMPTY_CLOB", "EMPTY", "ENABLE_ALL", "ENABLE", "ENABLE_PARALLEL_DML", 
			"ENABLE_PRESET", "ENCODING", "ENCRYPT", "ENCRYPTION", "END", "END_OUTLINE_DATA", 
			"ENFORCED", "ENFORCE", "ENQUEUE", "ENTERPRISE", "ENTITYESCAPING", "ENTRY", 
			"EQUIPART", "ERR", "ERROR_ARGUMENT", "ERROR", "ERROR_ON_OVERLAP_TIME", 
			"ERRORS", "ESCAPE", "ESTIMATE", "EVAL", "EVALNAME", "EVALUATE", "EVALUATION", 
			"EVENTS", "EVERY", "EXCEPT", "EXCEPTION", "EXCEPTION_INIT", "EXCEPTIONS", 
			"EXCHANGE", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE", "EXEMPT", 
			"EXISTING", "EXISTS", "EXISTSNODE", "EXIT", "EXPAND_GSET_TO_UNION", "EXPAND_TABLE", 
			"EXP", "EXPIRE", "EXPLAIN", "EXPLOSION", "EXPORT", "EXPR_CORR_CHECK", 
			"EXPRESS", "EXTENDS", "EXTENT", "EXTENTS", "EXTERNAL", "EXTERNALLY", 
			"EXTRACTCLOBXML", "EXTRACT", "EXTRACTVALUE", "EXTRA", "FACILITY", "FACT", 
			"FACTOR", "FACTORIZE_JOIN", "FAILED", "FAILED_LOGIN_ATTEMPTS", "FAILGROUP", 
			"FAILOVER", "FAILURE", "FALSE", "FAMILY", "FAR", "FAST", "FASTSTART", 
			"FBTSCAN", "FEATURE", "FEATURE_DETAILS", "FEATURE_ID", "FEATURE_SET", 
			"FEATURE_VALUE", "FETCH", "FILE", "FILE_NAME_CONVERT", "FILEGROUP", "FILESTORE", 
			"FILESYSTEM_LIKE_LOGGING", "FILTER", "FINAL", "FINE", "FINISH", "FIRST", 
			"FIRSTM", "FIRST_ROWS", "FIRST_VALUE", "FIXED_VIEW_DATA", "FLAGGER", 
			"FLASHBACK", "FLASH_CACHE", "FLOAT", "FLOB", "FLEX", "FLOOR", "FLUSH", 
			"FOLDER", "FOLLOWING", "FOLLOWS", "FORALL", "FORCE", "FORCE_XML_QUERY_REWRITE", 
			"FOREIGN", "FOREVER", "FOR", "FORMAT", "FORWARD", "FRAGMENT_NUMBER", 
			"FREELIST", "FREELISTS", "FREEPOOLS", "FRESH", "FROM", "FROM_TZ", "FULL", 
			"FULL_OUTER_JOIN_TO_OUTER", "FUNCTION", "FUNCTIONS", "FTP", "G_LETTER", 
			"GATHER_OPTIMIZER_STATISTICS", "GATHER_PLAN_STATISTICS", "GBY_CONC_ROLLUP", 
			"GBY_PUSHDOWN", "GENERATED", "GET", "GLOBAL", "GLOBALLY", "GLOBAL_NAME", 
			"GLOBAL_TOPIC_ENABLED", "GOTO", "GRANT", "GROUP_BY", "GROUP", "GROUP_ID", 
			"GROUPING", "GROUPING_ID", "GROUPS", "GUARANTEED", "GUARANTEE", "GUARD", 
			"HALF_YEARS", "HASH_AJ", "HASH", "HASHKEYS", "HASH_SJ", "HAVING", "HEADER", 
			"HEAP", "HELP", "HEXTORAW", "HEXTOREF", "HIDDEN_KEYWORD", "HIDE", "HIER_ORDER", 
			"HIERARCHICAL", "HIERARCHIES", "HIERARCHY", "HIGH", "HINTSET_BEGIN", 
			"HINTSET_END", "HOT", "HOUR", "HOURS", "HTTP", "HWM_BROKERED", "HYBRID", 
			"H_LETTER", "IDENTIFIED", "IDENTIFIER", "IDENTITY", "IDGENERATORS", "ID", 
			"IDLE_TIME", "IF", "IGNORE", "IGNORE_OPTIM_EMBEDDED_HINTS", "IGNORE_ROW_ON_DUPKEY_INDEX", 
			"IGNORE_WHERE_CLAUSE", "ILM", "IMMEDIATE", "IMPACT", "IMPORT", "INACTIVE", 
			"INACTIVE_ACCOUNT_TIME", "INCLUDE", "INCLUDE_VERSION", "INCLUDING", "INCREMENTAL", 
			"INCREMENT", "INCR", "INDENT", "INDEX_ASC", "INDEX_COMBINE", "INDEX_DESC", 
			"INDEXED", "INDEXES", "INDEX_FFS", "INDEX_FILTER", "INDEX", "INDEXING", 
			"INDEX_JOIN", "INDEX_ROWS", "INDEX_RRS", "INDEX_RS_ASC", "INDEX_RS_DESC", 
			"INDEX_RS", "INDEX_SCAN", "INDEX_SKIP_SCAN", "INDEX_SS_ASC", "INDEX_SS_DESC", 
			"INDEX_SS", "INDEX_STATS", "INDEXTYPE", "INDEXTYPES", "INDICATOR", "INDICES", 
			"INFINITE", "INFORMATIONAL", "INHERIT", "IN", "INITCAP", "INITIAL", "INITIALIZED", 
			"INITIALLY", "INITRANS", "INLINE", "INLINE_XMLTYPE_NT", "INMEMORY", "IN_MEMORY_METADATA", 
			"INMEMORY_PRUNING", "INNER", "INOUT", "INPLACE", "INSERTCHILDXMLAFTER", 
			"INSERTCHILDXMLBEFORE", "INSERTCHILDXML", "INSERT", "INSERTXMLAFTER", 
			"INSERTXMLBEFORE", "INSTANCE", "INSTANCES", "INSTANTIABLE", "INSTANTLY", 
			"INSTEAD", "INSTR2", "INSTR4", "INSTRB", "INSTRC", "INSTR", "INTEGER", 
			"INTERLEAVED", "INTERMEDIATE", "INTERNAL_CONVERT", "INTERNAL_USE", "INTERPRETED", 
			"INTERSECT", "INTERVAL", "INT", "BIGINT", "INTO", "INVALIDATE", "INVISIBLE", 
			"IN_XQUERY", "IS", "IS_LEAF", "ISOLATION", "ISOLATION_LEVEL", "ITERATE", 
			"ITERATION_NUMBER", "JAVA", "JOB", "JOIN", "JSON_ARRAYAGG", "JSON_ARRAY", 
			"JSON_EQUAL", "JSON_EXISTS2", "JSON_EXISTS", "JSONGET", "JSON", "JSON_OBJECTAGG", 
			"JSON_OBJECT", "JSONPARSE", "JSON_QUERY", "JSON_SERIALIZE", "JSON_TABLE", 
			"JSON_TEXTCONTAINS2", "JSON_TEXTCONTAINS", "JSON_TRANSFORM", "JSON_VALUE", 
			"K_LETTER", "KEEP_DUPLICATES", "KEEP", "KERBEROS", "KEY", "KEY_LENGTH", 
			"KEYSIZE", "KEYS", "KEYSTORE", "KILL", "LABEL", "LANGUAGE", "LAST_DAY", 
			"LAST", "LAST_VALUE", "LATERAL", "LAX", "LAYER", "LDAP_REGISTRATION_ENABLED", 
			"LDAP_REGISTRATION", "LDAP_REG_SYNC_INTERVAL", "LEAF", "LEAD_CDB", "LEAD_CDB_URI", 
			"LEADING", "LEFT", "LENGTH2", "LENGTH4", "LENGTHB", "LENGTHC", "LENGTH", 
			"LESS", "LEVEL", "LEVEL_NAME", "LEVELS", "LIBRARY", "LIFECYCLE", "LIFE", 
			"LIFETIME", "LIKE2", "LIKE4", "LIKEC", "LIKE_EXPAND", "LIKE", "LIMIT", 
			"LINEAR", "LINK", "LIST", "LN", "LNNVL", "LOAD", "LOB", "LOBNVL", "LOBS", 
			"LOCAL_INDEXES", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION", 
			"LOCATOR", "LOCKDOWN", "LOCKED", "LOCKING", "LOCK", "LOGFILE", "LOGFILES", 
			"LOGGING", "LOGICAL", "LOGICAL_READS_PER_CALL", "LOGICAL_READS_PER_SESSION", 
			"LOG", "LOGMINING", "LOGOFF", "LOGON", "LOG_READ_ONLY_VIOLATIONS", "LONG", 
			"LOOP", "LOST", "LOWER", "LOW", "LPAD", "LTRIM", "M_LETTER", "MAIN", 
			"MAKE_REF", "MANAGED", "MANAGE", "MANAGEMENT", "MANAGER", "MANDATORY", 
			"MANUAL", "MAP", "MAPPING", "MASTER", "MATCHED", "MATCHES", "MATCH", 
			"MATCH_NUMBER", "MATCH_RECOGNIZE", "MATERIALIZED", "MATERIALIZE", "MAXARCHLOGS", 
			"MAXDATAFILES", "MAXEXTENTS", "MAXIMIZE", "MAXINSTANCES", "MAXLOGFILES", 
			"MAXLOGHISTORY", "MAXLOGMEMBERS", "MAX_SHARED_TEMP_SIZE", "MAXSIZE", 
			"MAXTRANS", "MAXVALUE", "MEASURE", "MEASURES", "MEDIUM", "MEMBER", "MEMBER_CAPTION", 
			"MEMBER_DESCRIPTION", "MEMBER_NAME", "MEMBER_UNIQUE_NAME", "MEMCOMPRESS", 
			"MEMORY", "MERGEACTIONS", "MERGE_AJ", "MERGE_CONST_ON", "MERGE", "MERGE_SJ", 
			"METADATA", "METHOD", "MIGRATE", "MIGRATION", "MINEXTENTS", "MINIMIZE", 
			"MINIMUM", "MINING", "MINUS", "MINUS_NULL", "MINUTE", "MINUTES", "MINVALUE", 
			"MIRRORCOLD", "MIRRORHOT", "MIRROR", "MISSING", "MISMATCH", "MLSLABEL", 
			"MODEL_COMPILE_SUBQUERY", "MODEL_DONTVERIFY_UNIQUENESS", "MODEL_DYNAMIC_SUBQUERY", 
			"MODEL_MIN_ANALYSIS", "MODEL", "MODEL_NB", "MODEL_NO_ANALYSIS", "MODEL_PBY", 
			"MODEL_PUSH_REF", "MODEL_SV", "MODE", "MODIFICATION", "MODIFY_COLUMN_TYPE", 
			"MODIFY", "MOD", "MODULE", "MONITORING", "MONITOR", "MONTH", "MONTHS_BETWEEN", 
			"MONTHS", "MOUNT", "MOUNTPATH", "MOUNTPOINT", "MOVEMENT", "MOVE", "MULTIDIMENSIONAL", 
			"MULTISET", "MV_MERGE", "NAMED", "NAME", "NAMESPACE", "NAN", "NANVL", 
			"NATIONAL", "NATIVE_FULL_OUTER_JOIN", "NATIVE", "NATURAL", "NATURALN", 
			"NAV", "NCHAR_CS", "NCHAR", "NCHR", "NCLOB", "NEEDED", "NEG", "NESTED", 
			"NESTED_TABLE_FAST_INSERT", "NESTED_TABLE_GET_REFS", "NESTED_TABLE_ID", 
			"NESTED_TABLE_SET_REFS", "NESTED_TABLE_SET_SETID", "NETWORK", "NEVER", 
			"NEW", "NEW_TIME", "NEXT_DAY", "NEXT", "NL_AJ", "NLJ_BATCHING", "NLJ_INDEX_FILTER", 
			"NLJ_INDEX_SCAN", "NLJ_PREFETCH", "NLS_CALENDAR", "NLS_CHARACTERSET", 
			"NLS_CHARSET_DECL_LEN", "NLS_CHARSET_ID", "NLS_CHARSET_NAME", "NLS_COMP", 
			"NLS_CURRENCY", "NLS_DATE_FORMAT", "NLS_DATE_LANGUAGE", "NLS_INITCAP", 
			"NLS_ISO_CURRENCY", "NL_SJ", "NLS_LANG", "NLS_LANGUAGE", "NLS_LENGTH_SEMANTICS", 
			"NLS_LOWER", "NLS_NCHAR_CONV_EXCP", "NLS_NUMERIC_CHARACTERS", "NLS_SORT", 
			"NLSSORT", "NLS_SPECIAL_CHARS", "NLS_TERRITORY", "NLS_UPPER", "NO_ACCESS", 
			"NO_ADAPTIVE_PLAN", "NO_ANSI_REARCH", "NOAPPEND", "NOARCHIVELOG", "NOAUDIT", 
			"NO_AUTO_REOPTIMIZE", "NO_BASETABLE_MULTIMV_REWRITE", "NO_BATCH_TABLE_ACCESS_BY_ROWID", 
			"NO_BIND_AWARE", "NO_BUFFER", "NOCACHE", "NO_CARTESIAN", "NO_CHECK_ACL_REWRITE", 
			"NO_CLUSTER_BY_ROWID", "NO_CLUSTERING", "NO_COALESCE_SQ", "NO_COMMON_DATA", 
			"NOCOMPRESS", "NO_CONNECT_BY_CB_WHR_ONLY", "NO_CONNECT_BY_COMBINE_SW", 
			"NO_CONNECT_BY_COST_BASED", "NO_CONNECT_BY_ELIM_DUPS", "NO_CONNECT_BY_FILTERING", 
			"NOCOPY", "NO_COST_XML_QUERY_REWRITE", "NO_CPU_COSTING", "NOCPU_COSTING", 
			"NOCYCLE", "NO_DATA_SECURITY_REWRITE", "NO_DECORRELATE", "NODELAY", "NO_DOMAIN_INDEX_FILTER", 
			"NO_DST_UPGRADE_INSERT_CONV", "NO_ELIM_GROUPBY", "NO_ELIMINATE_JOIN", 
			"NO_ELIMINATE_OBY", "NO_ELIMINATE_OUTER_JOIN", "NOENTITYESCAPING", "NO_EXPAND_GSET_TO_UNION", 
			"NO_EXPAND", "NO_EXPAND_TABLE", "NO_FACT", "NO_FACTORIZE_JOIN", "NO_FILTERING", 
			"NOFORCE", "NO_FULL_OUTER_JOIN_TO_OUTER", "NO_GATHER_OPTIMIZER_STATISTICS", 
			"NO_GBY_PUSHDOWN", "NOGUARANTEE", "NO_INDEX_FFS", "NO_INDEX", "NO_INDEX_SS", 
			"NO_INMEMORY", "NO_INMEMORY_PRUNING", "NOKEEP", "NO_LOAD", "NOLOCAL", 
			"NOLOGGING", "NOMAPPING", "NOMAXVALUE", "NO_MERGE", "NOMINIMIZE", "NOMINVALUE", 
			"NO_MODEL_PUSH_REF", "NO_MONITORING", "NOMONITORING", "NO_MONITOR", "NO_MULTIMV_REWRITE", 
			"NO_NATIVE_FULL_OUTER_JOIN", "NONBLOCKING", "NONEDITIONABLE", "NONE", 
			"NO_NLJ_BATCHING", "NO_NLJ_PREFETCH", "NO", "NONSCHEMA", "NO_OBJECT_LINK", 
			"NOORDER", "NO_ORDER_ROLLUPS", "NO_OUTER_JOIN_TO_ANTI", "NO_OUTER_JOIN_TO_INNER", 
			"NOOVERRIDE", "NO_PARALLEL_INDEX", "NOPARALLEL_INDEX", "NO_PARALLEL", 
			"NOPARALLEL", "NO_PARTIAL_COMMIT", "NO_PARTIAL_JOIN", "NO_PARTIAL_ROLLUP_PUSHDOWN", 
			"NOPARTITION", "NO_PLACE_DISTINCT", "NO_PLACE_GROUP_BY", "NO_PQ_CONCURRENT_UNION", 
			"NO_PQ_MAP", "NOPROMPT", "NO_PQ_REPLICATE", "NO_PQ_SKEW", "NO_PRUNE_GSETS", 
			"NO_PULL_PRED", "NO_PUSH_PRED", "NO_PUSH_SUBQ", "NO_PX_FAULT_TOLERANCE", 
			"NO_PX_JOIN_FILTER", "NO_QKN_BUFF", "NO_QUERY_TRANSFORMATION", "NO_REF_CASCADE", 
			"NORELOCATE", "NORELY", "NOREPAIR", "NOREPLAY", "NORESETLOGS", "NO_RESULT_CACHE", 
			"NOREVERSE", "NO_REWRITE", "NOREWRITE", "NORMAL", "NO_ROOT_SW_FOR_LOCAL", 
			"NOROWDEPENDENCIES", "NOSCHEMACHECK", "NOSEGMENT", "NO_SEMIJOIN", "NO_SEMI_TO_INNER", 
			"NO_SET_TO_JOIN", "NOSORT", "NO_SQL_TRANSLATION", "NO_SQL_TUNE", "NO_STAR_TRANSFORMATION", 
			"NO_STATEMENT_QUEUING", "NO_STATS_GSETS", "NOSTRICT", "NO_SUBQUERY_PRUNING", 
			"NO_SUBSTRB_PAD", "NO_SWAP_JOIN_INPUTS", "NOSWITCH", "NO_TABLE_LOOKUP_BY_NL", 
			"NO_TEMP_TABLE", "NOTHING", "NOTIFICATION", "NOT", "NO_TRANSFORM_DISTINCT_AGG", 
			"NO_UNNEST", "NO_USE_CUBE", "NO_USE_HASH_AGGREGATION", "NO_USE_HASH_GBY_FOR_PUSHDOWN", 
			"NO_USE_HASH", "NO_USE_INVISIBLE_INDEXES", "NO_USE_MERGE", "NO_USE_NL", 
			"NO_USE_VECTOR_AGGREGATION", "NOVALIDATE", "NO_VECTOR_TRANSFORM_DIMS", 
			"NO_VECTOR_TRANSFORM_FACT", "NO_VECTOR_TRANSFORM", "NOWAIT", "NO_XDB_FASTPATH_INSERT", 
			"NO_XML_DML_REWRITE", "NO_XMLINDEX_REWRITE_IN_SELECT", "NO_XMLINDEX_REWRITE", 
			"NO_XML_QUERY_REWRITE", "NO_ZONEMAP", "NTH_VALUE", "NULLIF", "NULL_", 
			"NULLS", "NUMBER", "NUMERIC", "NUM_INDEX_KEYS", "NUMTODSINTERVAL", "NUMTOYMINTERVAL", 
			"NVARCHAR2", "NVL2", "OBJECT2XML", "OBJECT", "OBJ_ID", "OBJNO", "OBJNO_REUSE", 
			"OCCURENCES", "OFFLINE", "OFF", "OFFSET", "OF", "OIDINDEX", "OID", "OLAP", 
			"OLD", "OLD_PUSH_PRED", "OLS", "OLTP", "OMIT", "ONE", "ONLINE", "ONLINELOG", 
			"ONLY", "ON", "OPAQUE", "OPAQUE_TRANSFORM", "OPAQUE_XCANONICAL", "OPCODE", 
			"OPEN", "OPERATIONS", "OPERATOR", "OPT_ESTIMATE", "OPTIMAL", "OPTIMIZE", 
			"OPTIMIZER_FEATURES_ENABLE", "OPTIMIZER_GOAL", "OPTION", "OPT_PARAM", 
			"ORA_BRANCH", "ORA_CHECK_ACL", "ORA_CHECK_PRIVILEGE", "ORA_CLUSTERING", 
			"ORADATA", "ORADEBUG", "ORA_DST_AFFECTED", "ORA_DST_CONVERT", "ORA_DST_ERROR", 
			"ORA_GET_ACLIDS", "ORA_GET_PRIVILEGES", "ORA_HASH", "ORA_INVOKING_USERID", 
			"ORA_INVOKING_USER", "ORA_INVOKING_XS_USER_GUID", "ORA_INVOKING_XS_USER", 
			"ORA_RAWCOMPARE", "ORA_RAWCONCAT", "ORA_ROWSCN", "ORA_ROWSCN_RAW", "ORA_ROWVERSION", 
			"ORA_TABVERSION", "ORA_WRITE_TIME", "ORDERED", "ORDERED_PREDICATES", 
			"ORDER", "ORDINALITY", "OR_EXPAND", "ORGANIZATION", "OR", "OR_PREDICATES", 
			"OSERROR", "OTHER", "OUTER_JOIN_TO_ANTI", "OUTER_JOIN_TO_INNER", "OUTER", 
			"OUTLINE_LEAF", "OUTLINE", "OUT_OF_LINE", "OUT", "OVERFLOW_NOMOVE", "OVERFLOW", 
			"OVERLAPS", "OVER", "OVERRIDING", "OWNER", "OWNERSHIP", "OWN", "P_LETTER", 
			"PACKAGE", "PACKAGES", "PARALLEL_ENABLE", "PARALLEL_INDEX", "PARALLEL", 
			"PARAMETERFILE", "PARAMETERS", "PARAM", "PARENT", "PARENT_LEVEL_NAME", 
			"PARENT_UNIQUE_NAME", "PARITY", "PARTIAL_JOIN", "PARTIALLY", "PARTIAL", 
			"PARTIAL_ROLLUP_PUSHDOWN", "PARTITION_HASH", "PARTITION_LIST", "PARTITION", 
			"PARTITION_RANGE", "PARTITIONS", "PARTNUMINST", "PASSING", "PASSWORD_GRACE_TIME", 
			"PASSWORD_LIFE_TIME", "PASSWORD_LOCK_TIME", "PASSWORD", "PASSWORD_REUSE_MAX", 
			"PASSWORD_REUSE_TIME", "PASSWORD_ROLLOVER_TIME", "PASSWORD_VERIFY_FUNCTION", 
			"PAST", "PATCH", "PATH", "PATH_PREFIX", "PATHS", "PATTERN", "PBL_HS_BEGIN", 
			"PBL_HS_END", "PCTFREE", "PCTINCREASE", "PCTTHRESHOLD", "PCTUSED", "PCTVERSION", 
			"PENDING", "PERCENT_FOUND", "PERCENT_ISOPEN", "PERCENT_NOTFOUND", "PERCENT_KEYWORD", 
			"PERCENT_RANKM", "PERCENT_ROWCOUNT", "PERCENT_ROWTYPE", "PERCENT_TYPE", 
			"PERFORMANCE", "PERIOD_KEYWORD", "PERMANENT", "PERMISSION", "PERMUTE", 
			"PER", "PFILE", "PHYSICAL", "PIKEY", "PIPELINED", "PIPE", "PIV_GB", "PIVOT", 
			"PIV_SSF", "PLACE_DISTINCT", "PLACE_GROUP_BY", "PLAN", "PLSCOPE_SETTINGS", 
			"PLS_INTEGER", "PLSQL_CCFLAGS", "PLSQL_CODE_TYPE", "PLSQL_DEBUG", "PLSQL_OPTIMIZE_LEVEL", 
			"PLSQL_WARNINGS", "PLUGGABLE", "PMEM", "POINT", "POLICY", "POOL_16K", 
			"POOL_2K", "POOL_32K", "POOL_4K", "POOL_8K", "POSITIVEN", "POSITIVE", 
			"POST_TRANSACTION", "POWERMULTISET_BY_CARDINALITY", "POWERMULTISET", 
			"POWER", "PQ_CONCURRENT_UNION", "PQ_DISTRIBUTE", "PQ_DISTRIBUTE_WINDOW", 
			"PQ_FILTER", "PQ_MAP", "PQ_NOMAP", "PQ_REPLICATE", "PQ_SKEW", "PRAGMA", 
			"PREBUILT", "PRECEDES", "PRECEDING", "PRECISION", "PRECOMPUTE_SUBQUERY", 
			"PREDICATE_REORDERS", "PRELOAD", "PREPARE", "PRESENTNNV", "PRESENT", 
			"PRESENTV", "PRESERVE_OID", "PRESERVE", "PRETTY", "PREVIOUS", "PREV", 
			"PRIMARY", "PRINTBLOBTOCLOB", "PRIORITY", "PRIOR", "PRIVATE", "PRIVATE_SGA", 
			"PRIVILEGED", "PRIVILEGE", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROCESS", 
			"PROFILE", "PROGRAM", "PROJECT", "PROPAGATE", "PROPERTY", "PROTECTED", 
			"PROTECTION", "PROTOCOL", "PROXY", "PRUNING", "PUBLIC", "PULL_PRED", 
			"PURGE", "PUSH_PRED", "PUSH_SUBQ", "PX_FAULT_TOLERANCE", "PX_GRANULE", 
			"PX_JOIN_FILTER", "QB_NAME", "QUARTER", "QUARTERS", "QUERY_BLOCK", "QUERY", 
			"QUEUE_CURR", "QUEUE", "QUEUE_ROWP", "QUIESCE", "QUORUM", "QUOTA", "QUOTAGROUP", 
			"RAISE", "RANDOM_LOCAL", "RANDOM", "RANGE", "RANKM", "RAPIDLY", "RAW", 
			"RAWTOHEX", "RAWTONHEX", "RBA", "RBO_OUTLINE", "RDBA", "READ", "READS", 
			"REALM", "REAL", "REBALANCE", "REBUILD", "RECORD", "RECORDS_PER_BLOCK", 
			"RECOVERABLE", "RECOVER", "RECOVERY", "RECYCLEBIN", "RECYCLE", "REDACTION", 
			"REDEFINE", "REDO", "REDUCED", "REDUNDANCY", "REF_CASCADE_CURSOR", "REFERENCED", 
			"REFERENCE", "REFERENCES", "REFERENCING", "REF", "REFRESH", "REFTOHEX", 
			"REGEXP_COUNT", "REGEXP_INSTR", "REGEXP_LIKE", "REGEXP_REPLACE", "REGEXP_SUBSTR", 
			"REGISTER", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", "REGR_INTERCEPT", 
			"REGR_R2", "REGR_SLOPE", "REGR_SXX", "REGR_SXY", "REGR_SYY", "REGULAR", 
			"REJECT", "REKEY", "RELATIONAL", "RELIES_ON", "RELOCATE", "RELY", "REMAINDER", 
			"REMOTE", "REMOTE_MAPPED", "REMOVE", "RENAME", "REPAIR", "REPEAT", "REPLACE", 
			"REPLICATION", "REQUIRED", "RESETLOGS", "RESET", "RESIZE", "RESOLVE", 
			"RESOLVER", "RESOURCE", "RESPECT", "RESTART", "RESTORE_AS_INTERVALS", 
			"RESTORE", "RESTRICT_ALL_REF_CONS", "RESTRICTED", "RESTRICT_REFERENCES", 
			"RESTRICT", "RESULT_CACHE", "RESULT", "RESUMABLE", "RESUME", "RETENTION", 
			"RETRY_ON_ROW_CHANGE", "RETURNING", "RETURN", "REUSE", "REVERSE", "REVOKE", 
			"REWRITE_OR_ERROR", "REWRITE", "RIGHT", "ROLE", "ROLESET", "ROLES", "ROLLBACK", 
			"ROLLING", "ROLLUP", "ROWDEPENDENCIES", "ROWID_MAPPING_TABLE", "ROWID", 
			"ROWIDTOCHAR", "ROWIDTONCHAR", "ROW_LENGTH", "ROWNUM", "ROW", "ROWS", 
			"RPAD", "RTRIM", "RULE", "RULES", "RUNNING", "SALT", "SAMPLE", "SAVE_AS_INTERVALS", 
			"SAVEPOINT", "SAVE", "SB4", "SCALE_ROWS", "SCALE", "SCAN_INSTANCES", 
			"SCAN", "SCHEDULER", "SCHEMACHECK", "SCHEMA", "SCN_ASCENDING", "SCN", 
			"SCOPE", "SCRUB", "SD_ALL", "SD_INHIBIT", "SDO_GEOM_MBR", "SDO_GEOMETRY", 
			"SD_SHOW", "SEARCH", "SECOND", "SECONDS", "SECRET", "SECUREFILE_DBA", 
			"SECUREFILE", "SECURITY", "SEED", "SEG_BLOCK", "SEG_FILE", "SEGMENT", 
			"SELECTIVITY", "SELECT", "SELF", "SEMIJOIN_DRIVER", "SEMIJOIN", "SEMI_TO_INNER", 
			"SEQUENCED", "SEQUENCE", "SEQUENTIAL", "SEQ", "SERIALIZABLE", "SERIALLY_REUSABLE", 
			"SERIAL", "SERVERERROR", "SERVICE_NAME_CONVERT", "SERVICE", "SERVICES", 
			"SESSION_CACHED_CURSORS", "SESSION", "SESSIONS_PER_USER", "SESSIONTIMEZONE", 
			"SESSIONTZNAME", "SET", "SETS", "SETTINGS", "SET_TO_JOIN", "SEVERE", 
			"SHARDSPACE", "SHARED_POOL", "SHARED", "SHARE", "SHARING", "SHELFLIFE", 
			"SHOW", "SHRINK", "SHUTDOWN", "SIBLINGS", "SID", "SITE", "SIGNAL_COMPONENT", 
			"SIGNAL_FUNCTION", "SIGN", "SIGNTYPE", "SIMPLE_INTEGER", "SIMPLE", "SINGLE", 
			"SINGLETASK", "SINH", "SIN", "SIZE", "SKIP_EXT_OPTIMIZER", "SKIP_", "SKIP_UNQ_UNUSABLE_IDX", 
			"SKIP_UNUSABLE_INDEXES", "SMALLFILE", "SMALLINT", "SNAPSHOT", "SOME", 
			"SORT", "SOUNDEX", "SOURCE_FILE_DIRECTORY", "SOURCE_FILE_NAME_CONVERT", 
			"SOURCE", "SPACE_KEYWORD", "SPECIFICATION", "SPFILE", "SPLIT", "SPREADSHEET", 
			"SQLDATA", "SQLERROR", "SQLLDR", "SQL", "SQL_MACRO", "SQL_TRACE", "SQL_TRANSLATION_PROFILE", 
			"SQRT", "STALE", "STANDALONE", "STANDARD", "STANDARD_HASH", "STANDBY_MAX_DATA_DELAY", 
			"STANDBYS", "STANDBY", "STAR", "STAR_TRANSFORMATION", "START", "STARTUP", 
			"STATEMENT_ID", "STATEMENT_QUEUING", "STATEMENTS", "STATEMENT", "STATE", 
			"STATIC", "STATISTICS", "STATS_BINOMIAL_TEST", "STATS_CROSSTAB", "STATS_F_TEST", 
			"STATS_KS_TEST", "STATS_MODE", "STATS_MW_TEST", "STATS_ONE_WAY_ANOVA", 
			"STATS_T_TEST_INDEP", "STATS_T_TEST_INDEPU", "STATS_T_TEST_ONE", "STATS_T_TEST_PAIRED", 
			"STATS_WSR_TEST", "STDDEV_POP", "STDDEV_SAMP", "STOP", "STORAGE", "STORE", 
			"STREAMS", "STREAM", "STRICT", "STRING", "STRIPE_COLUMNS", "STRIPE_WIDTH", 
			"STRIP", "STRUCTURE", "SUBMULTISET", "SUBPARTITION_REL", "SUBPARTITIONS", 
			"SUBPARTITION", "SUBQUERIES", "SUBQUERY_PRUNING", "SUBSCRIBE", "SUBSET", 
			"SUBSTITUTABLE", "SUBSTR2", "SUBSTR4", "SUBSTRB", "SUBSTRC", "SUBTYPE", 
			"SUCCESSFUL", "SUCCESS", "SUMMARY", "SUPPLEMENTAL", "SUSPEND", "SWAP_JOIN_INPUTS", 
			"SWITCHOVER", "SWITCH", "SYNCHRONOUS", "SYNC", "SYNONYM", "SYS", "SYSASM", 
			"SYS_AUDIT", "SYSAUX", "SYSBACKUP", "SYS_CHECKACL", "SYS_CHECK_PRIVILEGE", 
			"SYS_CONNECT_BY_PATH", "SYS_CONTEXT", "SYSDATE", "SYSDBA", "SYS_DBURIGEN", 
			"SYSDG", "SYS_DL_CURSOR", "SYS_DM_RXFORM_CHR", "SYS_DM_RXFORM_NUM", "SYS_DOM_COMPARE", 
			"SYS_DST_PRIM2SEC", "SYS_DST_SEC2PRIM", "SYS_ET_BFILE_TO_RAW", "SYS_ET_BLOB_TO_IMAGE", 
			"SYS_ET_IMAGE_TO_BLOB", "SYS_ET_RAW_TO_BFILE", "SYS_EXTPDTXT", "SYS_EXTRACT_UTC", 
			"SYS_FBT_INSDEL", "SYS_FILTER_ACLS", "SYS_FNMATCHES", "SYS_FNREPLACE", 
			"SYS_GET_ACLIDS", "SYS_GET_COL_ACLIDS", "SYS_GET_PRIVILEGES", "SYS_GETTOKENID", 
			"SYS_GETXTIVAL", "SYS_GUID", "SYSGUID", "SYSKM", "SYS_MAKE_XMLNODEID", 
			"SYS_MAKEXML", "SYS_MKXMLATTR", "SYS_MKXTI", "SYSOBJ", "SYS_OP_ADT2BIN", 
			"SYS_OP_ADTCONS", "SYS_OP_ALSCRVAL", "SYS_OP_ATG", "SYS_OP_BIN2ADT", 
			"SYS_OP_BITVEC", "SYS_OP_BL2R", "SYS_OP_BLOOM_FILTER_LIST", "SYS_OP_BLOOM_FILTER", 
			"SYS_OP_C2C", "SYS_OP_CAST", "SYS_OP_CEG", "SYS_OP_CL2C", "SYS_OP_COMBINED_HASH", 
			"SYS_OP_COMP", "SYS_OP_CONVERT", "SYS_OP_COUNTCHG", "SYS_OP_CSCONV", 
			"SYS_OP_CSCONVTEST", "SYS_OP_CSR", "SYS_OP_CSX_PATCH", "SYS_OP_CYCLED_SEQ", 
			"SYS_OP_DECOMP", "SYS_OP_DESCEND", "SYS_OP_DISTINCT", "SYS_OP_DRA", "SYS_OP_DUMP", 
			"SYS_OP_DV_CHECK", "SYS_OP_ENFORCE_NOT_NULL", "SYSOPER", "SYS_OP_EXTRACT", 
			"SYS_OP_GROUPING", "SYS_OP_GUID", "SYS_OP_HASH", "SYS_OP_IIX", "SYS_OP_ITR", 
			"SYS_OP_KEY_VECTOR_CREATE", "SYS_OP_KEY_VECTOR_FILTER_LIST", "SYS_OP_KEY_VECTOR_FILTER", 
			"SYS_OP_KEY_VECTOR_SUCCEEDED", "SYS_OP_KEY_VECTOR_USE", "SYS_OP_LBID", 
			"SYS_OP_LOBLOC2BLOB", "SYS_OP_LOBLOC2CLOB", "SYS_OP_LOBLOC2ID", "SYS_OP_LOBLOC2NCLOB", 
			"SYS_OP_LOBLOC2TYP", "SYS_OP_LSVI", "SYS_OP_LVL", "SYS_OP_MAKEOID", "SYS_OP_MAP_NONNULL", 
			"SYS_OP_MSR", "SYS_OP_NICOMBINE", "SYS_OP_NIEXTRACT", "SYS_OP_NII", "SYS_OP_NIX", 
			"SYS_OP_NOEXPAND", "SYS_OP_NTCIMG", "SYS_OP_NUMTORAW", "SYS_OP_OIDVALUE", 
			"SYS_OP_OPNSIZE", "SYS_OP_PAR_1", "SYS_OP_PARGID_1", "SYS_OP_PARGID", 
			"SYS_OP_PAR", "SYS_OP_PART_ID", "SYS_OP_PIVOT", "SYS_OP_R2O", "SYS_OP_RAWTONUM", 
			"SYS_OP_RDTM", "SYS_OP_REF", "SYS_OP_RMTD", "SYS_OP_ROWIDTOOBJ", "SYS_OP_RPB", 
			"SYS_OPTLOBPRBSC", "SYS_OP_TOSETID", "SYS_OP_TPR", "SYS_OP_TRTB", "SYS_OPTXICMP", 
			"SYS_OPTXQCASTASNQ", "SYS_OP_UNDESCEND", "SYS_OP_VECAND", "SYS_OP_VECBIT", 
			"SYS_OP_VECOR", "SYS_OP_VECXOR", "SYS_OP_VERSION", "SYS_OP_VREF", "SYS_OP_VVD", 
			"SYS_OP_XMLCONS_FOR_CSX", "SYS_OP_XPTHATG", "SYS_OP_XPTHIDX", "SYS_OP_XPTHOP", 
			"SYS_OP_XTXT2SQLT", "SYS_OP_ZONE_ID", "SYS_ORDERKEY_DEPTH", "SYS_ORDERKEY_MAXCHILD", 
			"SYS_ORDERKEY_PARENT", "SYS_PARALLEL_TXN", "SYS_PATHID_IS_ATTR", "SYS_PATHID_IS_NMSPC", 
			"SYS_PATHID_LASTNAME", "SYS_PATHID_LASTNMSPC", "SYS_PATH_REVERSE", "SYS_PXQEXTRACT", 
			"SYS_RAW_TO_XSID", "SYS_RID_ORDER", "SYS_ROW_DELTA", "SYS_SC_2_XMLT", 
			"SYS_SYNRCIREDO", "SYSTEM_DEFINED", "SYSTEM", "SYSTIMESTAMP", "SYS_TYPEID", 
			"SYS_UMAKEXML", "SYS_XMLANALYZE", "SYS_XMLCONTAINS", "SYS_XMLCONV", "SYS_XMLEXNSURI", 
			"SYS_XMLGEN", "SYS_XMLI_LOC_ISNODE", "SYS_XMLI_LOC_ISTEXT", "SYS_XMLINSTR", 
			"SYS_XMLLOCATOR_GETSVAL", "SYS_XMLNODEID_GETCID", "SYS_XMLNODEID_GETLOCATOR", 
			"SYS_XMLNODEID_GETOKEY", "SYS_XMLNODEID_GETPATHID", "SYS_XMLNODEID_GETPTRID", 
			"SYS_XMLNODEID_GETRID", "SYS_XMLNODEID_GETSVAL", "SYS_XMLNODEID_GETTID", 
			"SYS_XMLNODEID", "SYS_XMLT_2_SC", "SYS_XMLTRANSLATE", "SYS_XMLTYPE2SQL", 
			"SYS_XQ_ASQLCNV", "SYS_XQ_ATOMCNVCHK", "SYS_XQBASEURI", "SYS_XQCASTABLEERRH", 
			"SYS_XQCODEP2STR", "SYS_XQCODEPEQ", "SYS_XQCON2SEQ", "SYS_XQCONCAT", 
			"SYS_XQDELETE", "SYS_XQDFLTCOLATION", "SYS_XQDOC", "SYS_XQDOCURI", "SYS_XQDURDIV", 
			"SYS_XQED4URI", "SYS_XQENDSWITH", "SYS_XQERRH", "SYS_XQERR", "SYS_XQESHTMLURI", 
			"SYS_XQEXLOBVAL", "SYS_XQEXSTWRP", "SYS_XQEXTRACT", "SYS_XQEXTRREF", 
			"SYS_XQEXVAL", "SYS_XQFB2STR", "SYS_XQFNBOOL", "SYS_XQFNCMP", "SYS_XQFNDATIM", 
			"SYS_XQFNLNAME", "SYS_XQFNNM", "SYS_XQFNNSURI", "SYS_XQFNPREDTRUTH", 
			"SYS_XQFNQNM", "SYS_XQFNROOT", "SYS_XQFORMATNUM", "SYS_XQFTCONTAIN", 
			"SYS_XQFUNCR", "SYS_XQGETCONTENT", "SYS_XQINDXOF", "SYS_XQINSERT", "SYS_XQINSPFX", 
			"SYS_XQIRI2URI", "SYS_XQLANG", "SYS_XQLLNMFRMQNM", "SYS_XQMKNODEREF", 
			"SYS_XQNILLED", "SYS_XQNODENAME", "SYS_XQNORMSPACE", "SYS_XQNORMUCODE", 
			"SYS_XQ_NRNG", "SYS_XQNSP4PFX", "SYS_XQNSPFRMQNM", "SYS_XQPFXFRMQNM", 
			"SYS_XQ_PKSQL2XML", "SYS_XQPOLYABS", "SYS_XQPOLYADD", "SYS_XQPOLYCEL", 
			"SYS_XQPOLYCSTBL", "SYS_XQPOLYCST", "SYS_XQPOLYDIV", "SYS_XQPOLYFLR", 
			"SYS_XQPOLYMOD", "SYS_XQPOLYMUL", "SYS_XQPOLYRND", "SYS_XQPOLYSQRT", 
			"SYS_XQPOLYSUB", "SYS_XQPOLYUMUS", "SYS_XQPOLYUPLS", "SYS_XQPOLYVEQ", 
			"SYS_XQPOLYVGE", "SYS_XQPOLYVGT", "SYS_XQPOLYVLE", "SYS_XQPOLYVLT", "SYS_XQPOLYVNE", 
			"SYS_XQREF2VAL", "SYS_XQRENAME", "SYS_XQREPLACE", "SYS_XQRESVURI", "SYS_XQRNDHALF2EVN", 
			"SYS_XQRSLVQNM", "SYS_XQRYENVPGET", "SYS_XQRYVARGET", "SYS_XQRYWRP", 
			"SYS_XQSEQ2CON4XC", "SYS_XQSEQ2CON", "SYS_XQSEQDEEPEQ", "SYS_XQSEQINSB", 
			"SYS_XQSEQRM", "SYS_XQSEQRVS", "SYS_XQSEQSUB", "SYS_XQSEQTYPMATCH", "SYS_XQSTARTSWITH", 
			"SYS_XQSTATBURI", "SYS_XQSTR2CODEP", "SYS_XQSTRJOIN", "SYS_XQSUBSTRAFT", 
			"SYS_XQSUBSTRBEF", "SYS_XQTOKENIZE", "SYS_XQTREATAS", "SYS_XQ_UPKXML2SQL", 
			"SYS_XQXFORM", "SYS_XSID_TO_RAW", "SYS_ZMAP_FILTER", "SYS_ZMAP_REFRESH", 
			"T_LETTER", "TABLE_LOOKUP_BY_NL", "TABLESPACE_NO", "TABLESPACE", "TABLES", 
			"TABLE_STATS", "TABLE", "TABNO", "TAG", "TANH", "TAN", "TBLORIDXPARTNUM", 
			"TEMPFILE", "TEMPLATE", "TEMPORARY", "TEMP_TABLE", "TEST", "TEXT", "THAN", 
			"THEN", "THE", "THREAD", "THROUGH", "TIER", "TIES", "TIMEOUT", "TIMESTAMP_LTZ_UNCONSTRAINED", 
			"TIMESTAMP", "TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", 
			"TIMES", "TIME", "TIMEZONE", "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
			"TIMEZONE_OFFSET", "TIMEZONE_REGION", "TIME_ZONE", "TIMING", "TIV_GB", 
			"TIV_SSF", "TO_ACLID", "TO_BINARY_DOUBLE", "TO_BINARY_FLOAT", "TO_BLOB", 
			"TO_CLOB", "TO_DSINTERVAL", "TO_LOB", "TO_MULTI_BYTE", "TO_NCHAR", "TO_NCLOB", 
			"TO_NUMBER", "TOPLEVEL", "TO_SINGLE_BYTE", "TO_TIMESTAMP", "TO_TIMESTAMP_TZ", 
			"TO_TIME", "TO_TIME_TZ", "TO", "TO_YMINTERVAL", "TRACE", "TRACING", "TRACKING", 
			"TRAILING", "TRANSACTION", "TRANSFORM", "TRANSFORM_DISTINCT_AGG", "TRANSITIONAL", 
			"TRANSITION", "TRANSLATE", "TRANSLATION", "TREAT", "TRIGGERS", "TRIGGER", 
			"TRUE", "TRUNCATE", "TRUNC", "TRUSTED", "TRUST", "TUNING", "TX", "TYPES", 
			"TYPE", "TZ_OFFSET", "UB2", "UBA", "UCS2", "UID", "UNARCHIVED", "UNBOUNDED", 
			"UNBOUND", "UNCONDITIONAL", "UNDER", "UNDO", "UNDROP", "UNIFORM", "UNION", 
			"UNIQUE", "UNISTR", "UNLIMITED", "UNLOAD", "UNLOCK", "UNMATCHED", "UNNEST_INNERJ_DISTINCT_VIEW", 
			"UNNEST_NOSEMIJ_NODISTINCTVIEW", "UNNEST_SEMIJ_VIEW", "UNNEST", "UNPACKED", 
			"UNPIVOT", "UNPLUG", "UNPROTECTED", "UNQUIESCE", "UNRECOVERABLE", "UNRESTRICTED", 
			"UNSUBSCRIBE", "UNTIL", "UNUSABLE", "UNUSED", "UPDATABLE", "UPDATED", 
			"UPDATE", "UPDATEXML", "UPD_INDEXES", "UPD_JOININDEX", "UPGRADE", "UPPER", 
			"UPSERT", "UROWID", "USABLE", "USAGE", "USE_ANTI", "USE_CONCAT", "USE_CUBE", 
			"USE_HASH_AGGREGATION", "USE_HASH_GBY_FOR_PUSHDOWN", "USE_HASH", "USE_HIDDEN_PARTITIONS", 
			"USE_INVISIBLE_INDEXES", "USE_MERGE_CARTESIAN", "USE_MERGE", "USE_NL", 
			"USE_NL_WITH_INDEX", "USE_PRIVATE_OUTLINES", "USER_DATA", "USER_DEFINED", 
			"USERENV", "USERGROUP", "USER_RECYCLEBIN", "USERS", "USER_TABLESPACES", 
			"USER", "USE_SEMI", "USE_STORED_OUTLINES", "USE_TTT_FOR_GSETS", "USE", 
			"USE_VECTOR_AGGREGATION", "USE_WEAK_NAME_RESL", "USING_NO_EXPAND", "USING", 
			"UTF16BE", "UTF16LE", "UTF32", "UTF8", "V1", "V2", "VALIDATE", "VALIDATE_CONVERSION", 
			"VALIDATION", "VALID_TIME_END", "VALUES", "VALUE", "VARCHAR2", "VARCHAR", 
			"VARIABLE", "VAR_POP", "VARRAYS", "VARRAY", "VAR_SAMP", "VARYING", "VECTOR_READ_TRACE", 
			"VECTOR_READ", "VECTOR_TRANSFORM_DIMS", "VECTOR_TRANSFORM_FACT", "VECTOR_TRANSFORM", 
			"VERIFIER", "VERIFY", "VERSIONING", "VERSIONS_ENDSCN", "VERSIONS_ENDTIME", 
			"VERSIONS_OPERATION", "VERSIONS_STARTSCN", "VERSIONS_STARTTIME", "VERSIONS", 
			"VERSIONS_XID", "VERSION", "VIEW", "VIOLATION", "VIRTUAL", "VISIBILITY", 
			"VISIBLE", "VOLUME", "VSIZE", "WAIT", "WALLET", "WARNING", "WEEKS", "WEEK", 
			"WELLFORMED", "WHENEVER", "WHEN", "WHERE", "WHILE", "WHITESPACE", "WIDTH_BUCKET", 
			"WITHIN", "WITHOUT", "WITH_PLSQL", "WITH", "WORK", "WRAPPED", "WRAPPER", 
			"WRITE", "XDB_FASTPATH_INSERT", "XDB", "X_DYN_PRUNE", "XID", "XML2OBJECT", 
			"XMLAGG", "XMLATTRIBUTES", "XMLCAST", "XMLCDATA", "XMLCOLATTVAL", "XMLCOMMENT", 
			"XMLCONCAT", "XMLDIFF", "XML_DML_RWT_STMT", "XMLELEMENT", "XMLEXISTS2", 
			"XMLEXISTS", "XMLFOREST", "XMLINDEX", "XMLINDEX_REWRITE_IN_SELECT", "XMLINDEX_REWRITE", 
			"XMLINDEX_SEL_IDX_TBL", "XMLISNODE", "XMLISVALID", "XMLNAMESPACES", "XMLPARSE", 
			"XMLPATCH", "XMLPI", "XMLQUERYVAL", "XMLQUERY", "XMLROOT", "XMLSCHEMA", 
			"XMLSERIALIZE", "XMLTABLE", "XMLTRANSFORMBLOB", "XMLTRANSFORM", "XMLTYPE", 
			"XML", "XPATHTABLE", "XS_SYS_CONTEXT", "XS", "XTRANSPORT", "YEARS", "YEAR", 
			"YEAROFWEEK", "YES", "YMINTERVAL_UNCONSTRAINED", "ZONEMAP", "ZONE", "PREDICTION", 
			"PREDICTION_BOUNDS", "PREDICTION_COST", "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", 
			"PREDICTION_SET", "BLOCKCHAIN", "COLLATE", "COLLATION", "DEFINITION", 
			"DUPLICATED", "EXTENDED", "HASHING", "IDLE", "IMMUTABLE", "ORACLE_DATAPUMP", 
			"ORACLE_HDFS", "ORACLE_HIVE", "ORACLE_LOADER", "SHA2_512_Q", "SHARDED", 
			"V1_Q", "ISOLATE", "ROOT", "UNITE", "ALGORITHM", "CUME_DIST", "DENSE_RANK", 
			"LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", 
			"AVG", "CORR", "COVAR_", "DECODE", "LAG", "LAG_DIFF", "LAG_DIFF_PERCENT", 
			"LEAD", "MAX", "MEDIAN", "MEMOPTIMIZE", "MIN", "NTILE", "NVL", "RATIO_TO_REPORT", 
			"REGR_", "ROUND", "ROW_NUMBER", "SUBSTR", "TO_CHAR", "TRIM", "SUM", "STDDEV", 
			"VAR_", "VARIANCE", "LEAST", "GREATEST", "TO_DATE", "JAR", "NATIONAL_CHAR_STRING_LIT", 
			"BIT_STRING_LIT", "HEX_STRING_LIT", "DOUBLE_PERIOD", "PERIOD", "UNSIGNED_INTEGER", 
			"APPROXIMATE_NUM_LIT", "CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", 
			"LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", "PLUS_SIGN", 
			"MINUS_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", "ASSIGN_OP", "HASH_OP", 
			"SQ", "BINDVAR", "NOT_EQUAL_OP", "CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", 
			"EXCLAMATION_OPERATOR_PART", "GREATER_THAN_OP", "LESS_THAN_OP", "COLON", 
			"SEMICOLON", "BAR", "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", "INTRODUCER", 
			"SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "REMARK_COMMENT", "PROMPT_MESSAGE", 
			"START_CMD", "REGULAR_ID", "SPACES"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "PlSqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public PlSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sql_scriptContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(PlSqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(PlSqlParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(PlSqlParser.SEMICOLON, i);
		}
		public Sql_scriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_script; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSql_script(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSql_script(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSql_script(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_scriptContext sql_script() throws RecognitionException {
		Sql_scriptContext _localctx = new Sql_scriptContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_sql_script);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(260);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9291010693660674L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1126037379612685L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -2323857682634637313L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9007199254740993L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -257L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -281474985164801L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -9288679063289921L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & -281474977235137L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & -1152921504606846977L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1153203254507601937L) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & -281475110928385L) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & -294649857L) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & -9007207844675585L) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & -4611686018427387905L) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & -140737488879617L) != 0) || ((((_la - 960)) & ~0x3f) == 0 && ((1L << (_la - 960)) & -562949953421313L) != 0) || ((((_la - 1024)) & ~0x3f) == 0 && ((1L << (_la - 1024)) & -1L) != 0) || ((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & -144119586122366977L) != 0) || ((((_la - 1152)) & ~0x3f) == 0 && ((1L << (_la - 1152)) & -70379482644485L) != 0) || ((((_la - 1216)) & ~0x3f) == 0 && ((1L << (_la - 1216)) & -274877915649L) != 0) || ((((_la - 1280)) & ~0x3f) == 0 && ((1L << (_la - 1280)) & -4298752257L) != 0) || ((((_la - 1344)) & ~0x3f) == 0 && ((1L << (_la - 1344)) & -33554433L) != 0) || ((((_la - 1408)) & ~0x3f) == 0 && ((1L << (_la - 1408)) & -144115188075855873L) != 0) || ((((_la - 1472)) & ~0x3f) == 0 && ((1L << (_la - 1472)) & -1073743873L) != 0) || ((((_la - 1536)) & ~0x3f) == 0 && ((1L << (_la - 1536)) & -9007203549708289L) != 0) || ((((_la - 1600)) & ~0x3f) == 0 && ((1L << (_la - 1600)) & -17592186044673L) != 0) || ((((_la - 1664)) & ~0x3f) == 0 && ((1L << (_la - 1664)) & -274877906945L) != 0) || ((((_la - 1728)) & ~0x3f) == 0 && ((1L << (_la - 1728)) & -1L) != 0) || ((((_la - 1792)) & ~0x3f) == 0 && ((1L << (_la - 1792)) & -1L) != 0) || ((((_la - 1856)) & ~0x3f) == 0 && ((1L << (_la - 1856)) & -1L) != 0) || ((((_la - 1920)) & ~0x3f) == 0 && ((1L << (_la - 1920)) & -1L) != 0) || ((((_la - 1984)) & ~0x3f) == 0 && ((1L << (_la - 1984)) & -288230378299195393L) != 0) || ((((_la - 2048)) & ~0x3f) == 0 && ((1L << (_la - 2048)) & -12884901889L) != 0) || ((((_la - 2112)) & ~0x3f) == 0 && ((1L << (_la - 2112)) & -2199023255553L) != 0) || ((((_la - 2176)) & ~0x3f) == 0 && ((1L << (_la - 2176)) & -281477158010889L) != 0) || ((((_la - 2240)) & ~0x3f) == 0 && ((1L << (_la - 2240)) & -27021683663569025L) != 0) || ((((_la - 2304)) & ~0x3f) == 0 && ((1L << (_la - 2304)) & 36591746974617599L) != 0)) {
				{
				{
				{
				setState(254);
				unit_statement();
				}
				setState(256);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEMICOLON) {
					{
					setState(255);
					match(SEMICOLON);
					}
				}

				}
				}
				setState(262);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(263);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unit_statementContext extends ParserRuleContext {
		public Anonymous_bodyContext anonymous_body() {
			return getRuleContext(Anonymous_bodyContext.class,0);
		}
		public Truncate_table_blockContext truncate_table_block() {
			return getRuleContext(Truncate_table_blockContext.class,0);
		}
		public Call_statementContext call_statement() {
			return getRuleContext(Call_statementContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Create_table_asContext create_table_as() {
			return getRuleContext(Create_table_asContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Set_bleckContext set_bleck() {
			return getRuleContext(Set_bleckContext.class,0);
		}
		public Select_blockContext select_block() {
			return getRuleContext(Select_blockContext.class,0);
		}
		public Insert_blockContext insert_block() {
			return getRuleContext(Insert_blockContext.class,0);
		}
		public Update_blockContext update_block() {
			return getRuleContext(Update_blockContext.class,0);
		}
		public Delete_blockContext delete_block() {
			return getRuleContext(Delete_blockContext.class,0);
		}
		public Merge_blockContext merge_block() {
			return getRuleContext(Merge_blockContext.class,0);
		}
		public Truncate_tableContext truncate_table() {
			return getRuleContext(Truncate_tableContext.class,0);
		}
		public Rule_on_columnContext rule_on_column() {
			return getRuleContext(Rule_on_columnContext.class,0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitUnit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unit_statementContext unit_statement() throws RecognitionException {
		Unit_statementContext _localctx = new Unit_statementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_unit_statement);
		try {
			setState(280);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(265);
				anonymous_body();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(266);
				truncate_table_block();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(267);
				call_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(268);
				create_procedure_body();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(269);
				create_function_body();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(270);
				create_table_as();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(271);
				create_table();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(272);
				set_bleck();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(273);
				select_block();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(274);
				insert_block();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(275);
				update_block();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(276);
				delete_block();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(277);
				merge_block();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(278);
				truncate_table();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(279);
				rule_on_column();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_bodyContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitFunction_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_bodyContext function_body() throws RecognitionException {
		Function_bodyContext _localctx = new Function_bodyContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(282);
			match(FUNCTION);
			setState(283);
			identifier();
			setState(295);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(284);
				match(LEFT_PAREN);
				setState(285);
				parameter();
				setState(290);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(286);
					match(COMMA);
					setState(287);
					parameter();
					}
					}
					setState(292);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(293);
				match(RIGHT_PAREN);
				}
			}

			setState(297);
			match(RETURN);
			setState(298);
			type_spec();
			setState(299);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			{
			setState(301);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				setState(300);
				match(DECLARE);
				}
				break;
			}
			setState(304);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				setState(303);
				seq_of_declare_specs();
				}
				break;
			}
			setState(306);
			body();
			}
			setState(308);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_procedure_bodyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_procedure_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_procedure_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCreate_procedure_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_procedure_bodyContext create_procedure_body() throws RecognitionException {
		Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_create_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(310);
			match(CREATE);
			setState(311);
			match(PROCEDURE);
			setState(312);
			procedure_name();
			setState(324);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(313);
				match(LEFT_PAREN);
				setState(314);
				parameter();
				setState(319);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(315);
					match(COMMA);
					setState(316);
					parameter();
					}
					}
					setState(321);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(322);
				match(RIGHT_PAREN);
				}
			}

			setState(326);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			{
			setState(328);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				setState(327);
				match(DECLARE);
				}
				break;
			}
			setState(331);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				setState(330);
				seq_of_declare_specs();
				}
				break;
			}
			setState(333);
			body();
			}
			setState(335);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_function_bodyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public Function_bodyContext function_body() {
			return getRuleContext(Function_bodyContext.class,0);
		}
		public Create_function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_function_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_function_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCreate_function_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_function_bodyContext create_function_body() throws RecognitionException {
		Create_function_bodyContext _localctx = new Create_function_bodyContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_create_function_body);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(337);
			match(CREATE);
			setState(338);
			function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Anonymous_bodyContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public Anonymous_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anonymous_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAnonymous_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAnonymous_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAnonymous_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Anonymous_bodyContext anonymous_body() throws RecognitionException {
		Anonymous_bodyContext _localctx = new Anonymous_bodyContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_anonymous_body);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(341);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				setState(340);
				match(DECLARE);
				}
				break;
			}
			setState(344);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				setState(343);
				seq_of_declare_specs();
				}
				break;
			}
			setState(346);
			body();
			setState(347);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_table_asContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode SELECT() { return getToken(PlSqlParser.SELECT, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Create_table_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_table_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_table_as(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCreate_table_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_asContext create_table_as() throws RecognitionException {
		Create_table_asContext _localctx = new Create_table_asContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_create_table_as);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(349);
			match(CREATE);
			setState(350);
			match(TABLE);
			setState(351);
			table_name();
			setState(352);
			match(AS);
			setState(353);
			match(SELECT);
			setState(357);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,13,_ctx);
			while ( _alt!=1 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					setState(354);
					matchWildcard();
					}
					} 
				}
				setState(359);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,13,_ctx);
			}
			setState(360);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_table_as2Context extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode SELECT() { return getToken(PlSqlParser.SELECT, 0); }
		public Create_table_as2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_as2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_table_as2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_table_as2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCreate_table_as2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_as2Context create_table_as2() throws RecognitionException {
		Create_table_as2Context _localctx = new Create_table_as2Context(_ctx, getState());
		enterRule(_localctx, 14, RULE_create_table_as2);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(362);
			match(CREATE);
			setState(363);
			match(TABLE);
			setState(364);
			table_name();
			setState(365);
			match(AS);
			setState(366);
			match(SELECT);
			setState(370);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,14,_ctx);
			while ( _alt!=1 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					setState(367);
					matchWildcard();
					}
					} 
				}
				setState(372);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,14,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Relational_tableContext relational_table() {
			return getRuleContext(Relational_tableContext.class,0);
		}
		public Create_withContext create_with() {
			return getRuleContext(Create_withContext.class,0);
		}
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCreate_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_create_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(373);
			match(CREATE);
			setState(374);
			match(TABLE);
			setState(375);
			table_name();
			{
			setState(376);
			relational_table();
			}
			{
			setState(377);
			create_with();
			}
			setState(378);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_withContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Create_optionsContext create_options() {
			return getRuleContext(Create_optionsContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Create_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_with; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_with(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_with(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCreate_with(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_withContext create_with() throws RecognitionException {
		Create_withContext _localctx = new Create_withContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_create_with);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(380);
			match(WITH);
			setState(381);
			match(LEFT_PAREN);
			setState(382);
			create_options();
			setState(383);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_optionsContext extends ParserRuleContext {
		public List<Option_Context> option_() {
			return getRuleContexts(Option_Context.class);
		}
		public Option_Context option_(int i) {
			return getRuleContext(Option_Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Create_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCreate_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_optionsContext create_options() throws RecognitionException {
		Create_optionsContext _localctx = new Create_optionsContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_create_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(385);
			option_();
			setState(390);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(386);
				match(COMMA);
				setState(387);
				option_();
				}
				}
				setState(392);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Option_Context extends ParserRuleContext {
		public List<TerminalNode> CHAR_STRING() { return getTokens(PlSqlParser.CHAR_STRING); }
		public TerminalNode CHAR_STRING(int i) {
			return getToken(PlSqlParser.CHAR_STRING, i);
		}
		public TerminalNode EQUALS_OP() { return getToken(PlSqlParser.EQUALS_OP, 0); }
		public Option_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOption_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOption_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Option_Context option_() throws RecognitionException {
		Option_Context _localctx = new Option_Context(_ctx, getState());
		enterRule(_localctx, 22, RULE_option_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(393);
			match(CHAR_STRING);
			setState(394);
			match(EQUALS_OP);
			setState(395);
			match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_nameContext table_name() throws RecognitionException {
		Table_nameContext _localctx = new Table_nameContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_table_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(397);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Relational_tableContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Relational_propertyContext> relational_property() {
			return getRuleContexts(Relational_propertyContext.class);
		}
		public Relational_propertyContext relational_property(int i) {
			return getRuleContext(Relational_propertyContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Relational_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRelational_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRelational_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRelational_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_tableContext relational_table() throws RecognitionException {
		Relational_tableContext _localctx = new Relational_tableContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_relational_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(410);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(399);
				match(LEFT_PAREN);
				setState(400);
				relational_property();
				setState(405);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(401);
					match(COMMA);
					setState(402);
					relational_property();
					}
					}
					setState(407);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(408);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Relational_propertyContext extends ParserRuleContext {
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public Relational_propertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_property; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRelational_property(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRelational_property(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRelational_property(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_propertyContext relational_property() throws RecognitionException {
		Relational_propertyContext _localctx = new Relational_propertyContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_relational_property);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(412);
			column_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_definitionContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode SORT() { return getToken(PlSqlParser.SORT, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Identity_clauseContext identity_clause() {
			return getRuleContext(Identity_clauseContext.class,0);
		}
		public TerminalNode ENCRYPT() { return getToken(PlSqlParser.ENCRYPT, 0); }
		public Encryption_specContext encryption_spec() {
			return getRuleContext(Encryption_specContext.class,0);
		}
		public TerminalNode VISIBLE() { return getToken(PlSqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(PlSqlParser.INVISIBLE, 0); }
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PlSqlParser.COLLATE, 0); }
		public Column_collation_nameContext column_collation_name() {
			return getRuleContext(Column_collation_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode NULL_() { return getToken(PlSqlParser.NULL_, 0); }
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitColumn_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitColumn_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(414);
			column_name();
			setState(423);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				setState(417);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
				case 1:
					{
					setState(415);
					datatype();
					}
					break;
				case 2:
					{
					setState(416);
					regular_id();
					}
					break;
				}
				setState(421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(419);
					match(COLLATE);
					setState(420);
					column_collation_name();
					}
				}

				}
				break;
			}
			setState(426);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SORT) {
				{
				setState(425);
				match(SORT);
				}
			}

			setState(429);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INVISIBLE || _la==VISIBLE) {
				{
				setState(428);
				_la = _input.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(438);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				{
				setState(431);
				match(DEFAULT);
				setState(434);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(432);
					match(ON);
					setState(433);
					match(NULL_);
					}
				}

				setState(436);
				expression();
				}
				break;
			case GENERATED:
				{
				setState(437);
				identity_clause();
				}
				break;
			case ENCRYPT:
			case RIGHT_PAREN:
			case COMMA:
				break;
			default:
				break;
			}
			setState(442);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENCRYPT) {
				{
				setState(440);
				match(ENCRYPT);
				setState(441);
				encryption_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_collation_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Column_collation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_collation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterColumn_collation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitColumn_collation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitColumn_collation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_collation_nameContext column_collation_name() throws RecognitionException {
		Column_collation_nameContext _localctx = new Column_collation_nameContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_column_collation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(444);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Identity_clauseContext extends ParserRuleContext {
		public TerminalNode GENERATED() { return getToken(PlSqlParser.GENERATED, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(PlSqlParser.IDENTITY, 0); }
		public TerminalNode ALWAYS() { return getToken(PlSqlParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Identity_options_parenthesesContext identity_options_parentheses() {
			return getRuleContext(Identity_options_parenthesesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode NULL_() { return getToken(PlSqlParser.NULL_, 0); }
		public Identity_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identity_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIdentity_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIdentity_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitIdentity_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Identity_clauseContext identity_clause() throws RecognitionException {
		Identity_clauseContext _localctx = new Identity_clauseContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_identity_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(446);
			match(GENERATED);
			setState(454);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALWAYS:
				{
				setState(447);
				match(ALWAYS);
				}
				break;
			case BY:
				{
				setState(448);
				match(BY);
				setState(449);
				match(DEFAULT);
				setState(452);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(450);
					match(ON);
					setState(451);
					match(NULL_);
					}
				}

				}
				break;
			case AS:
				break;
			default:
				break;
			}
			setState(456);
			match(AS);
			setState(457);
			match(IDENTITY);
			setState(459);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CACHE || _la==CYCLE || _la==INCREMENT || _la==MAXVALUE || _la==MINVALUE || ((((_la - 1002)) & ~0x3f) == 0 && ((1L << (_la - 1002)) & 5066549580922881L) != 0) || _la==NOORDER || _la==ORDER || _la==START || _la==LEFT_PAREN) {
				{
				setState(458);
				identity_options_parentheses();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Identity_options_parenthesesContext extends ParserRuleContext {
		public List<Identity_optionsContext> identity_options() {
			return getRuleContexts(Identity_optionsContext.class);
		}
		public Identity_optionsContext identity_options(int i) {
			return getRuleContext(Identity_optionsContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Identity_options_parenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identity_options_parentheses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIdentity_options_parentheses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIdentity_options_parentheses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitIdentity_options_parentheses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Identity_options_parenthesesContext identity_options_parentheses() throws RecognitionException {
		Identity_options_parenthesesContext _localctx = new Identity_options_parenthesesContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_identity_options_parentheses);
		int _la;
		try {
			setState(474);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case MAXVALUE:
			case MINVALUE:
			case NOCACHE:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOORDER:
			case ORDER:
			case START:
				enterOuterAlt(_localctx, 1);
				{
				setState(462); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(461);
					identity_options();
					}
					}
					setState(464); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CACHE || _la==CYCLE || _la==INCREMENT || _la==MAXVALUE || _la==MINVALUE || ((((_la - 1002)) & ~0x3f) == 0 && ((1L << (_la - 1002)) & 5066549580922881L) != 0) || _la==NOORDER || _la==ORDER || _la==START );
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(466);
				match(LEFT_PAREN);
				setState(468); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(467);
					identity_options();
					}
					}
					setState(470); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CACHE || _la==CYCLE || _la==INCREMENT || _la==MAXVALUE || _la==MINVALUE || ((((_la - 1002)) & ~0x3f) == 0 && ((1L << (_la - 1002)) & 5066549580922881L) != 0) || _la==NOORDER || _la==ORDER || _la==START );
				setState(472);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Identity_optionsContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(PlSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(PlSqlParser.NOMAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(PlSqlParser.NOMINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public TerminalNode CACHE() { return getToken(PlSqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(PlSqlParser.NOCACHE, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode NOORDER() { return getToken(PlSqlParser.NOORDER, 0); }
		public Identity_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identity_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIdentity_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIdentity_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitIdentity_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Identity_optionsContext identity_options() throws RecognitionException {
		Identity_optionsContext _localctx = new Identity_optionsContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_identity_options);
		try {
			setState(499);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case START:
				enterOuterAlt(_localctx, 1);
				{
				setState(476);
				match(START);
				setState(477);
				match(WITH);
				setState(481);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
					{
					setState(478);
					numeric();
					}
					break;
				case LIMIT:
					{
					setState(479);
					match(LIMIT);
					setState(480);
					match(VALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case INCREMENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(483);
				match(INCREMENT);
				setState(484);
				match(BY);
				setState(485);
				numeric();
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(486);
				match(MAXVALUE);
				setState(487);
				numeric();
				}
				break;
			case NOMAXVALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(488);
				match(NOMAXVALUE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(489);
				match(MINVALUE);
				setState(490);
				numeric();
				}
				break;
			case NOMINVALUE:
				enterOuterAlt(_localctx, 6);
				{
				setState(491);
				match(NOMINVALUE);
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(492);
				match(CYCLE);
				}
				break;
			case NOCYCLE:
				enterOuterAlt(_localctx, 8);
				{
				setState(493);
				match(NOCYCLE);
				}
				break;
			case CACHE:
				enterOuterAlt(_localctx, 9);
				{
				setState(494);
				match(CACHE);
				setState(495);
				numeric();
				}
				break;
			case NOCACHE:
				enterOuterAlt(_localctx, 10);
				{
				setState(496);
				match(NOCACHE);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 11);
				{
				setState(497);
				match(ORDER);
				}
				break;
			case NOORDER:
				enterOuterAlt(_localctx, 12);
				{
				setState(498);
				match(NOORDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Encryption_specContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public List<TerminalNode> CHAR_STRING() { return getTokens(PlSqlParser.CHAR_STRING); }
		public TerminalNode CHAR_STRING(int i) {
			return getToken(PlSqlParser.CHAR_STRING, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(PlSqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode REGULAR_ID() { return getToken(PlSqlParser.REGULAR_ID, 0); }
		public TerminalNode SALT() { return getToken(PlSqlParser.SALT, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public Encryption_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encryption_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterEncryption_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitEncryption_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitEncryption_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Encryption_specContext encryption_spec() throws RecognitionException {
		Encryption_specContext _localctx = new Encryption_specContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_encryption_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(503);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(501);
				match(USING);
				setState(502);
				match(CHAR_STRING);
				}
			}

			setState(508);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IDENTIFIED) {
				{
				setState(505);
				match(IDENTIFIED);
				setState(506);
				match(BY);
				setState(507);
				match(REGULAR_ID);
				}
			}

			setState(511);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHAR_STRING) {
				{
				setState(510);
				match(CHAR_STRING);
				}
			}

			setState(517);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO || _la==SALT) {
				{
				setState(514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(513);
					match(NO);
					}
				}

				setState(516);
				match(SALT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Truncate_tableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Truncate_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTruncate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTruncate_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTruncate_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Truncate_tableContext truncate_table() throws RecognitionException {
		Truncate_tableContext _localctx = new Truncate_tableContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_truncate_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(519);
			match(TRUNCATE);
			setState(520);
			match(TABLE);
			setState(521);
			tableview_name();
			setState(522);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rule_on_columnContext extends ParserRuleContext {
		public TerminalNode RULE() { return getToken(PlSqlParser.RULE, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode COLUMN() { return getToken(PlSqlParser.COLUMN, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Rule_on_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rule_on_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRule_on_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRule_on_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRule_on_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rule_on_columnContext rule_on_column() throws RecognitionException {
		Rule_on_columnContext _localctx = new Rule_on_columnContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_rule_on_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(524);
			match(RULE);
			setState(525);
			match(ON);
			setState(526);
			match(COLUMN);
			setState(527);
			column_name();
			setState(528);
			match(IS);
			setState(529);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public List<TerminalNode> IN() { return getTokens(PlSqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PlSqlParser.IN, i);
		}
		public List<TerminalNode> OUT() { return getTokens(PlSqlParser.OUT); }
		public TerminalNode OUT(int i) {
			return getToken(PlSqlParser.OUT, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_parameter);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(531);
			parameter_name();
			setState(535);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,39,_ctx);
			while ( _alt!=2 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(532);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==OUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					} 
				}
				setState(537);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,39,_ctx);
			}
			setState(539);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9291010693660674L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1126037379612685L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -2323857682634637313L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9007199254740993L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -281474976710913L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -281474976776193L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -9288679063289921L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & -281474977235137L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & -1152921504606846977L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1153203254507601937L) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & -281475110928385L) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & -286261251L) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & -9007207844675585L) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & -4611686018427387905L) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & -140737488879617L) != 0) || ((((_la - 960)) & ~0x3f) == 0 && ((1L << (_la - 960)) & -562949953421313L) != 0) || ((((_la - 1024)) & ~0x3f) == 0 && ((1L << (_la - 1024)) & -1L) != 0) || ((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & -144119586122366977L) != 0) || ((((_la - 1152)) & ~0x3f) == 0 && ((1L << (_la - 1152)) & -70379482644485L) != 0) || ((((_la - 1216)) & ~0x3f) == 0 && ((1L << (_la - 1216)) & -274877915649L) != 0) || ((((_la - 1280)) & ~0x3f) == 0 && ((1L << (_la - 1280)) & -4298752257L) != 0) || ((((_la - 1344)) & ~0x3f) == 0 && ((1L << (_la - 1344)) & -33554433L) != 0) || ((((_la - 1408)) & ~0x3f) == 0 && ((1L << (_la - 1408)) & -144115188075855873L) != 0) || ((((_la - 1472)) & ~0x3f) == 0 && ((1L << (_la - 1472)) & -1073743873L) != 0) || ((((_la - 1536)) & ~0x3f) == 0 && ((1L << (_la - 1536)) & -9007203566485505L) != 0) || ((((_la - 1600)) & ~0x3f) == 0 && ((1L << (_la - 1600)) & -17592186044673L) != 0) || ((((_la - 1664)) & ~0x3f) == 0 && ((1L << (_la - 1664)) & -274877906945L) != 0) || ((((_la - 1728)) & ~0x3f) == 0 && ((1L << (_la - 1728)) & -1L) != 0) || ((((_la - 1792)) & ~0x3f) == 0 && ((1L << (_la - 1792)) & -1L) != 0) || ((((_la - 1856)) & ~0x3f) == 0 && ((1L << (_la - 1856)) & -1L) != 0) || ((((_la - 1920)) & ~0x3f) == 0 && ((1L << (_la - 1920)) & -1L) != 0) || ((((_la - 1984)) & ~0x3f) == 0 && ((1L << (_la - 1984)) & -288230378299195393L) != 0) || ((((_la - 2048)) & ~0x3f) == 0 && ((1L << (_la - 2048)) & -72057606922829825L) != 0) || ((((_la - 2112)) & ~0x3f) == 0 && ((1L << (_la - 2112)) & -2199023255553L) != 0) || ((((_la - 2176)) & ~0x3f) == 0 && ((1L << (_la - 2176)) & -281477158010889L) != 0) || ((((_la - 2240)) & ~0x3f) == 0 && ((1L << (_la - 2240)) & -27021683663569025L) != 0) || ((((_la - 2304)) & ~0x3f) == 0 && ((1L << (_la - 2304)) & 36028797021196287L) != 0)) {
				{
				setState(538);
				type_spec();
				}
			}

			setState(542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(541);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Default_value_partContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASSIGN_OP() { return getToken(PlSqlParser.ASSIGN_OP, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Default_value_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDefault_value_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDefault_value_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDefault_value_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_value_partContext default_value_part() throws RecognitionException {
		Default_value_partContext _localctx = new Default_value_partContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_default_value_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(544);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(545);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Seq_of_declare_specsContext extends ParserRuleContext {
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Seq_of_declare_specsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seq_of_declare_specs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSeq_of_declare_specs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSeq_of_declare_specs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSeq_of_declare_specs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Seq_of_declare_specsContext seq_of_declare_specs() throws RecognitionException {
		Seq_of_declare_specsContext _localctx = new Seq_of_declare_specsContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_seq_of_declare_specs);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(548); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(547);
					declare_spec();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(550); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,42,_ctx);
			} while ( _alt!=2 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Declare_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Declare_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDeclare_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDeclare_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDeclare_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_specContext declare_spec() throws RecognitionException {
		Declare_specContext _localctx = new Declare_specContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_declare_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(552);
			variable_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Variable_declarationContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode CONSTANT() { return getToken(PlSqlParser.CONSTANT, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL_() { return getToken(PlSqlParser.NULL_, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterVariable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitVariable_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitVariable_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_declarationContext variable_declaration() throws RecognitionException {
		Variable_declarationContext _localctx = new Variable_declarationContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_variable_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(554);
			identifier();
			setState(556);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				setState(555);
				match(CONSTANT);
				}
				break;
			}
			setState(558);
			type_spec();
			setState(561);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(559);
				match(NOT);
				setState(560);
				match(NULL_);
				}
			}

			setState(564);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(563);
				default_value_part();
				}
			}

			setState(566);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Seq_of_statementsContext extends ParserRuleContext {
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(PlSqlParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(PlSqlParser.SEMICOLON, i);
		}
		public List<TerminalNode> EOF() { return getTokens(PlSqlParser.EOF); }
		public TerminalNode EOF(int i) {
			return getToken(PlSqlParser.EOF, i);
		}
		public Seq_of_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seq_of_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSeq_of_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSeq_of_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSeq_of_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Seq_of_statementsContext seq_of_statements() throws RecognitionException {
		Seq_of_statementsContext _localctx = new Seq_of_statementsContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_seq_of_statements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(571); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(568);
					statement();
					setState(569);
					_la = _input.LA(1);
					if ( !(_la==EOF || _la==SEMICOLON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(573); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,46,_ctx);
			} while ( _alt!=2 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StatementContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Assignment_statementContext assignment_statement() {
			return getRuleContext(Assignment_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Exit_statementContext exit_statement() {
			return getRuleContext(Exit_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Loop_statementContext loop_statement() {
			return getRuleContext(Loop_statementContext.class,0);
		}
		public Raise_statementContext raise_statement() {
			return getRuleContext(Raise_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public Call_statementContext call_statement() {
			return getRuleContext(Call_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_statement);
		try {
			setState(586);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(575);
				body();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(576);
				block();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(577);
				assignment_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(578);
				continue_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(579);
				exit_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(580);
				if_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(581);
				loop_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(582);
				raise_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(583);
				return_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(584);
				sql_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(585);
				call_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Assignment_statementContext extends ParserRuleContext {
		public TerminalNode ASSIGN_OP() { return getToken(PlSqlParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAssignment_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAssignment_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAssignment_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_statementContext assignment_statement() throws RecognitionException {
		Assignment_statementContext _localctx = new Assignment_statementContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_assignment_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(588);
			general_element();
			}
			setState(589);
			match(ASSIGN_OP);
			setState(590);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitContinue_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitContinue_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_continue_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(592);
			match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Exit_statementContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public Exit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitExit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_statementContext exit_statement() throws RecognitionException {
		Exit_statementContext _localctx = new Exit_statementContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_exit_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(594);
			match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class If_statementContext extends ParserRuleContext {
		public List<TerminalNode> IF() { return getTokens(PlSqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(PlSqlParser.IF, i);
		}
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<Elsif_partContext> elsif_part() {
			return getRuleContexts(Elsif_partContext.class);
		}
		public Elsif_partContext elsif_part(int i) {
			return getRuleContext(Elsif_partContext.class,i);
		}
		public Else_partContext else_part() {
			return getRuleContext(Else_partContext.class,0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIf_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitIf_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(596);
			match(IF);
			setState(597);
			condition();
			setState(598);
			match(THEN);
			setState(599);
			seq_of_statements();
			setState(603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSIF) {
				{
				{
				setState(600);
				elsif_part();
				}
				}
				setState(605);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(606);
				else_part();
				}
			}

			setState(609);
			match(END);
			setState(610);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Elsif_partContext extends ParserRuleContext {
		public TerminalNode ELSIF() { return getToken(PlSqlParser.ELSIF, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Elsif_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elsif_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterElsif_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitElsif_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitElsif_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Elsif_partContext elsif_part() throws RecognitionException {
		Elsif_partContext _localctx = new Elsif_partContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_elsif_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(612);
			match(ELSIF);
			setState(613);
			condition();
			setState(614);
			match(THEN);
			setState(615);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterElse_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitElse_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitElse_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Else_partContext else_part() throws RecognitionException {
		Else_partContext _localctx = new Else_partContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(617);
			match(ELSE);
			setState(618);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Loop_statementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(PlSqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(PlSqlParser.LOOP, i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode WHILE() { return getToken(PlSqlParser.WHILE, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Cursor_loop_paramContext cursor_loop_param() {
			return getRuleContext(Cursor_loop_paramContext.class,0);
		}
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLoop_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLoop_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitLoop_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Loop_statementContext loop_statement() throws RecognitionException {
		Loop_statementContext _localctx = new Loop_statementContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_loop_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(624);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHILE:
				{
				setState(620);
				match(WHILE);
				setState(621);
				condition();
				}
				break;
			case FOR:
				{
				setState(622);
				match(FOR);
				setState(623);
				cursor_loop_param();
				}
				break;
			case LOOP:
				break;
			default:
				break;
			}
			setState(626);
			match(LOOP);
			setState(627);
			seq_of_statements();
			setState(628);
			match(END);
			setState(629);
			match(LOOP);
			setState(631);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9291010693660674L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1126037379612685L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -2323857682634637313L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9007199254740993L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -281474976710913L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -281474985164801L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -9288679063289921L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & -281474977235137L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & -1152921504606846977L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1153203254507601937L) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & -281475110928385L) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & -294649859L) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & -9007207844675585L) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & -4611686018427387905L) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & -140737488879617L) != 0) || ((((_la - 960)) & ~0x3f) == 0 && ((1L << (_la - 960)) & -562949953421313L) != 0) || ((((_la - 1024)) & ~0x3f) == 0 && ((1L << (_la - 1024)) & -1L) != 0) || ((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & -144119586122366977L) != 0) || ((((_la - 1152)) & ~0x3f) == 0 && ((1L << (_la - 1152)) & -70379482644485L) != 0) || ((((_la - 1216)) & ~0x3f) == 0 && ((1L << (_la - 1216)) & -274877915649L) != 0) || ((((_la - 1280)) & ~0x3f) == 0 && ((1L << (_la - 1280)) & -4298752257L) != 0) || ((((_la - 1344)) & ~0x3f) == 0 && ((1L << (_la - 1344)) & -33554433L) != 0) || ((((_la - 1408)) & ~0x3f) == 0 && ((1L << (_la - 1408)) & -144115188075855873L) != 0) || ((((_la - 1472)) & ~0x3f) == 0 && ((1L << (_la - 1472)) & -1073743873L) != 0) || ((((_la - 1536)) & ~0x3f) == 0 && ((1L << (_la - 1536)) & -9007203566485505L) != 0) || ((((_la - 1600)) & ~0x3f) == 0 && ((1L << (_la - 1600)) & -17592186044673L) != 0) || ((((_la - 1664)) & ~0x3f) == 0 && ((1L << (_la - 1664)) & -274877906945L) != 0) || ((((_la - 1728)) & ~0x3f) == 0 && ((1L << (_la - 1728)) & -1L) != 0) || ((((_la - 1792)) & ~0x3f) == 0 && ((1L << (_la - 1792)) & -1L) != 0) || ((((_la - 1856)) & ~0x3f) == 0 && ((1L << (_la - 1856)) & -1L) != 0) || ((((_la - 1920)) & ~0x3f) == 0 && ((1L << (_la - 1920)) & -1L) != 0) || ((((_la - 1984)) & ~0x3f) == 0 && ((1L << (_la - 1984)) & -288230378299195393L) != 0) || ((((_la - 2048)) & ~0x3f) == 0 && ((1L << (_la - 2048)) & -72057606922829825L) != 0) || ((((_la - 2112)) & ~0x3f) == 0 && ((1L << (_la - 2112)) & -2199023255553L) != 0) || ((((_la - 2176)) & ~0x3f) == 0 && ((1L << (_la - 2176)) & -281477158010889L) != 0) || ((((_la - 2240)) & ~0x3f) == 0 && ((1L << (_la - 2240)) & -27021683663569025L) != 0) || ((((_la - 2304)) & ~0x3f) == 0 && ((1L << (_la - 2304)) & 36028797021196287L) != 0)) {
				{
				setState(630);
				label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cursor_loop_paramContext extends ParserRuleContext {
		public Token range_separator;
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode DOUBLE_PERIOD() { return getToken(PlSqlParser.DOUBLE_PERIOD, 0); }
		public TerminalNode REVERSE() { return getToken(PlSqlParser.REVERSE, 0); }
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_loop_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCursor_loop_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCursor_loop_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCursor_loop_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_loop_paramContext cursor_loop_param() throws RecognitionException {
		Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_cursor_loop_param);
		int _la;
		try {
			setState(658);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(633);
				index_name();
				setState(634);
				match(IN);
				setState(636);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
				case 1:
					{
					setState(635);
					match(REVERSE);
					}
					break;
				}
				setState(638);
				lower_bound();
				setState(639);
				((Cursor_loop_paramContext)_localctx).range_separator = match(DOUBLE_PERIOD);
				setState(640);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(642);
				record_name();
				setState(643);
				match(IN);
				setState(656);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABS:
				case ABSENT:
				case ACCESS:
				case ACCESSED:
				case ACCOUNT:
				case ACL:
				case ACOS:
				case ACROSS:
				case ACTION:
				case ACTIONS:
				case ACTIVATE:
				case ACTIVE:
				case ACTIVE_COMPONENT:
				case ACTIVE_DATA:
				case ACTIVE_FUNCTION:
				case ACTIVE_TAG:
				case ACTIVITY:
				case ADAPTIVE_PLAN:
				case ADD:
				case ADD_COLUMN:
				case ADD_GROUP:
				case ADD_MONTHS:
				case ADJ_DATE:
				case ADMIN:
				case ADMINISTER:
				case ADMINISTRATOR:
				case ADVANCED:
				case ADVISE:
				case ADVISOR:
				case AFD_DISKSTRING:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ALIAS:
				case ALLOCATE:
				case ALLOW:
				case ALL_ROWS:
				case ALTERNATE:
				case ALWAYS:
				case ANALYTIC:
				case ANALYZE:
				case ANCESTOR:
				case ANCILLARY:
				case AND_EQUAL:
				case ANOMALY:
				case ANSI_REARCH:
				case ANTIJOIN:
				case ANYSCHEMA:
				case APPEND:
				case APPENDCHILDXML:
				case APPEND_VALUES:
				case APPLICATION:
				case APPLY:
				case APPROX_COUNT_DISTINCT:
				case ARCHIVAL:
				case ARCHIVE:
				case ARCHIVED:
				case ARCHIVELOG:
				case ARRAY:
				case ASCII:
				case ASCIISTR:
				case ASIN:
				case ASIS:
				case ASSEMBLY:
				case ASSIGN:
				case ASSOCIATE:
				case ASYNC:
				case ASYNCHRONOUS:
				case ATAN2:
				case ATAN:
				case AT:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AUTHENTICATED:
				case AUTHENTICATION:
				case AUTHID:
				case AUTHORIZATION:
				case AUTOALLOCATE:
				case AUTO:
				case AUTOEXTEND:
				case AUTO_LOGIN:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case AUTO_REOPTIMIZE:
				case AVAILABILITY:
				case AVRO:
				case BACKGROUND:
				case BACKINGFILE:
				case BACKUP:
				case BACKUPS:
				case BASIC:
				case BASICFILE:
				case BATCH:
				case BATCHSIZE:
				case BATCH_TABLE_ACCESS_BY_ROWID:
				case BECOME:
				case BEFORE:
				case BEGIN:
				case BEGINNING:
				case BEGIN_OUTLINE_DATA:
				case BEHALF:
				case BEQUEATH:
				case BFILE:
				case BFILENAME:
				case BIGFILE:
				case BINARY:
				case BINARY_DOUBLE:
				case BINARY_DOUBLE_INFINITY:
				case BINARY_DOUBLE_NAN:
				case BINARY_FLOAT:
				case BINARY_FLOAT_INFINITY:
				case BINARY_FLOAT_NAN:
				case BINARY_INTEGER:
				case BIND_AWARE:
				case BINDING:
				case BIN_TO_NUM:
				case BITAND:
				case BITMAP_AND:
				case BITMAP:
				case BITMAPS:
				case BITMAP_TREE:
				case BITS:
				case BLOB:
				case BLOCK:
				case BLOCK_RANGE:
				case BLOCKS:
				case BLOCKSIZE:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BOUND:
				case BRANCH:
				case BREADTH:
				case BROADCAST:
				case BSON:
				case BUFFER:
				case BUFFER_CACHE:
				case BUFFER_POOL:
				case BUILD:
				case BULK:
				case BYPASS_RECURSIVE_CHECK:
				case BYPASS_UJVC:
				case BYTE:
				case CACHE:
				case CACHE_CB:
				case CACHE_INSTANCES:
				case CACHE_TEMP_TABLE:
				case CACHING:
				case CALCULATED:
				case CALLBACK:
				case CALL:
				case CANCEL:
				case CAPACITY:
				case CAPTION:
				case CARDINALITY:
				case CASCADE:
				case CASE:
				case CAST:
				case CASESENSITIVE:
				case CATEGORY:
				case CDBDEFAULT:
				case CEIL:
				case CELL_FLASH_CACHE:
				case CERTIFICATE:
				case CFILE:
				case CHAINED:
				case CHANGE:
				case CHANGE_DUPKEY_ERROR_INDEX:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHARTOROWID:
				case CHECK_ACL_REWRITE:
				case CHECKPOINT:
				case CHILD:
				case CHOOSE:
				case CHR:
				case CHUNK:
				case CLASS:
				case CLASSIFICATION:
				case CLASSIFIER:
				case CLAUSE:
				case CLEAN:
				case CLEANUP:
				case CLEAR:
				case C_LETTER:
				case CLIENT:
				case CLOB:
				case CLONE:
				case CLOSE_CACHED_OPEN_CURSORS:
				case CLOSE:
				case CLUSTER_BY_ROWID:
				case CLUSTER:
				case CLUSTER_DETAILS:
				case CLUSTER_DISTANCE:
				case CLUSTER_ID:
				case CLUSTERING:
				case CLUSTERING_FACTOR:
				case CLUSTER_PROBABILITY:
				case CLUSTER_SET:
				case COALESCE:
				case COALESCE_SQ:
				case COARSE:
				case CO_AUTH_IND:
				case COLD:
				case COLLECT:
				case COLUMNAR:
				case COLUMN_AUTH_INDICATOR:
				case COLUMN:
				case COLUMNS:
				case COLUMN_STATS:
				case COLUMN_VALUE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMMON:
				case COMMON_DATA:
				case COMPACT:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPLIANCE:
				case COMPONENT:
				case COMPONENTS:
				case COMPOSE:
				case COMPOSITE:
				case COMPOSITE_LIMIT:
				case COMPOUND:
				case COMPUTE:
				case CONCAT:
				case CON_DBID_TO_ID:
				case CONDITIONAL:
				case CONDITION:
				case CONFIRM:
				case CONFORMING:
				case CON_GUID_TO_ID:
				case CON_ID:
				case CON_NAME_TO_ID:
				case CONNECT_BY_CB_WHR_ONLY:
				case CONNECT_BY_COMBINE_SW:
				case CONNECT_BY_COST_BASED:
				case CONNECT_BY_ELIM_DUPS:
				case CONNECT_BY_FILTERING:
				case CONNECT_BY_ISCYCLE:
				case CONNECT_BY_ISLEAF:
				case CONNECT_BY_ROOT:
				case CONNECT_TIME:
				case CONSIDER:
				case CONSISTENT:
				case CONSTANT:
				case CONST:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINER:
				case CONTAINERS:
				case CONTAINERS_DEFAULT:
				case CONTAINER_DATA:
				case CONTAINER_MAP:
				case CONTENT:
				case CONTENTS:
				case CONTEXT:
				case CONTINUE:
				case CONTROLFILE:
				case CON_UID_TO_ID:
				case CONVERT:
				case CONVERSION:
				case COOKIE:
				case COPY:
				case CORR_K:
				case CORR_S:
				case CORRUPTION:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COS:
				case COSH:
				case COST:
				case COST_XML_QUERY_REWRITE:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CPU_COSTING:
				case CPU_PER_CALL:
				case CPU_PER_SESSION:
				case CRASH:
				case CREATE_FILE_DEST:
				case CREATE_STORED_OUTLINES:
				case CREATION:
				case CREDENTIAL:
				case CRITICAL:
				case CROSS:
				case CROSSEDITION:
				case CSCONVERT:
				case CUBE_AJ:
				case CUBE:
				case CUBE_GB:
				case CUBE_SJ:
				case CUME_DISTM:
				case CURRENT:
				case CURRENT_DATE:
				case CURRENT_SCHEMA:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case CURRENTV:
				case CURSOR:
				case CURSOR_SHARING_EXACT:
				case CURSOR_SPECIFIC_SEGMENT:
				case CUSTOMDATUM:
				case CV:
				case CYCLE:
				case DANGLING:
				case DATABASE:
				case DATA:
				case DATAFILE:
				case DATAFILES:
				case DATAMOVEMENT:
				case DATAOBJNO:
				case DATAOBJ_TO_MAT_PARTITION:
				case DATAOBJ_TO_PARTITION:
				case DATAPUMP:
				case DATA_SECURITY_REWRITE_LIMIT:
				case DATE_MODE:
				case DAY:
				case DAYOFWEEK:
				case DAYS:
				case DBA:
				case DBA_RECYCLEBIN:
				case DBMS_STATS:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DB_UNIQUE_NAME:
				case DB_VERSION:
				case DDL:
				case DEALLOCATE:
				case DEBUG:
				case DEBUGGER:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DECOMPOSE:
				case DECORRELATE:
				case DECR:
				case DECREMENT:
				case DECRYPT:
				case DEDUPLICATE:
				case DEFAULTS:
				case DEFAULT_COLLATION:
				case DEFAULT_CREDENTIAL:
				case DEFERRABLE:
				case DEFERRED:
				case DEFINED:
				case DEFINE:
				case DEFINER:
				case DEGREE:
				case DELAY:
				case DELEGATE:
				case DELETE_ALL:
				case DELETE:
				case DELETEXML:
				case DEMAND:
				case DENSE_RANKM:
				case DEPENDENT:
				case DEPTH:
				case DEQUEUE:
				case DEREF:
				case DEREF_NO_REWRITE:
				case DESCRIPTION:
				case DESTROY:
				case DETACHED:
				case DETERMINES:
				case DETERMINISTIC:
				case DICTIONARY:
				case DIMENSION:
				case DIMENSIONS:
				case DIRECT_LOAD:
				case DIRECTORY:
				case DIRECT_PATH:
				case DISABLE_ALL:
				case DISABLE:
				case DISABLE_PARALLEL_DML:
				case DISABLE_PRESET:
				case DISABLE_RPKE:
				case DISALLOW:
				case DISASSOCIATE:
				case DISCARD:
				case DISCONNECT:
				case DISK:
				case DISKGROUP:
				case DISKS:
				case DISMOUNT:
				case DISTINGUISHED:
				case DISTRIBUTED:
				case DISTRIBUTE:
				case DML:
				case DML_UPDATE:
				case DOCFIDELITY:
				case DOCUMENT:
				case DOMAIN_INDEX_FILTER:
				case DOMAIN_INDEX_NO_SORT:
				case DOMAIN_INDEX_SORT:
				case DOY:
				case DOUBLE:
				case DOWNGRADE:
				case DRIVING_SITE:
				case DROP_COLUMN:
				case DROP_GROUP:
				case DSINTERVAL_UNCONSTRAINED:
				case DST_UPGRADE_INSERT_CONV:
				case DUMP:
				case DUPLICATE:
				case DV:
				case DYNAMIC:
				case DYNAMIC_SAMPLING:
				case DYNAMIC_SAMPLING_EST_CDN:
				case E_LETTER:
				case EACH:
				case EDITIONABLE:
				case EDITION:
				case EDITIONING:
				case EDITIONS:
				case ELEMENT:
				case ELIM_GROUPBY:
				case ELIMINATE_JOIN:
				case ELIMINATE_OBY:
				case ELIMINATE_OUTER_JOIN:
				case EM:
				case EMPTY_BLOB:
				case EMPTY_CLOB:
				case EMPTY:
				case ENABLE_ALL:
				case ENABLE:
				case ENABLE_PARALLEL_DML:
				case ENABLE_PRESET:
				case ENCODING:
				case ENCRYPT:
				case ENCRYPTION:
				case END_OUTLINE_DATA:
				case ENFORCED:
				case ENFORCE:
				case ENQUEUE:
				case ENTERPRISE:
				case ENTITYESCAPING:
				case ENTRY:
				case EQUIPART:
				case ERR:
				case ERROR_ARGUMENT:
				case ERROR:
				case ERROR_ON_OVERLAP_TIME:
				case ERRORS:
				case ESCAPE:
				case ESTIMATE:
				case EVAL:
				case EVALNAME:
				case EVALUATE:
				case EVALUATION:
				case EVENTS:
				case EVERY:
				case EXCEPT:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCHANGE:
				case EXCLUDE:
				case EXCLUDING:
				case EXECUTE:
				case EXEMPT:
				case EXISTING:
				case EXISTS:
				case EXISTSNODE:
				case EXIT:
				case EXPAND_GSET_TO_UNION:
				case EXPAND_TABLE:
				case EXP:
				case EXPIRE:
				case EXPLAIN:
				case EXPLOSION:
				case EXPORT:
				case EXPR_CORR_CHECK:
				case EXPRESS:
				case EXTENDS:
				case EXTENT:
				case EXTENTS:
				case EXTERNAL:
				case EXTERNALLY:
				case EXTRACTCLOBXML:
				case EXTRACT:
				case EXTRACTVALUE:
				case EXTRA:
				case FACILITY:
				case FACT:
				case FACTOR:
				case FACTORIZE_JOIN:
				case FAILED:
				case FAILED_LOGIN_ATTEMPTS:
				case FAILGROUP:
				case FAILOVER:
				case FAILURE:
				case FALSE:
				case FAMILY:
				case FAR:
				case FAST:
				case FASTSTART:
				case FBTSCAN:
				case FEATURE:
				case FEATURE_DETAILS:
				case FEATURE_ID:
				case FEATURE_SET:
				case FEATURE_VALUE:
				case FETCH:
				case FILE:
				case FILE_NAME_CONVERT:
				case FILEGROUP:
				case FILESTORE:
				case FILESYSTEM_LIKE_LOGGING:
				case FILTER:
				case FINAL:
				case FINE:
				case FINISH:
				case FIRST:
				case FIRSTM:
				case FIRST_ROWS:
				case FIRST_VALUE:
				case FIXED_VIEW_DATA:
				case FLAGGER:
				case FLASHBACK:
				case FLASH_CACHE:
				case FLOAT:
				case FLOB:
				case FLEX:
				case FLOOR:
				case FLUSH:
				case FOLDER:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FORCE_XML_QUERY_REWRITE:
				case FOREIGN:
				case FOREVER:
				case FORMAT:
				case FORWARD:
				case FRAGMENT_NUMBER:
				case FREELIST:
				case FREELISTS:
				case FREEPOOLS:
				case FRESH:
				case FROM_TZ:
				case FULL:
				case FULL_OUTER_JOIN_TO_OUTER:
				case FUNCTION:
				case FUNCTIONS:
				case FTP:
				case G_LETTER:
				case GATHER_OPTIMIZER_STATISTICS:
				case GATHER_PLAN_STATISTICS:
				case GBY_CONC_ROLLUP:
				case GBY_PUSHDOWN:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GLOBALLY:
				case GLOBAL_NAME:
				case GLOBAL_TOPIC_ENABLED:
				case GROUP_BY:
				case GROUP_ID:
				case GROUPING:
				case GROUPING_ID:
				case GROUPS:
				case GUARANTEED:
				case GUARANTEE:
				case GUARD:
				case HALF_YEARS:
				case HASH_AJ:
				case HASH:
				case HASHKEYS:
				case HASH_SJ:
				case HEADER:
				case HEAP:
				case HELP:
				case HEXTORAW:
				case HEXTOREF:
				case HIDDEN_KEYWORD:
				case HIDE:
				case HIER_ORDER:
				case HIERARCHICAL:
				case HIERARCHY:
				case HIGH:
				case HINTSET_BEGIN:
				case HINTSET_END:
				case HOT:
				case HOUR:
				case HOURS:
				case HTTP:
				case HWM_BROKERED:
				case HYBRID:
				case H_LETTER:
				case IDENTIFIER:
				case IDENTITY:
				case IDGENERATORS:
				case ID:
				case IDLE_TIME:
				case IF:
				case IGNORE:
				case IGNORE_OPTIM_EMBEDDED_HINTS:
				case IGNORE_ROW_ON_DUPKEY_INDEX:
				case IGNORE_WHERE_CLAUSE:
				case ILM:
				case IMMEDIATE:
				case IMPACT:
				case IMPORT:
				case INACTIVE:
				case INACTIVE_ACCOUNT_TIME:
				case INCLUDE:
				case INCLUDE_VERSION:
				case INCLUDING:
				case INCREMENTAL:
				case INCREMENT:
				case INCR:
				case INDENT:
				case INDEX_ASC:
				case INDEX_COMBINE:
				case INDEX_DESC:
				case INDEXED:
				case INDEXES:
				case INDEX_FFS:
				case INDEX_FILTER:
				case INDEXING:
				case INDEX_JOIN:
				case INDEX_ROWS:
				case INDEX_RRS:
				case INDEX_RS_ASC:
				case INDEX_RS_DESC:
				case INDEX_RS:
				case INDEX_SCAN:
				case INDEX_SKIP_SCAN:
				case INDEX_SS_ASC:
				case INDEX_SS_DESC:
				case INDEX_SS:
				case INDEX_STATS:
				case INDEXTYPE:
				case INDEXTYPES:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INFORMATIONAL:
				case INHERIT:
				case INITCAP:
				case INITIAL:
				case INITIALIZED:
				case INITIALLY:
				case INITRANS:
				case INLINE:
				case INLINE_XMLTYPE_NT:
				case INMEMORY:
				case IN_MEMORY_METADATA:
				case INMEMORY_PRUNING:
				case INNER:
				case INOUT:
				case INPLACE:
				case INSERTCHILDXMLAFTER:
				case INSERTCHILDXMLBEFORE:
				case INSERTCHILDXML:
				case INSERTXMLAFTER:
				case INSERTXMLBEFORE:
				case INSTANCE:
				case INSTANCES:
				case INSTANTIABLE:
				case INSTANTLY:
				case INSTEAD:
				case INSTR2:
				case INSTR4:
				case INSTRB:
				case INSTRC:
				case INSTR:
				case INTEGER:
				case INTERLEAVED:
				case INTERMEDIATE:
				case INTERNAL_CONVERT:
				case INTERNAL_USE:
				case INTERPRETED:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case INVISIBLE:
				case IN_XQUERY:
				case IS_LEAF:
				case ISOLATION:
				case ISOLATION_LEVEL:
				case ITERATE:
				case ITERATION_NUMBER:
				case JAVA:
				case JOB:
				case JOIN:
				case JSON_ARRAYAGG:
				case JSON_ARRAY:
				case JSON_EQUAL:
				case JSON_EXISTS2:
				case JSON_EXISTS:
				case JSONGET:
				case JSON:
				case JSON_OBJECTAGG:
				case JSON_OBJECT:
				case JSONPARSE:
				case JSON_QUERY:
				case JSON_SERIALIZE:
				case JSON_TABLE:
				case JSON_TEXTCONTAINS2:
				case JSON_TEXTCONTAINS:
				case JSON_TRANSFORM:
				case JSON_VALUE:
				case K_LETTER:
				case KEEP_DUPLICATES:
				case KEEP:
				case KERBEROS:
				case KEY:
				case KEY_LENGTH:
				case KEYSIZE:
				case KEYS:
				case KEYSTORE:
				case KILL:
				case LABEL:
				case LANGUAGE:
				case LAST_DAY:
				case LAST:
				case LAST_VALUE:
				case LATERAL:
				case LAX:
				case LAYER:
				case LDAP_REGISTRATION_ENABLED:
				case LDAP_REGISTRATION:
				case LDAP_REG_SYNC_INTERVAL:
				case LEAF:
				case LEAD_CDB:
				case LEAD_CDB_URI:
				case LEADING:
				case LEFT:
				case LENGTH2:
				case LENGTH4:
				case LENGTHB:
				case LENGTHC:
				case LENGTH:
				case LESS:
				case LEVEL:
				case LEVEL_NAME:
				case LEVELS:
				case LIBRARY:
				case LIFECYCLE:
				case LIFE:
				case LIFETIME:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIKE_EXPAND:
				case LIMIT:
				case LINEAR:
				case LINK:
				case LIST:
				case LN:
				case LNNVL:
				case LOAD:
				case LOB:
				case LOBNVL:
				case LOBS:
				case LOCAL_INDEXES:
				case LOCAL:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case LOCATION:
				case LOCATOR:
				case LOCKDOWN:
				case LOCKED:
				case LOCKING:
				case LOGFILE:
				case LOGFILES:
				case LOGGING:
				case LOGICAL:
				case LOGICAL_READS_PER_CALL:
				case LOGICAL_READS_PER_SESSION:
				case LOG:
				case LOGMINING:
				case LOGOFF:
				case LOGON:
				case LOG_READ_ONLY_VIOLATIONS:
				case LONG:
				case LOOP:
				case LOST:
				case LOWER:
				case LOW:
				case LPAD:
				case LTRIM:
				case M_LETTER:
				case MAIN:
				case MAKE_REF:
				case MANAGED:
				case MANAGE:
				case MANAGEMENT:
				case MANAGER:
				case MANDATORY:
				case MANUAL:
				case MAP:
				case MAPPING:
				case MASTER:
				case MATCHED:
				case MATCHES:
				case MATCH:
				case MATCH_NUMBER:
				case MATCH_RECOGNIZE:
				case MATERIALIZED:
				case MATERIALIZE:
				case MAXARCHLOGS:
				case MAXDATAFILES:
				case MAXEXTENTS:
				case MAXIMIZE:
				case MAXINSTANCES:
				case MAXLOGFILES:
				case MAXLOGHISTORY:
				case MAXLOGMEMBERS:
				case MAX_SHARED_TEMP_SIZE:
				case MAXSIZE:
				case MAXTRANS:
				case MAXVALUE:
				case MEASURE:
				case MEASURES:
				case MEDIUM:
				case MEMBER:
				case MEMBER_CAPTION:
				case MEMBER_DESCRIPTION:
				case MEMBER_NAME:
				case MEMBER_UNIQUE_NAME:
				case MEMCOMPRESS:
				case MEMORY:
				case MERGEACTIONS:
				case MERGE_AJ:
				case MERGE_CONST_ON:
				case MERGE:
				case MERGE_SJ:
				case METADATA:
				case METHOD:
				case MIGRATE:
				case MIGRATION:
				case MINEXTENTS:
				case MINIMIZE:
				case MINIMUM:
				case MINING:
				case MINUS_NULL:
				case MINUTE:
				case MINUTES:
				case MINVALUE:
				case MIRRORCOLD:
				case MIRRORHOT:
				case MIRROR:
				case MISSING:
				case MISMATCH:
				case MLSLABEL:
				case MODEL_COMPILE_SUBQUERY:
				case MODEL_DONTVERIFY_UNIQUENESS:
				case MODEL_DYNAMIC_SUBQUERY:
				case MODEL_MIN_ANALYSIS:
				case MODEL:
				case MODEL_NB:
				case MODEL_NO_ANALYSIS:
				case MODEL_PBY:
				case MODEL_PUSH_REF:
				case MODEL_SV:
				case MODIFICATION:
				case MODIFY_COLUMN_TYPE:
				case MODIFY:
				case MOD:
				case MODULE:
				case MONITORING:
				case MONITOR:
				case MONTH:
				case MONTHS_BETWEEN:
				case MONTHS:
				case MOUNT:
				case MOUNTPATH:
				case MOUNTPOINT:
				case MOVEMENT:
				case MOVE:
				case MULTIDIMENSIONAL:
				case MULTISET:
				case MV_MERGE:
				case NAMED:
				case NAME:
				case NAMESPACE:
				case NAN:
				case NANVL:
				case NATIONAL:
				case NATIVE_FULL_OUTER_JOIN:
				case NATIVE:
				case NATURAL:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCHR:
				case NCLOB:
				case NEEDED:
				case NEG:
				case NESTED:
				case NESTED_TABLE_FAST_INSERT:
				case NESTED_TABLE_GET_REFS:
				case NESTED_TABLE_ID:
				case NESTED_TABLE_SET_REFS:
				case NESTED_TABLE_SET_SETID:
				case NETWORK:
				case NEVER:
				case NEW:
				case NEW_TIME:
				case NEXT_DAY:
				case NEXT:
				case NL_AJ:
				case NLJ_BATCHING:
				case NLJ_INDEX_FILTER:
				case NLJ_INDEX_SCAN:
				case NLJ_PREFETCH:
				case NLS_CALENDAR:
				case NLS_CHARACTERSET:
				case NLS_CHARSET_DECL_LEN:
				case NLS_CHARSET_ID:
				case NLS_CHARSET_NAME:
				case NLS_COMP:
				case NLS_CURRENCY:
				case NLS_DATE_FORMAT:
				case NLS_DATE_LANGUAGE:
				case NLS_INITCAP:
				case NLS_ISO_CURRENCY:
				case NL_SJ:
				case NLS_LANG:
				case NLS_LANGUAGE:
				case NLS_LENGTH_SEMANTICS:
				case NLS_LOWER:
				case NLS_NCHAR_CONV_EXCP:
				case NLS_NUMERIC_CHARACTERS:
				case NLS_SORT:
				case NLSSORT:
				case NLS_SPECIAL_CHARS:
				case NLS_TERRITORY:
				case NLS_UPPER:
				case NO_ACCESS:
				case NO_ADAPTIVE_PLAN:
				case NO_ANSI_REARCH:
				case NOAPPEND:
				case NOARCHIVELOG:
				case NOAUDIT:
				case NO_AUTO_REOPTIMIZE:
				case NO_BASETABLE_MULTIMV_REWRITE:
				case NO_BATCH_TABLE_ACCESS_BY_ROWID:
				case NO_BIND_AWARE:
				case NO_BUFFER:
				case NOCACHE:
				case NO_CARTESIAN:
				case NO_CHECK_ACL_REWRITE:
				case NO_CLUSTER_BY_ROWID:
				case NO_CLUSTERING:
				case NO_COALESCE_SQ:
				case NO_COMMON_DATA:
				case NO_CONNECT_BY_CB_WHR_ONLY:
				case NO_CONNECT_BY_COMBINE_SW:
				case NO_CONNECT_BY_COST_BASED:
				case NO_CONNECT_BY_ELIM_DUPS:
				case NO_CONNECT_BY_FILTERING:
				case NOCOPY:
				case NO_COST_XML_QUERY_REWRITE:
				case NO_CPU_COSTING:
				case NOCPU_COSTING:
				case NOCYCLE:
				case NO_DATA_SECURITY_REWRITE:
				case NO_DECORRELATE:
				case NODELAY:
				case NO_DOMAIN_INDEX_FILTER:
				case NO_DST_UPGRADE_INSERT_CONV:
				case NO_ELIM_GROUPBY:
				case NO_ELIMINATE_JOIN:
				case NO_ELIMINATE_OBY:
				case NO_ELIMINATE_OUTER_JOIN:
				case NOENTITYESCAPING:
				case NO_EXPAND_GSET_TO_UNION:
				case NO_EXPAND:
				case NO_EXPAND_TABLE:
				case NO_FACT:
				case NO_FACTORIZE_JOIN:
				case NO_FILTERING:
				case NOFORCE:
				case NO_FULL_OUTER_JOIN_TO_OUTER:
				case NO_GATHER_OPTIMIZER_STATISTICS:
				case NO_GBY_PUSHDOWN:
				case NOGUARANTEE:
				case NO_INDEX_FFS:
				case NO_INDEX:
				case NO_INDEX_SS:
				case NO_INMEMORY:
				case NO_INMEMORY_PRUNING:
				case NOKEEP:
				case NO_LOAD:
				case NOLOCAL:
				case NOLOGGING:
				case NOMAPPING:
				case NOMAXVALUE:
				case NO_MERGE:
				case NOMINIMIZE:
				case NOMINVALUE:
				case NO_MODEL_PUSH_REF:
				case NO_MONITORING:
				case NOMONITORING:
				case NO_MONITOR:
				case NO_MULTIMV_REWRITE:
				case NO_NATIVE_FULL_OUTER_JOIN:
				case NONBLOCKING:
				case NONEDITIONABLE:
				case NONE:
				case NO_NLJ_BATCHING:
				case NO_NLJ_PREFETCH:
				case NO:
				case NONSCHEMA:
				case NO_OBJECT_LINK:
				case NOORDER:
				case NO_ORDER_ROLLUPS:
				case NO_OUTER_JOIN_TO_ANTI:
				case NO_OUTER_JOIN_TO_INNER:
				case NOOVERRIDE:
				case NO_PARALLEL_INDEX:
				case NOPARALLEL_INDEX:
				case NO_PARALLEL:
				case NOPARALLEL:
				case NO_PARTIAL_COMMIT:
				case NO_PARTIAL_JOIN:
				case NO_PARTIAL_ROLLUP_PUSHDOWN:
				case NOPARTITION:
				case NO_PLACE_DISTINCT:
				case NO_PLACE_GROUP_BY:
				case NO_PQ_CONCURRENT_UNION:
				case NO_PQ_MAP:
				case NOPROMPT:
				case NO_PQ_REPLICATE:
				case NO_PQ_SKEW:
				case NO_PRUNE_GSETS:
				case NO_PULL_PRED:
				case NO_PUSH_PRED:
				case NO_PUSH_SUBQ:
				case NO_PX_FAULT_TOLERANCE:
				case NO_PX_JOIN_FILTER:
				case NO_QKN_BUFF:
				case NO_QUERY_TRANSFORMATION:
				case NO_REF_CASCADE:
				case NORELOCATE:
				case NORELY:
				case NOREPAIR:
				case NOREPLAY:
				case NORESETLOGS:
				case NO_RESULT_CACHE:
				case NOREVERSE:
				case NO_REWRITE:
				case NOREWRITE:
				case NORMAL:
				case NO_ROOT_SW_FOR_LOCAL:
				case NOROWDEPENDENCIES:
				case NOSCHEMACHECK:
				case NOSEGMENT:
				case NO_SEMIJOIN:
				case NO_SEMI_TO_INNER:
				case NO_SET_TO_JOIN:
				case NOSORT:
				case NO_SQL_TRANSLATION:
				case NO_SQL_TUNE:
				case NO_STAR_TRANSFORMATION:
				case NO_STATEMENT_QUEUING:
				case NO_STATS_GSETS:
				case NOSTRICT:
				case NO_SUBQUERY_PRUNING:
				case NO_SUBSTRB_PAD:
				case NO_SWAP_JOIN_INPUTS:
				case NOSWITCH:
				case NO_TABLE_LOOKUP_BY_NL:
				case NO_TEMP_TABLE:
				case NOTHING:
				case NOTIFICATION:
				case NO_TRANSFORM_DISTINCT_AGG:
				case NO_UNNEST:
				case NO_USE_CUBE:
				case NO_USE_HASH_AGGREGATION:
				case NO_USE_HASH_GBY_FOR_PUSHDOWN:
				case NO_USE_HASH:
				case NO_USE_INVISIBLE_INDEXES:
				case NO_USE_MERGE:
				case NO_USE_NL:
				case NO_USE_VECTOR_AGGREGATION:
				case NOVALIDATE:
				case NO_VECTOR_TRANSFORM_DIMS:
				case NO_VECTOR_TRANSFORM_FACT:
				case NO_VECTOR_TRANSFORM:
				case NO_XDB_FASTPATH_INSERT:
				case NO_XML_DML_REWRITE:
				case NO_XMLINDEX_REWRITE_IN_SELECT:
				case NO_XMLINDEX_REWRITE:
				case NO_XML_QUERY_REWRITE:
				case NO_ZONEMAP:
				case NTH_VALUE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NUM_INDEX_KEYS:
				case NUMTODSINTERVAL:
				case NUMTOYMINTERVAL:
				case NVARCHAR2:
				case NVL2:
				case OBJECT2XML:
				case OBJECT:
				case OBJ_ID:
				case OBJNO:
				case OBJNO_REUSE:
				case OCCURENCES:
				case OFFLINE:
				case OFF:
				case OFFSET:
				case OIDINDEX:
				case OID:
				case OLAP:
				case OLD:
				case OLD_PUSH_PRED:
				case OLS:
				case OLTP:
				case OMIT:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPAQUE:
				case OPAQUE_TRANSFORM:
				case OPAQUE_XCANONICAL:
				case OPCODE:
				case OPEN:
				case OPERATIONS:
				case OPERATOR:
				case OPT_ESTIMATE:
				case OPTIMAL:
				case OPTIMIZE:
				case OPTIMIZER_FEATURES_ENABLE:
				case OPTIMIZER_GOAL:
				case OPT_PARAM:
				case ORA_BRANCH:
				case ORA_CHECK_ACL:
				case ORA_CHECK_PRIVILEGE:
				case ORA_CLUSTERING:
				case ORADATA:
				case ORADEBUG:
				case ORA_DST_AFFECTED:
				case ORA_DST_CONVERT:
				case ORA_DST_ERROR:
				case ORA_GET_ACLIDS:
				case ORA_GET_PRIVILEGES:
				case ORA_HASH:
				case ORA_INVOKING_USERID:
				case ORA_INVOKING_USER:
				case ORA_INVOKING_XS_USER_GUID:
				case ORA_INVOKING_XS_USER:
				case ORA_RAWCOMPARE:
				case ORA_RAWCONCAT:
				case ORA_ROWSCN:
				case ORA_ROWSCN_RAW:
				case ORA_ROWVERSION:
				case ORA_TABVERSION:
				case ORA_WRITE_TIME:
				case ORDERED:
				case ORDERED_PREDICATES:
				case ORDINALITY:
				case OR_EXPAND:
				case ORGANIZATION:
				case OR_PREDICATES:
				case OSERROR:
				case OTHER:
				case OUTER_JOIN_TO_ANTI:
				case OUTER_JOIN_TO_INNER:
				case OUTER:
				case OUTLINE_LEAF:
				case OUTLINE:
				case OUT_OF_LINE:
				case OUT:
				case OVERFLOW_NOMOVE:
				case OVERFLOW:
				case OVERLAPS:
				case OVER:
				case OVERRIDING:
				case OWNER:
				case OWNERSHIP:
				case OWN:
				case P_LETTER:
				case PACKAGE:
				case PACKAGES:
				case PARALLEL_ENABLE:
				case PARALLEL_INDEX:
				case PARALLEL:
				case PARAMETERS:
				case PARAM:
				case PARENT:
				case PARENT_LEVEL_NAME:
				case PARENT_UNIQUE_NAME:
				case PARITY:
				case PARTIAL_JOIN:
				case PARTIALLY:
				case PARTIAL:
				case PARTIAL_ROLLUP_PUSHDOWN:
				case PARTITION_HASH:
				case PARTITION_LIST:
				case PARTITION:
				case PARTITION_RANGE:
				case PARTITIONS:
				case PARTNUMINST:
				case PASSING:
				case PASSWORD_GRACE_TIME:
				case PASSWORD_LIFE_TIME:
				case PASSWORD_LOCK_TIME:
				case PASSWORD:
				case PASSWORD_REUSE_MAX:
				case PASSWORD_REUSE_TIME:
				case PASSWORD_ROLLOVER_TIME:
				case PASSWORD_VERIFY_FUNCTION:
				case PAST:
				case PATCH:
				case PATH:
				case PATH_PREFIX:
				case PATHS:
				case PATTERN:
				case PBL_HS_BEGIN:
				case PBL_HS_END:
				case PCTINCREASE:
				case PCTTHRESHOLD:
				case PCTUSED:
				case PCTVERSION:
				case PENDING:
				case PERCENT_KEYWORD:
				case PERCENT_RANKM:
				case PERFORMANCE:
				case PERIOD_KEYWORD:
				case PERMANENT:
				case PERMISSION:
				case PERMUTE:
				case PER:
				case PFILE:
				case PHYSICAL:
				case PIKEY:
				case PIPELINED:
				case PIV_GB:
				case PIVOT:
				case PIV_SSF:
				case PLACE_DISTINCT:
				case PLACE_GROUP_BY:
				case PLAN:
				case PLSCOPE_SETTINGS:
				case PLS_INTEGER:
				case PLSQL_CCFLAGS:
				case PLSQL_CODE_TYPE:
				case PLSQL_DEBUG:
				case PLSQL_OPTIMIZE_LEVEL:
				case PLSQL_WARNINGS:
				case PLUGGABLE:
				case PMEM:
				case POINT:
				case POLICY:
				case POOL_16K:
				case POOL_2K:
				case POOL_32K:
				case POOL_4K:
				case POOL_8K:
				case POSITIVEN:
				case POSITIVE:
				case POST_TRANSACTION:
				case POWERMULTISET_BY_CARDINALITY:
				case POWERMULTISET:
				case POWER:
				case PQ_CONCURRENT_UNION:
				case PQ_DISTRIBUTE:
				case PQ_DISTRIBUTE_WINDOW:
				case PQ_FILTER:
				case PQ_MAP:
				case PQ_NOMAP:
				case PQ_REPLICATE:
				case PQ_SKEW:
				case PRAGMA:
				case PREBUILT:
				case PRECEDES:
				case PRECEDING:
				case PRECISION:
				case PRECOMPUTE_SUBQUERY:
				case PREDICATE_REORDERS:
				case PRELOAD:
				case PREPARE:
				case PRESENTNNV:
				case PRESENT:
				case PRESENTV:
				case PRESERVE_OID:
				case PRESERVE:
				case PRETTY:
				case PREVIOUS:
				case PREV:
				case PRIMARY:
				case PRINTBLOBTOCLOB:
				case PRIORITY:
				case PRIVATE:
				case PRIVATE_SGA:
				case PRIVILEGED:
				case PRIVILEGE:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCESS:
				case PROFILE:
				case PROGRAM:
				case PROJECT:
				case PROPAGATE:
				case PROPERTY:
				case PROTECTED:
				case PROTECTION:
				case PROTOCOL:
				case PROXY:
				case PRUNING:
				case PUBLIC:
				case PULL_PRED:
				case PURGE:
				case PUSH_PRED:
				case PUSH_SUBQ:
				case PX_FAULT_TOLERANCE:
				case PX_GRANULE:
				case PX_JOIN_FILTER:
				case QB_NAME:
				case QUARTER:
				case QUARTERS:
				case QUERY_BLOCK:
				case QUERY:
				case QUEUE_CURR:
				case QUEUE:
				case QUEUE_ROWP:
				case QUIESCE:
				case QUORUM:
				case QUOTA:
				case QUOTAGROUP:
				case RAISE:
				case RANDOM_LOCAL:
				case RANDOM:
				case RANGE:
				case RANKM:
				case RAPIDLY:
				case RAW:
				case RAWTOHEX:
				case RAWTONHEX:
				case RBA:
				case RBO_OUTLINE:
				case RDBA:
				case READ:
				case READS:
				case REALM:
				case REAL:
				case REBALANCE:
				case REBUILD:
				case RECORD:
				case RECORDS_PER_BLOCK:
				case RECOVERABLE:
				case RECOVER:
				case RECOVERY:
				case RECYCLEBIN:
				case RECYCLE:
				case REDACTION:
				case REDEFINE:
				case REDO:
				case REDUCED:
				case REDUNDANCY:
				case REF_CASCADE_CURSOR:
				case REFERENCED:
				case REFERENCE:
				case REFERENCES:
				case REFERENCING:
				case REF:
				case REFRESH:
				case REFTOHEX:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_REPLACE:
				case REGEXP_SUBSTR:
				case REGISTER:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_R2:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REGULAR:
				case REJECT:
				case REKEY:
				case RELATIONAL:
				case RELOCATE:
				case RELY:
				case REMAINDER:
				case REMOTE:
				case REMOTE_MAPPED:
				case REMOVE:
				case RENAME:
				case REPAIR:
				case REPEAT:
				case REPLACE:
				case REPLICATION:
				case REQUIRED:
				case RESETLOGS:
				case RESET:
				case RESIZE:
				case RESOLVE:
				case RESOLVER:
				case RESPECT:
				case RESTART:
				case RESTORE_AS_INTERVALS:
				case RESTORE:
				case RESTRICT_ALL_REF_CONS:
				case RESTRICTED:
				case RESTRICT_REFERENCES:
				case RESTRICT:
				case RESULT_CACHE:
				case RESULT:
				case RESUMABLE:
				case RESUME:
				case RETENTION:
				case RETRY_ON_ROW_CHANGE:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REWRITE_OR_ERROR:
				case REWRITE:
				case RIGHT:
				case ROLE:
				case ROLESET:
				case ROLES:
				case ROLLBACK:
				case ROLLING:
				case ROLLUP:
				case ROWDEPENDENCIES:
				case ROWID_MAPPING_TABLE:
				case ROWID:
				case ROWIDTOCHAR:
				case ROWIDTONCHAR:
				case ROW_LENGTH:
				case ROWNUM:
				case ROW:
				case ROWS:
				case RPAD:
				case RTRIM:
				case RULE:
				case RULES:
				case RUNNING:
				case SALT:
				case SAMPLE:
				case SAVE_AS_INTERVALS:
				case SAVEPOINT:
				case SAVE:
				case SB4:
				case SCALE_ROWS:
				case SCALE:
				case SCAN_INSTANCES:
				case SCAN:
				case SCHEDULER:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN_ASCENDING:
				case SCN:
				case SCOPE:
				case SCRUB:
				case SD_ALL:
				case SD_INHIBIT:
				case SDO_GEOM_MBR:
				case SDO_GEOMETRY:
				case SD_SHOW:
				case SEARCH:
				case SECOND:
				case SECONDS:
				case SECRET:
				case SECUREFILE_DBA:
				case SECUREFILE:
				case SECURITY:
				case SEED:
				case SEG_BLOCK:
				case SEG_FILE:
				case SEGMENT:
				case SELECTIVITY:
				case SELF:
				case SEMIJOIN_DRIVER:
				case SEMIJOIN:
				case SEMI_TO_INNER:
				case SEQUENCED:
				case SEQUENCE:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERIAL:
				case SERVERERROR:
				case SERVICE_NAME_CONVERT:
				case SERVICE:
				case SERVICES:
				case SESSION_CACHED_CURSORS:
				case SESSION:
				case SESSIONS_PER_USER:
				case SESSIONTIMEZONE:
				case SESSIONTZNAME:
				case SET:
				case SETS:
				case SETTINGS:
				case SET_TO_JOIN:
				case SEVERE:
				case SHARDSPACE:
				case SHARED_POOL:
				case SHARED:
				case SHARING:
				case SHELFLIFE:
				case SHOW:
				case SHRINK:
				case SHUTDOWN:
				case SIBLINGS:
				case SID:
				case SITE:
				case SIGNAL_COMPONENT:
				case SIGNAL_FUNCTION:
				case SIGN:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SIMPLE:
				case SINGLE:
				case SINGLETASK:
				case SINH:
				case SIN:
				case SKIP_EXT_OPTIMIZER:
				case SKIP_:
				case SKIP_UNQ_UNUSABLE_IDX:
				case SKIP_UNUSABLE_INDEXES:
				case SMALLFILE:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SORT:
				case SOUNDEX:
				case SOURCE_FILE_DIRECTORY:
				case SOURCE_FILE_NAME_CONVERT:
				case SOURCE:
				case SPACE_KEYWORD:
				case SPECIFICATION:
				case SPFILE:
				case SPLIT:
				case SPREADSHEET:
				case SQLDATA:
				case SQLERROR:
				case SQLLDR:
				case SQL:
				case SQL_MACRO:
				case SQL_TRACE:
				case SQL_TRANSLATION_PROFILE:
				case SQRT:
				case STALE:
				case STANDALONE:
				case STANDARD:
				case STANDARD_HASH:
				case STANDBY_MAX_DATA_DELAY:
				case STANDBYS:
				case STANDBY:
				case STAR:
				case STAR_TRANSFORMATION:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT_QUEUING:
				case STATEMENTS:
				case STATEMENT:
				case STATE:
				case STATIC:
				case STATISTICS:
				case STATS_BINOMIAL_TEST:
				case STATS_CROSSTAB:
				case STATS_F_TEST:
				case STATS_KS_TEST:
				case STATS_MODE:
				case STATS_MW_TEST:
				case STATS_ONE_WAY_ANOVA:
				case STATS_T_TEST_INDEP:
				case STATS_T_TEST_INDEPU:
				case STATS_T_TEST_ONE:
				case STATS_T_TEST_PAIRED:
				case STATS_WSR_TEST:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STOP:
				case STORAGE:
				case STORE:
				case STREAMS:
				case STREAM:
				case STRICT:
				case STRING:
				case STRIPE_COLUMNS:
				case STRIPE_WIDTH:
				case STRIP:
				case STRUCTURE:
				case SUBMULTISET:
				case SUBPARTITION_REL:
				case SUBPARTITIONS:
				case SUBPARTITION:
				case SUBQUERIES:
				case SUBQUERY_PRUNING:
				case SUBSCRIBE:
				case SUBSET:
				case SUBSTITUTABLE:
				case SUBSTR2:
				case SUBSTR4:
				case SUBSTRB:
				case SUBSTRC:
				case SUBTYPE:
				case SUCCESSFUL:
				case SUCCESS:
				case SUMMARY:
				case SUPPLEMENTAL:
				case SUSPEND:
				case SWAP_JOIN_INPUTS:
				case SWITCHOVER:
				case SWITCH:
				case SYNCHRONOUS:
				case SYNC:
				case SYS:
				case SYSASM:
				case SYS_AUDIT:
				case SYSAUX:
				case SYSBACKUP:
				case SYS_CHECKACL:
				case SYS_CHECK_PRIVILEGE:
				case SYS_CONNECT_BY_PATH:
				case SYS_CONTEXT:
				case SYSDATE:
				case SYSDBA:
				case SYS_DBURIGEN:
				case SYSDG:
				case SYS_DL_CURSOR:
				case SYS_DM_RXFORM_CHR:
				case SYS_DM_RXFORM_NUM:
				case SYS_DOM_COMPARE:
				case SYS_DST_PRIM2SEC:
				case SYS_DST_SEC2PRIM:
				case SYS_ET_BFILE_TO_RAW:
				case SYS_ET_BLOB_TO_IMAGE:
				case SYS_ET_IMAGE_TO_BLOB:
				case SYS_ET_RAW_TO_BFILE:
				case SYS_EXTPDTXT:
				case SYS_EXTRACT_UTC:
				case SYS_FBT_INSDEL:
				case SYS_FILTER_ACLS:
				case SYS_FNMATCHES:
				case SYS_FNREPLACE:
				case SYS_GET_ACLIDS:
				case SYS_GET_COL_ACLIDS:
				case SYS_GET_PRIVILEGES:
				case SYS_GETTOKENID:
				case SYS_GETXTIVAL:
				case SYS_GUID:
				case SYSGUID:
				case SYSKM:
				case SYS_MAKE_XMLNODEID:
				case SYS_MAKEXML:
				case SYS_MKXMLATTR:
				case SYS_MKXTI:
				case SYSOBJ:
				case SYS_OP_ADT2BIN:
				case SYS_OP_ADTCONS:
				case SYS_OP_ALSCRVAL:
				case SYS_OP_ATG:
				case SYS_OP_BIN2ADT:
				case SYS_OP_BITVEC:
				case SYS_OP_BL2R:
				case SYS_OP_BLOOM_FILTER_LIST:
				case SYS_OP_BLOOM_FILTER:
				case SYS_OP_C2C:
				case SYS_OP_CAST:
				case SYS_OP_CEG:
				case SYS_OP_CL2C:
				case SYS_OP_COMBINED_HASH:
				case SYS_OP_COMP:
				case SYS_OP_CONVERT:
				case SYS_OP_COUNTCHG:
				case SYS_OP_CSCONV:
				case SYS_OP_CSCONVTEST:
				case SYS_OP_CSR:
				case SYS_OP_CSX_PATCH:
				case SYS_OP_CYCLED_SEQ:
				case SYS_OP_DECOMP:
				case SYS_OP_DESCEND:
				case SYS_OP_DISTINCT:
				case SYS_OP_DRA:
				case SYS_OP_DUMP:
				case SYS_OP_DV_CHECK:
				case SYS_OP_ENFORCE_NOT_NULL:
				case SYSOPER:
				case SYS_OP_EXTRACT:
				case SYS_OP_GROUPING:
				case SYS_OP_GUID:
				case SYS_OP_HASH:
				case SYS_OP_IIX:
				case SYS_OP_ITR:
				case SYS_OP_KEY_VECTOR_CREATE:
				case SYS_OP_KEY_VECTOR_FILTER_LIST:
				case SYS_OP_KEY_VECTOR_FILTER:
				case SYS_OP_KEY_VECTOR_SUCCEEDED:
				case SYS_OP_KEY_VECTOR_USE:
				case SYS_OP_LBID:
				case SYS_OP_LOBLOC2BLOB:
				case SYS_OP_LOBLOC2CLOB:
				case SYS_OP_LOBLOC2ID:
				case SYS_OP_LOBLOC2NCLOB:
				case SYS_OP_LOBLOC2TYP:
				case SYS_OP_LSVI:
				case SYS_OP_LVL:
				case SYS_OP_MAKEOID:
				case SYS_OP_MAP_NONNULL:
				case SYS_OP_MSR:
				case SYS_OP_NICOMBINE:
				case SYS_OP_NIEXTRACT:
				case SYS_OP_NII:
				case SYS_OP_NIX:
				case SYS_OP_NOEXPAND:
				case SYS_OP_NTCIMG:
				case SYS_OP_NUMTORAW:
				case SYS_OP_OIDVALUE:
				case SYS_OP_OPNSIZE:
				case SYS_OP_PAR_1:
				case SYS_OP_PARGID_1:
				case SYS_OP_PARGID:
				case SYS_OP_PAR:
				case SYS_OP_PART_ID:
				case SYS_OP_PIVOT:
				case SYS_OP_R2O:
				case SYS_OP_RAWTONUM:
				case SYS_OP_RDTM:
				case SYS_OP_REF:
				case SYS_OP_RMTD:
				case SYS_OP_ROWIDTOOBJ:
				case SYS_OP_RPB:
				case SYS_OPTLOBPRBSC:
				case SYS_OP_TOSETID:
				case SYS_OP_TPR:
				case SYS_OP_TRTB:
				case SYS_OPTXICMP:
				case SYS_OPTXQCASTASNQ:
				case SYS_OP_UNDESCEND:
				case SYS_OP_VECAND:
				case SYS_OP_VECBIT:
				case SYS_OP_VECOR:
				case SYS_OP_VECXOR:
				case SYS_OP_VERSION:
				case SYS_OP_VREF:
				case SYS_OP_VVD:
				case SYS_OP_XMLCONS_FOR_CSX:
				case SYS_OP_XPTHATG:
				case SYS_OP_XPTHIDX:
				case SYS_OP_XPTHOP:
				case SYS_OP_XTXT2SQLT:
				case SYS_OP_ZONE_ID:
				case SYS_ORDERKEY_DEPTH:
				case SYS_ORDERKEY_MAXCHILD:
				case SYS_ORDERKEY_PARENT:
				case SYS_PARALLEL_TXN:
				case SYS_PATHID_IS_ATTR:
				case SYS_PATHID_IS_NMSPC:
				case SYS_PATHID_LASTNAME:
				case SYS_PATHID_LASTNMSPC:
				case SYS_PATH_REVERSE:
				case SYS_PXQEXTRACT:
				case SYS_RAW_TO_XSID:
				case SYS_RID_ORDER:
				case SYS_ROW_DELTA:
				case SYS_SC_2_XMLT:
				case SYS_SYNRCIREDO:
				case SYSTEM_DEFINED:
				case SYSTEM:
				case SYSTIMESTAMP:
				case SYS_TYPEID:
				case SYS_UMAKEXML:
				case SYS_XMLANALYZE:
				case SYS_XMLCONTAINS:
				case SYS_XMLCONV:
				case SYS_XMLEXNSURI:
				case SYS_XMLGEN:
				case SYS_XMLI_LOC_ISNODE:
				case SYS_XMLI_LOC_ISTEXT:
				case SYS_XMLINSTR:
				case SYS_XMLLOCATOR_GETSVAL:
				case SYS_XMLNODEID_GETCID:
				case SYS_XMLNODEID_GETLOCATOR:
				case SYS_XMLNODEID_GETOKEY:
				case SYS_XMLNODEID_GETPATHID:
				case SYS_XMLNODEID_GETPTRID:
				case SYS_XMLNODEID_GETRID:
				case SYS_XMLNODEID_GETSVAL:
				case SYS_XMLNODEID_GETTID:
				case SYS_XMLNODEID:
				case SYS_XMLT_2_SC:
				case SYS_XMLTRANSLATE:
				case SYS_XMLTYPE2SQL:
				case SYS_XQ_ASQLCNV:
				case SYS_XQ_ATOMCNVCHK:
				case SYS_XQBASEURI:
				case SYS_XQCASTABLEERRH:
				case SYS_XQCODEP2STR:
				case SYS_XQCODEPEQ:
				case SYS_XQCON2SEQ:
				case SYS_XQCONCAT:
				case SYS_XQDELETE:
				case SYS_XQDFLTCOLATION:
				case SYS_XQDOC:
				case SYS_XQDOCURI:
				case SYS_XQDURDIV:
				case SYS_XQED4URI:
				case SYS_XQENDSWITH:
				case SYS_XQERRH:
				case SYS_XQERR:
				case SYS_XQESHTMLURI:
				case SYS_XQEXLOBVAL:
				case SYS_XQEXSTWRP:
				case SYS_XQEXTRACT:
				case SYS_XQEXTRREF:
				case SYS_XQEXVAL:
				case SYS_XQFB2STR:
				case SYS_XQFNBOOL:
				case SYS_XQFNCMP:
				case SYS_XQFNDATIM:
				case SYS_XQFNLNAME:
				case SYS_XQFNNM:
				case SYS_XQFNNSURI:
				case SYS_XQFNPREDTRUTH:
				case SYS_XQFNQNM:
				case SYS_XQFNROOT:
				case SYS_XQFORMATNUM:
				case SYS_XQFTCONTAIN:
				case SYS_XQFUNCR:
				case SYS_XQGETCONTENT:
				case SYS_XQINDXOF:
				case SYS_XQINSERT:
				case SYS_XQINSPFX:
				case SYS_XQIRI2URI:
				case SYS_XQLANG:
				case SYS_XQLLNMFRMQNM:
				case SYS_XQMKNODEREF:
				case SYS_XQNILLED:
				case SYS_XQNODENAME:
				case SYS_XQNORMSPACE:
				case SYS_XQNORMUCODE:
				case SYS_XQ_NRNG:
				case SYS_XQNSP4PFX:
				case SYS_XQNSPFRMQNM:
				case SYS_XQPFXFRMQNM:
				case SYS_XQ_PKSQL2XML:
				case SYS_XQPOLYABS:
				case SYS_XQPOLYADD:
				case SYS_XQPOLYCEL:
				case SYS_XQPOLYCSTBL:
				case SYS_XQPOLYCST:
				case SYS_XQPOLYDIV:
				case SYS_XQPOLYFLR:
				case SYS_XQPOLYMOD:
				case SYS_XQPOLYMUL:
				case SYS_XQPOLYRND:
				case SYS_XQPOLYSQRT:
				case SYS_XQPOLYSUB:
				case SYS_XQPOLYUMUS:
				case SYS_XQPOLYUPLS:
				case SYS_XQPOLYVEQ:
				case SYS_XQPOLYVGE:
				case SYS_XQPOLYVGT:
				case SYS_XQPOLYVLE:
				case SYS_XQPOLYVLT:
				case SYS_XQPOLYVNE:
				case SYS_XQREF2VAL:
				case SYS_XQRENAME:
				case SYS_XQREPLACE:
				case SYS_XQRESVURI:
				case SYS_XQRNDHALF2EVN:
				case SYS_XQRSLVQNM:
				case SYS_XQRYENVPGET:
				case SYS_XQRYVARGET:
				case SYS_XQRYWRP:
				case SYS_XQSEQ2CON4XC:
				case SYS_XQSEQ2CON:
				case SYS_XQSEQDEEPEQ:
				case SYS_XQSEQINSB:
				case SYS_XQSEQRM:
				case SYS_XQSEQRVS:
				case SYS_XQSEQSUB:
				case SYS_XQSEQTYPMATCH:
				case SYS_XQSTARTSWITH:
				case SYS_XQSTATBURI:
				case SYS_XQSTR2CODEP:
				case SYS_XQSTRJOIN:
				case SYS_XQSUBSTRAFT:
				case SYS_XQSUBSTRBEF:
				case SYS_XQTOKENIZE:
				case SYS_XQTREATAS:
				case SYS_XQ_UPKXML2SQL:
				case SYS_XQXFORM:
				case SYS_XSID_TO_RAW:
				case SYS_ZMAP_FILTER:
				case SYS_ZMAP_REFRESH:
				case T_LETTER:
				case TABLE_LOOKUP_BY_NL:
				case TABLESPACE_NO:
				case TABLESPACE:
				case TABLES:
				case TABLE_STATS:
				case TABLE:
				case TABNO:
				case TAG:
				case TANH:
				case TAN:
				case TBLORIDXPARTNUM:
				case TEMPFILE:
				case TEMPLATE:
				case TEMPORARY:
				case TEMP_TABLE:
				case TEST:
				case TEXT:
				case THAN:
				case THEN:
				case THE:
				case THREAD:
				case THROUGH:
				case TIER:
				case TIES:
				case TIMEOUT:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMES:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_OFFSET:
				case TIMEZONE_REGION:
				case TIME_ZONE:
				case TIMING:
				case TIV_GB:
				case TIV_SSF:
				case TO_ACLID:
				case TO_BINARY_DOUBLE:
				case TO_BINARY_FLOAT:
				case TO_BLOB:
				case TO_CLOB:
				case TO_DSINTERVAL:
				case TO_LOB:
				case TO_MULTI_BYTE:
				case TO_NCHAR:
				case TO_NCLOB:
				case TO_NUMBER:
				case TOPLEVEL:
				case TO_SINGLE_BYTE:
				case TO_TIMESTAMP:
				case TO_TIMESTAMP_TZ:
				case TO_TIME:
				case TO_TIME_TZ:
				case TO_YMINTERVAL:
				case TRACE:
				case TRACING:
				case TRACKING:
				case TRAILING:
				case TRANSACTION:
				case TRANSFORM:
				case TRANSFORM_DISTINCT_AGG:
				case TRANSITIONAL:
				case TRANSITION:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGERS:
				case TRIGGER:
				case TRUE:
				case TRUNCATE:
				case TRUNC:
				case TRUSTED:
				case TRUST:
				case TUNING:
				case TX:
				case TYPES:
				case TYPE:
				case TZ_OFFSET:
				case UB2:
				case UBA:
				case UCS2:
				case UID:
				case UNARCHIVED:
				case UNBOUNDED:
				case UNBOUND:
				case UNCONDITIONAL:
				case UNDER:
				case UNDO:
				case UNDROP:
				case UNIFORM:
				case UNISTR:
				case UNLIMITED:
				case UNLOAD:
				case UNLOCK:
				case UNMATCHED:
				case UNNEST_INNERJ_DISTINCT_VIEW:
				case UNNEST_NOSEMIJ_NODISTINCTVIEW:
				case UNNEST_SEMIJ_VIEW:
				case UNNEST:
				case UNPACKED:
				case UNPIVOT:
				case UNPLUG:
				case UNPROTECTED:
				case UNQUIESCE:
				case UNRECOVERABLE:
				case UNRESTRICTED:
				case UNSUBSCRIBE:
				case UNTIL:
				case UNUSABLE:
				case UNUSED:
				case UPDATABLE:
				case UPDATED:
				case UPDATEXML:
				case UPD_INDEXES:
				case UPD_JOININDEX:
				case UPGRADE:
				case UPPER:
				case UPSERT:
				case UROWID:
				case USABLE:
				case USAGE:
				case USE_ANTI:
				case USE_CONCAT:
				case USE_CUBE:
				case USE_HASH_AGGREGATION:
				case USE_HASH_GBY_FOR_PUSHDOWN:
				case USE_HASH:
				case USE_HIDDEN_PARTITIONS:
				case USE_INVISIBLE_INDEXES:
				case USE_MERGE_CARTESIAN:
				case USE_MERGE:
				case USE_NL:
				case USE_NL_WITH_INDEX:
				case USE_PRIVATE_OUTLINES:
				case USER_DATA:
				case USER_DEFINED:
				case USERENV:
				case USERGROUP:
				case USER_RECYCLEBIN:
				case USERS:
				case USER_TABLESPACES:
				case USER:
				case USE_SEMI:
				case USE_STORED_OUTLINES:
				case USE_TTT_FOR_GSETS:
				case USE:
				case USE_VECTOR_AGGREGATION:
				case USE_WEAK_NAME_RESL:
				case USING_NO_EXPAND:
				case USING:
				case UTF16BE:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case V1:
				case V2:
				case VALIDATE:
				case VALIDATE_CONVERSION:
				case VALIDATION:
				case VALID_TIME_END:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VAR_POP:
				case VARRAYS:
				case VARRAY:
				case VAR_SAMP:
				case VARYING:
				case VECTOR_READ_TRACE:
				case VECTOR_READ:
				case VECTOR_TRANSFORM_DIMS:
				case VECTOR_TRANSFORM_FACT:
				case VECTOR_TRANSFORM:
				case VERIFIER:
				case VERIFY:
				case VERSIONING:
				case VERSIONS_ENDSCN:
				case VERSIONS_ENDTIME:
				case VERSIONS_OPERATION:
				case VERSIONS_STARTSCN:
				case VERSIONS_STARTTIME:
				case VERSIONS:
				case VERSIONS_XID:
				case VERSION:
				case VIOLATION:
				case VIRTUAL:
				case VISIBILITY:
				case VISIBLE:
				case VOLUME:
				case VSIZE:
				case WAIT:
				case WALLET:
				case WARNING:
				case WEEKS:
				case WEEK:
				case WELLFORMED:
				case WHENEVER:
				case WHEN:
				case WHILE:
				case WHITESPACE:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WITH_PLSQL:
				case WORK:
				case WRAPPED:
				case WRAPPER:
				case WRITE:
				case XDB_FASTPATH_INSERT:
				case X_DYN_PRUNE:
				case XID:
				case XML2OBJECT:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCDATA:
				case XMLCOLATTVAL:
				case XMLCOMMENT:
				case XMLCONCAT:
				case XMLDIFF:
				case XML_DML_RWT_STMT:
				case XMLELEMENT:
				case XMLEXISTS2:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLINDEX_REWRITE_IN_SELECT:
				case XMLINDEX_REWRITE:
				case XMLINDEX_SEL_IDX_TBL:
				case XMLISNODE:
				case XMLISVALID:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPATCH:
				case XMLPI:
				case XMLQUERYVAL:
				case XMLQUERY:
				case XMLROOT:
				case XMLSCHEMA:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XMLTRANSFORMBLOB:
				case XMLTRANSFORM:
				case XMLTYPE:
				case XML:
				case XPATHTABLE:
				case XS_SYS_CONTEXT:
				case XS:
				case YEARS:
				case YEAR:
				case YEAROFWEEK:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONEMAP:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case BLOCKCHAIN:
				case COLLATE:
				case COLLATION:
				case DEFINITION:
				case DUPLICATED:
				case EXTENDED:
				case HASHING:
				case IDLE:
				case IMMUTABLE:
				case ORACLE_DATAPUMP:
				case ORACLE_HDFS:
				case ORACLE_HIVE:
				case ORACLE_LOADER:
				case SHARDED:
				case ISOLATE:
				case ROOT:
				case UNITE:
				case ALGORITHM:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case DECODE:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MEMOPTIMIZE:
				case MIN:
				case NTILE:
				case NVL:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROUND:
				case ROW_NUMBER:
				case SUBSTR:
				case TO_CHAR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case LEAST:
				case GREATEST:
				case TO_DATE:
				case PERIOD:
				case DELIMITED_ID:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(644);
					cursor_name();
					setState(650);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(645);
						match(LEFT_PAREN);
						setState(647);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -283673999966210L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1126037379612685L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -2323857682634637313L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9007199254740993L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -281474976710913L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -65537L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -9288674768322625L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & -281474977235137L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & -1152921504606846977L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1153203254507601937L) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & -281475110928385L) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & -294649859L) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & -9007207844675585L) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & -4611686018427387905L) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & -140737488879617L) != 0) || ((((_la - 960)) & ~0x3f) == 0 && ((1L << (_la - 960)) & -562949953421313L) != 0) || ((((_la - 1024)) & ~0x3f) == 0 && ((1L << (_la - 1024)) & -1L) != 0) || ((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & -144115188075855873L) != 0) || ((((_la - 1152)) & ~0x3f) == 0 && ((1L << (_la - 1152)) & -70379482644481L) != 0) || ((((_la - 1216)) & ~0x3f) == 0 && ((1L << (_la - 1216)) & -274877915649L) != 0) || ((((_la - 1280)) & ~0x3f) == 0 && ((1L << (_la - 1280)) & -4298752257L) != 0) || ((((_la - 1344)) & ~0x3f) == 0 && ((1L << (_la - 1344)) & -1L) != 0) || ((((_la - 1408)) & ~0x3f) == 0 && ((1L << (_la - 1408)) & -144115188075855873L) != 0) || ((((_la - 1472)) & ~0x3f) == 0 && ((1L << (_la - 1472)) & -1073743873L) != 0) || ((((_la - 1536)) & ~0x3f) == 0 && ((1L << (_la - 1536)) & -9007203566485505L) != 0) || ((((_la - 1600)) & ~0x3f) == 0 && ((1L << (_la - 1600)) & -17592186044673L) != 0) || ((((_la - 1664)) & ~0x3f) == 0 && ((1L << (_la - 1664)) & -274877906945L) != 0) || ((((_la - 1728)) & ~0x3f) == 0 && ((1L << (_la - 1728)) & -1L) != 0) || ((((_la - 1792)) & ~0x3f) == 0 && ((1L << (_la - 1792)) & -1L) != 0) || ((((_la - 1856)) & ~0x3f) == 0 && ((1L << (_la - 1856)) & -1L) != 0) || ((((_la - 1920)) & ~0x3f) == 0 && ((1L << (_la - 1920)) & -1L) != 0) || ((((_la - 1984)) & ~0x3f) == 0 && ((1L << (_la - 1984)) & -288230378299195393L) != 0) || ((((_la - 2048)) & ~0x3f) == 0 && ((1L << (_la - 2048)) & -72057606922829825L) != 0) || ((((_la - 2112)) & ~0x3f) == 0 && ((1L << (_la - 2112)) & -2199023255553L) != 0) || ((((_la - 2176)) & ~0x3f) == 0 && ((1L << (_la - 2176)) & -281477158010889L) != 0) || ((((_la - 2240)) & ~0x3f) == 0 && ((1L << (_la - 2240)) & -27021683663569025L) != 0) || ((((_la - 2304)) & ~0x3f) == 0 && ((1L << (_la - 2304)) & 36600612611043327L) != 0)) {
							{
							setState(646);
							expressions();
							}
						}

						setState(649);
						match(RIGHT_PAREN);
						}
					}

					}
					break;
				case LEFT_PAREN:
					{
					setState(652);
					match(LEFT_PAREN);
					setState(653);
					select_statement();
					setState(654);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_only_statementContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Select_only_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_only_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSelect_only_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSelect_only_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSelect_only_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_only_statementContext select_only_statement() throws RecognitionException {
		Select_only_statementContext _localctx = new Select_only_statementContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_select_only_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(660);
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lower_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lower_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLower_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLower_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitLower_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lower_boundContext lower_bound() throws RecognitionException {
		Lower_boundContext _localctx = new Lower_boundContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_lower_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(662);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Upper_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upper_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUpper_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUpper_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitUpper_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Upper_boundContext upper_bound() throws RecognitionException {
		Upper_boundContext _localctx = new Upper_boundContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_upper_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(664);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Raise_statementContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(PlSqlParser.RAISE, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raise_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRaise_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRaise_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRaise_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Raise_statementContext raise_statement() throws RecognitionException {
		Raise_statementContext _localctx = new Raise_statementContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_raise_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(666);
			match(RAISE);
			setState(668);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9291010693660674L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1126037379612685L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -2323857682634637313L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9007199254740993L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -281474976710913L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -281474985164801L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -9288679063289921L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & -281474977235137L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & -1152921504606846977L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1153203254507601937L) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & -281475110928385L) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & -294649859L) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & -9007207844675585L) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & -4611686018427387905L) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & -140737488879617L) != 0) || ((((_la - 960)) & ~0x3f) == 0 && ((1L << (_la - 960)) & -562949953421313L) != 0) || ((((_la - 1024)) & ~0x3f) == 0 && ((1L << (_la - 1024)) & -1L) != 0) || ((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & -144119586122366977L) != 0) || ((((_la - 1152)) & ~0x3f) == 0 && ((1L << (_la - 1152)) & -70379482644485L) != 0) || ((((_la - 1216)) & ~0x3f) == 0 && ((1L << (_la - 1216)) & -274877915649L) != 0) || ((((_la - 1280)) & ~0x3f) == 0 && ((1L << (_la - 1280)) & -4298752257L) != 0) || ((((_la - 1344)) & ~0x3f) == 0 && ((1L << (_la - 1344)) & -33554433L) != 0) || ((((_la - 1408)) & ~0x3f) == 0 && ((1L << (_la - 1408)) & -144115188075855873L) != 0) || ((((_la - 1472)) & ~0x3f) == 0 && ((1L << (_la - 1472)) & -1073743873L) != 0) || ((((_la - 1536)) & ~0x3f) == 0 && ((1L << (_la - 1536)) & -9007203566485505L) != 0) || ((((_la - 1600)) & ~0x3f) == 0 && ((1L << (_la - 1600)) & -17592186044673L) != 0) || ((((_la - 1664)) & ~0x3f) == 0 && ((1L << (_la - 1664)) & -274877906945L) != 0) || ((((_la - 1728)) & ~0x3f) == 0 && ((1L << (_la - 1728)) & -1L) != 0) || ((((_la - 1792)) & ~0x3f) == 0 && ((1L << (_la - 1792)) & -1L) != 0) || ((((_la - 1856)) & ~0x3f) == 0 && ((1L << (_la - 1856)) & -1L) != 0) || ((((_la - 1920)) & ~0x3f) == 0 && ((1L << (_la - 1920)) & -1L) != 0) || ((((_la - 1984)) & ~0x3f) == 0 && ((1L << (_la - 1984)) & -288230378299195393L) != 0) || ((((_la - 2048)) & ~0x3f) == 0 && ((1L << (_la - 2048)) & -72057606922829825L) != 0) || ((((_la - 2112)) & ~0x3f) == 0 && ((1L << (_la - 2112)) & -2199023255553L) != 0) || ((((_la - 2176)) & ~0x3f) == 0 && ((1L << (_la - 2176)) & -281477158010889L) != 0) || ((((_la - 2240)) & ~0x3f) == 0 && ((1L << (_la - 2240)) & -27021683663569025L) != 0) || ((((_la - 2304)) & ~0x3f) == 0 && ((1L << (_la - 2304)) & 36591746974617599L) != 0)) {
				{
				setState(667);
				exception_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Return_statementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReturn_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitReturn_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_return_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(670);
			match(RETURN);
			setState(672);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -283673999966210L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1126037379612685L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -2323857682634637313L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9007199254740993L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -281474976710913L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -65537L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -9288674768322625L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & -281474977235137L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & -1152921504606846977L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1153203254507601937L) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & -281475110928385L) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & -294649859L) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & -9007207844675585L) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & -4611686018427387905L) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & -140737488879617L) != 0) || ((((_la - 960)) & ~0x3f) == 0 && ((1L << (_la - 960)) & -562949953421313L) != 0) || ((((_la - 1024)) & ~0x3f) == 0 && ((1L << (_la - 1024)) & -1L) != 0) || ((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & -144115188075855873L) != 0) || ((((_la - 1152)) & ~0x3f) == 0 && ((1L << (_la - 1152)) & -70379482644481L) != 0) || ((((_la - 1216)) & ~0x3f) == 0 && ((1L << (_la - 1216)) & -274877915649L) != 0) || ((((_la - 1280)) & ~0x3f) == 0 && ((1L << (_la - 1280)) & -4298752257L) != 0) || ((((_la - 1344)) & ~0x3f) == 0 && ((1L << (_la - 1344)) & -1L) != 0) || ((((_la - 1408)) & ~0x3f) == 0 && ((1L << (_la - 1408)) & -144115188075855873L) != 0) || ((((_la - 1472)) & ~0x3f) == 0 && ((1L << (_la - 1472)) & -1073743873L) != 0) || ((((_la - 1536)) & ~0x3f) == 0 && ((1L << (_la - 1536)) & -9007203566485505L) != 0) || ((((_la - 1600)) & ~0x3f) == 0 && ((1L << (_la - 1600)) & -17592186044673L) != 0) || ((((_la - 1664)) & ~0x3f) == 0 && ((1L << (_la - 1664)) & -274877906945L) != 0) || ((((_la - 1728)) & ~0x3f) == 0 && ((1L << (_la - 1728)) & -1L) != 0) || ((((_la - 1792)) & ~0x3f) == 0 && ((1L << (_la - 1792)) & -1L) != 0) || ((((_la - 1856)) & ~0x3f) == 0 && ((1L << (_la - 1856)) & -1L) != 0) || ((((_la - 1920)) & ~0x3f) == 0 && ((1L << (_la - 1920)) & -1L) != 0) || ((((_la - 1984)) & ~0x3f) == 0 && ((1L << (_la - 1984)) & -288230378299195393L) != 0) || ((((_la - 2048)) & ~0x3f) == 0 && ((1L << (_la - 2048)) & -72057606922829825L) != 0) || ((((_la - 2112)) & ~0x3f) == 0 && ((1L << (_la - 2112)) & -2199023255553L) != 0) || ((((_la - 2176)) & ~0x3f) == 0 && ((1L << (_la - 2176)) & -281477158010889L) != 0) || ((((_la - 2240)) & ~0x3f) == 0 && ((1L << (_la - 2240)) & -27021683663569025L) != 0) || ((((_la - 2304)) & ~0x3f) == 0 && ((1L << (_la - 2304)) & 36600612611043327L) != 0)) {
				{
				setState(671);
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Call_statementContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Call_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCall_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCall_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCall_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Call_statementContext call_statement() throws RecognitionException {
		Call_statementContext _localctx = new Call_statementContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_call_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(675);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				setState(674);
				match(CALL);
				}
				break;
			}
			setState(677);
			routine_name();
			setState(679);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(678);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BodyContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public List<Exception_handlerContext> exception_handler() {
			return getRuleContexts(Exception_handlerContext.class);
		}
		public Exception_handlerContext exception_handler(int i) {
			return getRuleContext(Exception_handlerContext.class,i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(681);
			match(BEGIN);
			setState(682);
			seq_of_statements();
			setState(689);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(683);
				match(EXCEPTION);
				setState(685); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(684);
					exception_handler();
					}
					}
					setState(687); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				}
			}

			setState(691);
			match(END);
			setState(693);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9291010693660674L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1126037379612685L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -2323857682634637313L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9007199254740993L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -281474976710913L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -281474985164801L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -9288679063289921L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & -281474977235137L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & -1152921504606846977L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1153203254507601937L) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & -281475110928385L) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & -294649859L) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & -9007207844675585L) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & -4611686018427387905L) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & -140737488879617L) != 0) || ((((_la - 960)) & ~0x3f) == 0 && ((1L << (_la - 960)) & -562949953421313L) != 0) || ((((_la - 1024)) & ~0x3f) == 0 && ((1L << (_la - 1024)) & -1L) != 0) || ((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & -144119586122366977L) != 0) || ((((_la - 1152)) & ~0x3f) == 0 && ((1L << (_la - 1152)) & -70379482644485L) != 0) || ((((_la - 1216)) & ~0x3f) == 0 && ((1L << (_la - 1216)) & -274877915649L) != 0) || ((((_la - 1280)) & ~0x3f) == 0 && ((1L << (_la - 1280)) & -4298752257L) != 0) || ((((_la - 1344)) & ~0x3f) == 0 && ((1L << (_la - 1344)) & -33554433L) != 0) || ((((_la - 1408)) & ~0x3f) == 0 && ((1L << (_la - 1408)) & -144115188075855873L) != 0) || ((((_la - 1472)) & ~0x3f) == 0 && ((1L << (_la - 1472)) & -1073743873L) != 0) || ((((_la - 1536)) & ~0x3f) == 0 && ((1L << (_la - 1536)) & -9007203566485505L) != 0) || ((((_la - 1600)) & ~0x3f) == 0 && ((1L << (_la - 1600)) & -17592186044673L) != 0) || ((((_la - 1664)) & ~0x3f) == 0 && ((1L << (_la - 1664)) & -274877906945L) != 0) || ((((_la - 1728)) & ~0x3f) == 0 && ((1L << (_la - 1728)) & -1L) != 0) || ((((_la - 1792)) & ~0x3f) == 0 && ((1L << (_la - 1792)) & -1L) != 0) || ((((_la - 1856)) & ~0x3f) == 0 && ((1L << (_la - 1856)) & -1L) != 0) || ((((_la - 1920)) & ~0x3f) == 0 && ((1L << (_la - 1920)) & -1L) != 0) || ((((_la - 1984)) & ~0x3f) == 0 && ((1L << (_la - 1984)) & -288230378299195393L) != 0) || ((((_la - 2048)) & ~0x3f) == 0 && ((1L << (_la - 2048)) & -72057606922829825L) != 0) || ((((_la - 2112)) & ~0x3f) == 0 && ((1L << (_la - 2112)) & -2199023255553L) != 0) || ((((_la - 2176)) & ~0x3f) == 0 && ((1L << (_la - 2176)) & -281477158010889L) != 0) || ((((_la - 2240)) & ~0x3f) == 0 && ((1L << (_la - 2240)) & -27021683663569025L) != 0) || ((((_la - 2304)) & ~0x3f) == 0 && ((1L << (_la - 2304)) & 36028797021196287L) != 0)) {
				{
				setState(692);
				label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Exception_handlerContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public List<Exception_nameContext> exception_name() {
			return getRuleContexts(Exception_nameContext.class);
		}
		public Exception_nameContext exception_name(int i) {
			return getRuleContext(Exception_nameContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public Exception_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterException_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitException_handler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitException_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_handlerContext exception_handler() throws RecognitionException {
		Exception_handlerContext _localctx = new Exception_handlerContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_exception_handler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(695);
			match(WHEN);
			setState(696);
			exception_name();
			setState(701);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(697);
				match(OR);
				setState(698);
				exception_name();
				}
				}
				setState(703);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(704);
			match(THEN);
			setState(705);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BlockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockContext block() throws RecognitionException {
		BlockContext _localctx = new BlockContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_block);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(708);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				setState(707);
				match(DECLARE);
				}
				break;
			}
			setState(711); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(710);
					declare_spec();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(713); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,66,_ctx);
			} while ( _alt!=2 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(715);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sql_statementContext extends ParserRuleContext {
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSql_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSql_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSql_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_statementContext sql_statement() throws RecognitionException {
		Sql_statementContext _localctx = new Sql_statementContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_sql_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(717);
			data_manipulation_language_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Data_manipulation_language_statementsContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Create_table_as2Context create_table_as2() {
			return getRuleContext(Create_table_as2Context.class,0);
		}
		public Truncate_table_block2Context truncate_table_block2() {
			return getRuleContext(Truncate_table_block2Context.class,0);
		}
		public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_manipulation_language_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterData_manipulation_language_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitData_manipulation_language_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitData_manipulation_language_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_manipulation_language_statementsContext data_manipulation_language_statements() throws RecognitionException {
		Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_data_manipulation_language_statements);
		try {
			setState(726);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MERGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(719);
				merge_statement();
				}
				break;
			case SELECT:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(720);
				select_statement();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(721);
				update_statement();
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(722);
				delete_statement();
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 5);
				{
				setState(723);
				insert_statement();
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 6);
				{
				setState(724);
				create_table_as2();
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(725);
				truncate_table_block2();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_statementContext extends ParserRuleContext {
		public Select_only_statementContext select_only_statement() {
			return getRuleContext(Select_only_statementContext.class,0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSelect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_select_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(728);
			select_only_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubqueryContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_subquery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(730);
			subquery_basic_elements();
			setState(734);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTERSECT || _la==MINUS || _la==UNION) {
				{
				{
				setState(731);
				subquery_operation_part();
				}
				}
				setState(736);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subquery_basic_elementsContext extends ParserRuleContext {
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Subquery_basic_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_basic_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubquery_basic_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubquery_basic_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSubquery_basic_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_basic_elementsContext subquery_basic_elements() throws RecognitionException {
		Subquery_basic_elementsContext _localctx = new Subquery_basic_elementsContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_subquery_basic_elements);
		try {
			setState(742);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(737);
				query_block();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(738);
				match(LEFT_PAREN);
				setState(739);
				subquery();
				setState(740);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subquery_operation_partContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public TerminalNode UNION() { return getToken(PlSqlParser.UNION, 0); }
		public TerminalNode INTERSECT() { return getToken(PlSqlParser.INTERSECT, 0); }
		public TerminalNode MINUS() { return getToken(PlSqlParser.MINUS, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Subquery_operation_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_operation_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubquery_operation_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubquery_operation_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSubquery_operation_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_operation_partContext subquery_operation_part() throws RecognitionException {
		Subquery_operation_partContext _localctx = new Subquery_operation_partContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_subquery_operation_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(750);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(744);
				match(UNION);
				setState(746);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(745);
					match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				{
				setState(748);
				match(INTERSECT);
				}
				break;
			case MINUS:
				{
				setState(749);
				match(MINUS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(752);
			subquery_basic_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_blockContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PlSqlParser.SELECT, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Select_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSelect_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSelect_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSelect_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_blockContext select_block() throws RecognitionException {
		Select_blockContext _localctx = new Select_blockContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_select_block);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(754);
			match(SELECT);
			setState(758);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,72,_ctx);
			while ( _alt!=1 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					setState(755);
					matchWildcard();
					}
					} 
				}
				setState(760);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,72,_ctx);
			}
			setState(761);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Query_blockContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PlSqlParser.SELECT, 0); }
		public Query_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterQuery_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitQuery_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitQuery_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_blockContext query_block() throws RecognitionException {
		Query_blockContext _localctx = new Query_blockContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_query_block);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(763);
			match(SELECT);
			setState(767);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,73,_ctx);
			while ( _alt!=1 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					setState(764);
					matchWildcard();
					}
					} 
				}
				setState(769);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,73,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rollup_cube_clauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode ROLLUP() { return getToken(PlSqlParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(PlSqlParser.CUBE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_cube_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRollup_cube_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRollup_cube_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRollup_cube_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollup_cube_clauseContext rollup_cube_clause() throws RecognitionException {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_rollup_cube_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(770);
			_la = _input.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(771);
			match(LEFT_PAREN);
			setState(772);
			grouping_sets_elements();
			setState(777);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(773);
				match(COMMA);
				setState(774);
				grouping_sets_elements();
				}
				}
				setState(779);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(780);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grouping_sets_elementsContext extends ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGrouping_sets_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGrouping_sets_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitGrouping_sets_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_elementsContext grouping_sets_elements() throws RecognitionException {
		Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_grouping_sets_elements);
		int _la;
		try {
			setState(789);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(782);
				rollup_cube_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(783);
				match(LEFT_PAREN);
				setState(785);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -283673999966210L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1126037379612685L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -2323857682634637313L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9007199254740993L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -281474976710913L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -65537L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -9288674768322625L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & -281474977235137L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & -1152921504606846977L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1153203254507601937L) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & -281475110928385L) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & -294649859L) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & -9007207844675585L) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & -4611686018427387905L) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & -140737488879617L) != 0) || ((((_la - 960)) & ~0x3f) == 0 && ((1L << (_la - 960)) & -562949953421313L) != 0) || ((((_la - 1024)) & ~0x3f) == 0 && ((1L << (_la - 1024)) & -1L) != 0) || ((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & -144115188075855873L) != 0) || ((((_la - 1152)) & ~0x3f) == 0 && ((1L << (_la - 1152)) & -70379482644481L) != 0) || ((((_la - 1216)) & ~0x3f) == 0 && ((1L << (_la - 1216)) & -274877915649L) != 0) || ((((_la - 1280)) & ~0x3f) == 0 && ((1L << (_la - 1280)) & -4298752257L) != 0) || ((((_la - 1344)) & ~0x3f) == 0 && ((1L << (_la - 1344)) & -1L) != 0) || ((((_la - 1408)) & ~0x3f) == 0 && ((1L << (_la - 1408)) & -144115188075855873L) != 0) || ((((_la - 1472)) & ~0x3f) == 0 && ((1L << (_la - 1472)) & -1073743873L) != 0) || ((((_la - 1536)) & ~0x3f) == 0 && ((1L << (_la - 1536)) & -9007203566485505L) != 0) || ((((_la - 1600)) & ~0x3f) == 0 && ((1L << (_la - 1600)) & -17592186044673L) != 0) || ((((_la - 1664)) & ~0x3f) == 0 && ((1L << (_la - 1664)) & -274877906945L) != 0) || ((((_la - 1728)) & ~0x3f) == 0 && ((1L << (_la - 1728)) & -1L) != 0) || ((((_la - 1792)) & ~0x3f) == 0 && ((1L << (_la - 1792)) & -1L) != 0) || ((((_la - 1856)) & ~0x3f) == 0 && ((1L << (_la - 1856)) & -1L) != 0) || ((((_la - 1920)) & ~0x3f) == 0 && ((1L << (_la - 1920)) & -1L) != 0) || ((((_la - 1984)) & ~0x3f) == 0 && ((1L << (_la - 1984)) & -288230378299195393L) != 0) || ((((_la - 2048)) & ~0x3f) == 0 && ((1L << (_la - 2048)) & -72057606922829825L) != 0) || ((((_la - 2112)) & ~0x3f) == 0 && ((1L << (_la - 2112)) & -2199023255553L) != 0) || ((((_la - 2176)) & ~0x3f) == 0 && ((1L << (_la - 2176)) & -281477158010889L) != 0) || ((((_la - 2240)) & ~0x3f) == 0 && ((1L << (_la - 2240)) & -27021683663569025L) != 0) || ((((_la - 2304)) & ~0x3f) == 0 && ((1L << (_la - 2304)) & 36600612611043327L) != 0)) {
					{
					setState(784);
					expressions();
					}
				}

				setState(787);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(788);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Update_blockContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Update_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUpdate_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUpdate_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitUpdate_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_blockContext update_block() throws RecognitionException {
		Update_blockContext _localctx = new Update_blockContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_update_block);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(791);
			match(UPDATE);
			setState(795);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,77,_ctx);
			while ( _alt!=1 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					setState(792);
					matchWildcard();
					}
					} 
				}
				setState(797);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,77,_ctx);
			}
			setState(798);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Update_statementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUpdate_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_update_statement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(800);
			match(UPDATE);
			setState(804);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,78,_ctx);
			while ( _alt!=1 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					setState(801);
					matchWildcard();
					}
					} 
				}
				setState(806);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,78,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Delete_blockContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Delete_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDelete_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDelete_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDelete_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_blockContext delete_block() throws RecognitionException {
		Delete_blockContext _localctx = new Delete_blockContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_delete_block);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(807);
			match(DELETE);
			setState(808);
			match(FROM);
			setState(812);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,79,_ctx);
			while ( _alt!=1 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					setState(809);
					matchWildcard();
					}
					} 
				}
				setState(814);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,79,_ctx);
			}
			setState(815);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDelete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_delete_statement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(817);
			match(DELETE);
			setState(818);
			match(FROM);
			setState(822);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,80,_ctx);
			while ( _alt!=1 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					setState(819);
					matchWildcard();
					}
					} 
				}
				setState(824);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,80,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_blockContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Insert_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterInsert_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitInsert_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitInsert_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_blockContext insert_block() throws RecognitionException {
		Insert_blockContext _localctx = new Insert_blockContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_insert_block);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(825);
			match(INSERT);
			setState(829);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,81,_ctx);
			while ( _alt!=1 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					setState(826);
					matchWildcard();
					}
					} 
				}
				setState(831);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,81,_ctx);
			}
			setState(832);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_insert_statement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(834);
			match(INSERT);
			setState(838);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,82,_ctx);
			while ( _alt!=1 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					setState(835);
					matchWildcard();
					}
					} 
				}
				setState(840);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,82,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_bleckContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Set_bleckContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_bleck; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSet_bleck(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSet_bleck(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSet_bleck(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_bleckContext set_bleck() throws RecognitionException {
		Set_bleckContext _localctx = new Set_bleckContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_set_bleck);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(841);
			match(SET);
			setState(845);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,83,_ctx);
			while ( _alt!=1 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					setState(842);
					matchWildcard();
					}
					} 
				}
				setState(847);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,83,_ctx);
			}
			setState(848);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Truncate_table_blockContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Truncate_table_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_table_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTruncate_table_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTruncate_table_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTruncate_table_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Truncate_table_blockContext truncate_table_block() throws RecognitionException {
		Truncate_table_blockContext _localctx = new Truncate_table_blockContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_truncate_table_block);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(850);
			match(TRUNCATE);
			setState(851);
			match(TABLE);
			setState(855);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,84,_ctx);
			while ( _alt!=1 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					setState(852);
					matchWildcard();
					}
					} 
				}
				setState(857);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,84,_ctx);
			}
			setState(858);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Truncate_table_block2Context extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Truncate_table_block2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_table_block2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTruncate_table_block2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTruncate_table_block2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTruncate_table_block2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Truncate_table_block2Context truncate_table_block2() throws RecognitionException {
		Truncate_table_block2Context _localctx = new Truncate_table_block2Context(_ctx, getState());
		enterRule(_localctx, 130, RULE_truncate_table_block2);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(860);
			match(TRUNCATE);
			setState(861);
			match(TABLE);
			setState(865);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,85,_ctx);
			while ( _alt!=1 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					setState(862);
					matchWildcard();
					}
					} 
				}
				setState(867);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,85,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_blockContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Merge_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMerge_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMerge_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitMerge_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_blockContext merge_block() throws RecognitionException {
		Merge_blockContext _localctx = new Merge_blockContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_merge_block);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(868);
			match(MERGE);
			setState(869);
			match(INTO);
			setState(873);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,86,_ctx);
			while ( _alt!=1 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					setState(870);
					matchWildcard();
					}
					} 
				}
				setState(875);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,86,_ctx);
			}
			setState(876);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMerge_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitMerge_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_merge_statement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(878);
			match(MERGE);
			setState(879);
			match(INTO);
			setState(883);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,87,_ctx);
			while ( _alt!=1 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					setState(880);
					matchWildcard();
					}
					} 
				}
				setState(885);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,87,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConditionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionContext condition() throws RecognitionException {
		ConditionContext _localctx = new ConditionContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(886);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_expressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(888);
			expression();
			setState(893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(889);
				match(COMMA);
				setState(890);
				expression();
				}
				}
				setState(895);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionContext extends ParserRuleContext {
		public Logical_expressionContext logical_expression() {
			return getRuleContext(Logical_expressionContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(896);
			logical_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Logical_expressionContext extends ParserRuleContext {
		public Unary_logical_expressionContext unary_logical_expression() {
			return getRuleContext(Unary_logical_expressionContext.class,0);
		}
		public List<Logical_expressionContext> logical_expression() {
			return getRuleContexts(Logical_expressionContext.class);
		}
		public Logical_expressionContext logical_expression(int i) {
			return getRuleContext(Logical_expressionContext.class,i);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public Logical_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLogical_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLogical_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitLogical_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Logical_expressionContext logical_expression() throws RecognitionException {
		return logical_expression(0);
	}

	private Logical_expressionContext logical_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Logical_expressionContext _localctx = new Logical_expressionContext(_ctx, _parentState);
		Logical_expressionContext _prevctx = _localctx;
		int _startState = 142;
		enterRecursionRule(_localctx, 142, RULE_logical_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(899);
			unary_logical_expression();
			}
			_ctx.stop = _input.LT(-1);
			setState(909);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,90,_ctx);
			while ( _alt!=2 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(907);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
					case 1:
						{
						_localctx = new Logical_expressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_logical_expression);
						setState(901);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(902);
						match(AND);
						setState(903);
						logical_expression(3);
						}
						break;
					case 2:
						{
						_localctx = new Logical_expressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_logical_expression);
						setState(904);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(905);
						match(OR);
						setState(906);
						logical_expression(2);
						}
						break;
					}
					} 
				}
				setState(911);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,90,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unary_logical_expressionContext extends ParserRuleContext {
		public Multiset_expressionContext multiset_expression() {
			return getRuleContext(Multiset_expressionContext.class,0);
		}
		public List<TerminalNode> NOT() { return getTokens(PlSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(PlSqlParser.NOT, i);
		}
		public List<TerminalNode> IS() { return getTokens(PlSqlParser.IS); }
		public TerminalNode IS(int i) {
			return getToken(PlSqlParser.IS, i);
		}
		public List<Logical_operationContext> logical_operation() {
			return getRuleContexts(Logical_operationContext.class);
		}
		public Logical_operationContext logical_operation(int i) {
			return getRuleContext(Logical_operationContext.class,i);
		}
		public Unary_logical_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_logical_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnary_logical_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnary_logical_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitUnary_logical_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unary_logical_expressionContext unary_logical_expression() throws RecognitionException {
		Unary_logical_expressionContext _localctx = new Unary_logical_expressionContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_unary_logical_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(913);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(912);
				match(NOT);
				}
			}

			setState(915);
			multiset_expression();
			setState(923);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,93,_ctx);
			while ( _alt!=2 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(916);
					match(IS);
					setState(918);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(917);
						match(NOT);
						}
					}

					setState(920);
					logical_operation();
					}
					} 
				}
				setState(925);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,93,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Logical_operationContext extends ParserRuleContext {
		public TerminalNode NULL_() { return getToken(PlSqlParser.NULL_, 0); }
		public TerminalNode NAN() { return getToken(PlSqlParser.NAN, 0); }
		public TerminalNode PRESENT() { return getToken(PlSqlParser.PRESENT, 0); }
		public TerminalNode INFINITE() { return getToken(PlSqlParser.INFINITE, 0); }
		public TerminalNode A_LETTER() { return getToken(PlSqlParser.A_LETTER, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode EMPTY() { return getToken(PlSqlParser.EMPTY, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Logical_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_operation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLogical_operation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLogical_operation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitLogical_operation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Logical_operationContext logical_operation() throws RecognitionException {
		Logical_operationContext _localctx = new Logical_operationContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_logical_operation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(951);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL_:
				{
				setState(926);
				match(NULL_);
				}
				break;
			case NAN:
				{
				setState(927);
				match(NAN);
				}
				break;
			case PRESENT:
				{
				setState(928);
				match(PRESENT);
				}
				break;
			case INFINITE:
				{
				setState(929);
				match(INFINITE);
				}
				break;
			case A_LETTER:
				{
				setState(930);
				match(A_LETTER);
				setState(931);
				match(SET);
				}
				break;
			case EMPTY:
				{
				setState(932);
				match(EMPTY);
				}
				break;
			case OF:
				{
				setState(933);
				match(OF);
				setState(935);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPE) {
					{
					setState(934);
					match(TYPE);
					}
				}

				setState(937);
				match(LEFT_PAREN);
				setState(939);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
				case 1:
					{
					setState(938);
					match(ONLY);
					}
					break;
				}
				setState(941);
				type_spec();
				setState(946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(942);
					match(COMMA);
					setState(943);
					type_spec();
					}
					}
					setState(948);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(949);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Multiset_expressionContext extends ParserRuleContext {
		public Token multiset_type;
		public Relational_expressionContext relational_expression() {
			return getRuleContext(Relational_expressionContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode SUBMULTISET() { return getToken(PlSqlParser.SUBMULTISET, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Multiset_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMultiset_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMultiset_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitMultiset_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiset_expressionContext multiset_expression() throws RecognitionException {
		Multiset_expressionContext _localctx = new Multiset_expressionContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_multiset_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(953);
			relational_expression(0);
			setState(959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				setState(954);
				((Multiset_expressionContext)_localctx).multiset_type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
					((Multiset_expressionContext)_localctx).multiset_type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(956);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(955);
					match(OF);
					}
				}

				setState(958);
				concatenation(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Relational_expressionContext extends ParserRuleContext {
		public Compound_expressionContext compound_expression() {
			return getRuleContext(Compound_expressionContext.class,0);
		}
		public List<Relational_expressionContext> relational_expression() {
			return getRuleContexts(Relational_expressionContext.class);
		}
		public Relational_expressionContext relational_expression(int i) {
			return getRuleContext(Relational_expressionContext.class,i);
		}
		public Relational_operatorContext relational_operator() {
			return getRuleContext(Relational_operatorContext.class,0);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRelational_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRelational_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRelational_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_expressionContext relational_expression() throws RecognitionException {
		return relational_expression(0);
	}

	private Relational_expressionContext relational_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, _parentState);
		Relational_expressionContext _prevctx = _localctx;
		int _startState = 150;
		enterRecursionRule(_localctx, 150, RULE_relational_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(962);
			compound_expression();
			}
			_ctx.stop = _input.LT(-1);
			setState(970);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,100,_ctx);
			while ( _alt!=2 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Relational_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
					setState(964);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(965);
					relational_operator();
					setState(966);
					relational_expression(3);
					}
					} 
				}
				setState(972);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,100,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Compound_expressionContext extends ParserRuleContext {
		public Token like_type;
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public In_elementsContext in_elements() {
			return getRuleContext(In_elementsContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public Between_elementsContext between_elements() {
			return getRuleContext(Between_elementsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode LIKE() { return getToken(PlSqlParser.LIKE, 0); }
		public TerminalNode LIKEC() { return getToken(PlSqlParser.LIKEC, 0); }
		public TerminalNode LIKE2() { return getToken(PlSqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(PlSqlParser.LIKE4, 0); }
		public TerminalNode ESCAPE() { return getToken(PlSqlParser.ESCAPE, 0); }
		public Compound_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCompound_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCompound_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCompound_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_expressionContext compound_expression() throws RecognitionException {
		Compound_expressionContext _localctx = new Compound_expressionContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_compound_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(973);
			concatenation(0);
			setState(989);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,104,_ctx) ) {
			case 1:
				{
				setState(975);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(974);
					match(NOT);
					}
				}

				setState(987);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case IN:
					{
					setState(977);
					match(IN);
					setState(978);
					in_elements();
					}
					break;
				case BETWEEN:
					{
					setState(979);
					match(BETWEEN);
					setState(980);
					between_elements();
					}
					break;
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIKE:
					{
					setState(981);
					((Compound_expressionContext)_localctx).like_type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(((((_la - 797)) & ~0x3f) == 0 && ((1L << (_la - 797)) & 23L) != 0)) ) {
						((Compound_expressionContext)_localctx).like_type = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(982);
					concatenation(0);
					setState(985);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
					case 1:
						{
						setState(983);
						match(ESCAPE);
						setState(984);
						concatenation(0);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Relational_operatorContext extends ParserRuleContext {
		public TerminalNode EQUALS_OP() { return getToken(PlSqlParser.EQUALS_OP, 0); }
		public TerminalNode NOT_EQUAL_OP() { return getToken(PlSqlParser.NOT_EQUAL_OP, 0); }
		public TerminalNode LESS_THAN_OP() { return getToken(PlSqlParser.LESS_THAN_OP, 0); }
		public TerminalNode GREATER_THAN_OP() { return getToken(PlSqlParser.GREATER_THAN_OP, 0); }
		public TerminalNode EXCLAMATION_OPERATOR_PART() { return getToken(PlSqlParser.EXCLAMATION_OPERATOR_PART, 0); }
		public TerminalNode CARRET_OPERATOR_PART() { return getToken(PlSqlParser.CARRET_OPERATOR_PART, 0); }
		public Relational_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRelational_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRelational_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRelational_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_operatorContext relational_operator() throws RecognitionException {
		Relational_operatorContext _localctx = new Relational_operatorContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_relational_operator);
		int _la;
		try {
			setState(1005);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(991);
				match(EQUALS_OP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(999);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NOT_EQUAL_OP:
					{
					setState(992);
					match(NOT_EQUAL_OP);
					}
					break;
				case LESS_THAN_OP:
					{
					setState(993);
					match(LESS_THAN_OP);
					setState(994);
					match(GREATER_THAN_OP);
					}
					break;
				case EXCLAMATION_OPERATOR_PART:
					{
					setState(995);
					match(EXCLAMATION_OPERATOR_PART);
					setState(996);
					match(EQUALS_OP);
					}
					break;
				case CARRET_OPERATOR_PART:
					{
					setState(997);
					match(CARRET_OPERATOR_PART);
					setState(998);
					match(EQUALS_OP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1001);
				_la = _input.LA(1);
				if ( !(_la==GREATER_THAN_OP || _la==LESS_THAN_OP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1003);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1002);
					match(EQUALS_OP);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class In_elementsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public In_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIn_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIn_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitIn_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_elementsContext in_elements() throws RecognitionException {
		In_elementsContext _localctx = new In_elementsContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_in_elements);
		int _la;
		try {
			setState(1025);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1007);
				match(LEFT_PAREN);
				setState(1008);
				subquery();
				setState(1009);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1011);
				match(LEFT_PAREN);
				setState(1012);
				concatenation(0);
				setState(1017);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1013);
					match(COMMA);
					setState(1014);
					concatenation(0);
					}
					}
					setState(1019);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1020);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1022);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1023);
				bind_variable();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1024);
				general_element();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Between_elementsContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public Between_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBetween_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBetween_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitBetween_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Between_elementsContext between_elements() throws RecognitionException {
		Between_elementsContext _localctx = new Between_elementsContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_between_elements);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1027);
			concatenation(0);
			setState(1028);
			match(AND);
			setState(1029);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConcatenationContext extends ParserRuleContext {
		public Token op;
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public Interval_expressionContext interval_expression() {
			return getRuleContext(Interval_expressionContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode OVERFLOW() { return getToken(PlSqlParser.OVERFLOW, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public TerminalNode ERROR() { return getToken(PlSqlParser.ERROR, 0); }
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode ASTERISK() { return getToken(PlSqlParser.ASTERISK, 0); }
		public TerminalNode SOLIDUS() { return getToken(PlSqlParser.SOLIDUS, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(PlSqlParser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(PlSqlParser.MINUS_SIGN, 0); }
		public TerminalNode AMPERSAND() { return getToken(PlSqlParser.AMPERSAND, 0); }
		public List<TerminalNode> BAR() { return getTokens(PlSqlParser.BAR); }
		public TerminalNode BAR(int i) {
			return getToken(PlSqlParser.BAR, i);
		}
		public TerminalNode CARRET_OPERATOR_PART() { return getToken(PlSqlParser.CARRET_OPERATOR_PART, 0); }
		public ConcatenationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConcatenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConcatenation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitConcatenation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConcatenationContext concatenation() throws RecognitionException {
		return concatenation(0);
	}

	private ConcatenationContext concatenation(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ConcatenationContext _localctx = new ConcatenationContext(_ctx, _parentState);
		ConcatenationContext _prevctx = _localctx;
		int _startState = 160;
		enterRecursionRule(_localctx, 160, RULE_concatenation, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1032);
			model_expression();
			setState(1041);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
			case 1:
				{
				setState(1033);
				match(AT);
				setState(1038);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL:
					{
					setState(1034);
					match(LOCAL);
					}
					break;
				case TIME:
					{
					setState(1035);
					match(TIME);
					setState(1036);
					match(ZONE);
					setState(1037);
					concatenation(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(1040);
				interval_expression();
				}
				break;
			}
			setState(1046);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				{
				setState(1043);
				match(ON);
				setState(1044);
				match(OVERFLOW);
				setState(1045);
				_la = _input.LA(1);
				if ( !(_la==ERROR || _la==TRUNCATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
			_ctx.stop = _input.LT(-1);
			setState(1060);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,114,_ctx);
			while ( _alt!=2 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1058);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
					case 1:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						setState(1048);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1049);
						((ConcatenationContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
							((ConcatenationContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1050);
						concatenation(4);
						}
						break;
					case 2:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						setState(1051);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(1052);
						((ConcatenationContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 2327)) & ~0x3f) == 0 && ((1L << (_la - 2327)) & 4227169L) != 0)) ) {
							((ConcatenationContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1053);
						concatenation(3);
						}
						break;
					case 3:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						setState(1054);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(1055);
						match(BAR);
						setState(1056);
						match(BAR);
						setState(1057);
						concatenation(2);
						}
						break;
					}
					} 
				}
				setState(1062);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,114,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Interval_expressionContext extends ParserRuleContext {
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public Interval_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterInterval_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitInterval_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitInterval_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_expressionContext interval_expression() throws RecognitionException {
		Interval_expressionContext _localctx = new Interval_expressionContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_interval_expression);
		int _la;
		try {
			setState(1090);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1063);
				match(DAY);
				setState(1068);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1064);
					match(LEFT_PAREN);
					setState(1065);
					concatenation(0);
					setState(1066);
					match(RIGHT_PAREN);
					}
				}

				setState(1070);
				match(TO);
				setState(1071);
				match(SECOND);
				setState(1076);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
				case 1:
					{
					setState(1072);
					match(LEFT_PAREN);
					setState(1073);
					concatenation(0);
					setState(1074);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1078);
				match(YEAR);
				setState(1083);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1079);
					match(LEFT_PAREN);
					setState(1080);
					concatenation(0);
					setState(1081);
					match(RIGHT_PAREN);
					}
				}

				setState(1085);
				match(TO);
				setState(1086);
				match(MONTH);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1087);
				concatenation(0);
				setState(1088);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==MONTH || _la==SECOND || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Model_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitModel_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_expressionContext model_expression() throws RecognitionException {
		Model_expressionContext _localctx = new Model_expressionContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_model_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1092);
			unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unary_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode MINUS_SIGN() { return getToken(PlSqlParser.MINUS_SIGN, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(PlSqlParser.PLUS_SIGN, 0); }
		public TerminalNode PRIOR() { return getToken(PlSqlParser.PRIOR, 0); }
		public TerminalNode CONNECT_BY_ROOT() { return getToken(PlSqlParser.CONNECT_BY_ROOT, 0); }
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Quantified_expressionContext quantified_expression() {
			return getRuleContext(Quantified_expressionContext.class,0);
		}
		public Other_functionContext other_function() {
			return getRuleContext(Other_functionContext.class,0);
		}
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnary_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnary_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitUnary_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unary_expressionContext unary_expression() throws RecognitionException {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_unary_expression);
		int _la;
		try {
			setState(1110);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1094);
				_la = _input.LA(1);
				if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1095);
				unary_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1096);
				match(PRIOR);
				setState(1097);
				unary_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1098);
				match(CONNECT_BY_ROOT);
				setState(1099);
				unary_expression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1100);
				match(NEW);
				setState(1101);
				unary_expression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1102);
				match(DISTINCT);
				setState(1103);
				unary_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1104);
				match(ALL);
				setState(1105);
				unary_expression();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1106);
				case_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1107);
				quantified_expression();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1108);
				other_function();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1109);
				atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Other_functionContext extends ParserRuleContext {
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode CAST() { return getToken(PlSqlParser.CAST, 0); }
		public TerminalNode XMLCAST() { return getToken(PlSqlParser.XMLCAST, 0); }
		public TerminalNode MULTISET() { return getToken(PlSqlParser.MULTISET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode CONVERSION() { return getToken(PlSqlParser.CONVERSION, 0); }
		public TerminalNode ERROR() { return getToken(PlSqlParser.ERROR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public TerminalNode EXTRACT() { return getToken(PlSqlParser.EXTRACT, 0); }
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(PlSqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(PlSqlParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public TerminalNode QUARTER() { return getToken(PlSqlParser.QUARTER, 0); }
		public TerminalNode WEEK() { return getToken(PlSqlParser.WEEK, 0); }
		public TerminalNode DOY() { return getToken(PlSqlParser.DOY, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(PlSqlParser.DAYOFWEEK, 0); }
		public TerminalNode YEAROFWEEK() { return getToken(PlSqlParser.YEAROFWEEK, 0); }
		public Other_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_other_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOther_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOther_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitOther_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Other_functionContext other_function() throws RecognitionException {
		Other_functionContext _localctx = new Other_functionContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_other_function);
		int _la;
		try {
			setState(1149);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CAST:
			case XMLCAST:
				enterOuterAlt(_localctx, 1);
				{
				setState(1112);
				_la = _input.LA(1);
				if ( !(_la==CAST || _la==XMLCAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1113);
				match(LEFT_PAREN);
				setState(1120);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
				case 1:
					{
					setState(1114);
					match(MULTISET);
					setState(1115);
					match(LEFT_PAREN);
					setState(1116);
					subquery();
					setState(1117);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(1119);
					concatenation(0);
					}
					break;
				}
				setState(1122);
				match(AS);
				setState(1123);
				type_spec();
				setState(1130);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1124);
					match(DEFAULT);
					setState(1125);
					concatenation(0);
					setState(1126);
					match(ON);
					setState(1127);
					match(CONVERSION);
					setState(1128);
					match(ERROR);
					}
				}

				setState(1138);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1132);
					match(COMMA);
					setState(1133);
					quoted_string();
					setState(1136);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1134);
						match(COMMA);
						setState(1135);
						quoted_string();
						}
					}

					}
				}

				setState(1140);
				match(RIGHT_PAREN);
				}
				break;
			case EXTRACT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1142);
				match(EXTRACT);
				setState(1143);
				match(LEFT_PAREN);
				setState(1144);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==DAYOFWEEK || _la==DOY || _la==HOUR || _la==MINUTE || _la==MONTH || _la==QUARTER || _la==SECOND || ((((_la - 2190)) & ~0x3f) == 0 && ((1L << (_la - 2190)) & 1729382256910270465L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1145);
				match(FROM);
				setState(1146);
				expression();
				setState(1147);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Case_statementContext extends ParserRuleContext {
		public Searched_case_statementContext searched_case_statement() {
			return getRuleContext(Searched_case_statementContext.class,0);
		}
		public Simple_case_statementContext simple_case_statement() {
			return getRuleContext(Simple_case_statementContext.class,0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCase_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCase_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCase_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_statementContext case_statement() throws RecognitionException {
		Case_statementContext _localctx = new Case_statementContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_case_statement);
		try {
			setState(1153);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1151);
				searched_case_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1152);
				simple_case_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Simple_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(PlSqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PlSqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Simple_case_when_partContext> simple_case_when_part() {
			return getRuleContexts(Simple_case_when_partContext.class);
		}
		public Simple_case_when_partContext simple_case_when_part(int i) {
			return getRuleContext(Simple_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Simple_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSimple_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSimple_case_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSimple_case_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_case_statementContext simple_case_statement() throws RecognitionException {
		Simple_case_statementContext _localctx = new Simple_case_statementContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_simple_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1156);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
			case 1:
				{
				setState(1155);
				label_name();
				}
				break;
			}
			setState(1158);
			((Simple_case_statementContext)_localctx).ck1 = match(CASE);
			setState(1159);
			expression();
			setState(1161); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1160);
				simple_case_when_part();
				}
				}
				setState(1163); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(1166);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(1165);
				case_else_part();
				}
			}

			setState(1168);
			match(END);
			setState(1170);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
			case 1:
				{
				setState(1169);
				match(CASE);
				}
				break;
			}
			setState(1173);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				{
				setState(1172);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Simple_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Simple_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSimple_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSimple_case_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSimple_case_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_case_when_partContext simple_case_when_part() throws RecognitionException {
		Simple_case_when_partContext _localctx = new Simple_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_simple_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1175);
			match(WHEN);
			setState(1176);
			expression();
			setState(1177);
			match(THEN);
			setState(1180);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				setState(1178);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(1179);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Searched_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(PlSqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PlSqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Searched_case_when_partContext> searched_case_when_part() {
			return getRuleContexts(Searched_case_when_partContext.class);
		}
		public Searched_case_when_partContext searched_case_when_part(int i) {
			return getRuleContext(Searched_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Searched_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSearched_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSearched_case_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSearched_case_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_case_statementContext searched_case_statement() throws RecognitionException {
		Searched_case_statementContext _localctx = new Searched_case_statementContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_searched_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1183);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				{
				setState(1182);
				label_name();
				}
				break;
			}
			setState(1185);
			((Searched_case_statementContext)_localctx).ck1 = match(CASE);
			setState(1187); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1186);
				searched_case_when_part();
				}
				}
				setState(1189); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(1192);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(1191);
				case_else_part();
				}
			}

			setState(1194);
			match(END);
			setState(1196);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
			case 1:
				{
				setState(1195);
				match(CASE);
				}
				break;
			}
			setState(1199);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
			case 1:
				{
				setState(1198);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Searched_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Searched_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSearched_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSearched_case_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSearched_case_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_case_when_partContext searched_case_when_part() throws RecognitionException {
		Searched_case_when_partContext _localctx = new Searched_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_searched_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1201);
			match(WHEN);
			setState(1202);
			expression();
			setState(1203);
			match(THEN);
			setState(1206);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
			case 1:
				{
				setState(1204);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(1205);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Case_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Case_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCase_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCase_else_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCase_else_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_else_partContext case_else_part() throws RecognitionException {
		Case_else_partContext _localctx = new Case_else_partContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_case_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1208);
			match(ELSE);
			setState(1211);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
			case 1:
				{
				setState(1209);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(1210);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AtomContext extends ParserRuleContext {
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Outer_join_signContext outer_join_sign() {
			return getRuleContext(Outer_join_signContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AtomContext atom() throws RecognitionException {
		AtomContext _localctx = new AtomContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_atom);
		try {
			int _alt;
			setState(1233);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1213);
				table_element();
				setState(1214);
				outer_join_sign();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1216);
				bind_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1217);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1218);
				general_element();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1219);
				match(LEFT_PAREN);
				setState(1220);
				subquery();
				setState(1221);
				match(RIGHT_PAREN);
				setState(1225);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,139,_ctx);
				while ( _alt!=2 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1222);
						subquery_operation_part();
						}
						} 
					}
					setState(1227);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,139,_ctx);
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1228);
				match(LEFT_PAREN);
				setState(1229);
				expressions();
				setState(1230);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1232);
				quoted_string();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Quantified_expressionContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(PlSqlParser.SOME, 0); }
		public TerminalNode EXISTS() { return getToken(PlSqlParser.EXISTS, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(PlSqlParser.ANY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Select_only_statementContext select_only_statement() {
			return getRuleContext(Select_only_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Quantified_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterQuantified_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitQuantified_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitQuantified_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quantified_expressionContext quantified_expression() throws RecognitionException {
		Quantified_expressionContext _localctx = new Quantified_expressionContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_quantified_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1235);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1244);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
			case 1:
				{
				setState(1236);
				match(LEFT_PAREN);
				setState(1237);
				select_only_statement();
				setState(1238);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(1240);
				match(LEFT_PAREN);
				setState(1241);
				expression();
				setState(1242);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Routine_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Routine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRoutine_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRoutine_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRoutine_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Routine_nameContext routine_name() throws RecognitionException {
		Routine_nameContext _localctx = new Routine_nameContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_routine_name);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1246);
			identifier();
			setState(1251);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,142,_ctx);
			while ( _alt!=2 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1247);
					match(PERIOD);
					setState(1248);
					id_expression();
					}
					} 
				}
				setState(1253);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,142,_ctx);
			}
			setState(1256);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(1254);
				match(AT_SIGN);
				setState(1255);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Parameter_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterParameter_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitParameter_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitParameter_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_nameContext parameter_name() throws RecognitionException {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1258);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Label_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Label_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLabel_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLabel_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitLabel_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_nameContext label_name() throws RecognitionException {
		Label_nameContext _localctx = new Label_nameContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_label_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1260);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitType_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1262);
			id_expression();
			setState(1267);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(1263);
				match(PERIOD);
				setState(1264);
				id_expression();
				}
				}
				setState(1269);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Exception_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Exception_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterException_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitException_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitException_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_nameContext exception_name() throws RecognitionException {
		Exception_nameContext _localctx = new Exception_nameContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_exception_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1270);
			identifier();
			setState(1275);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(1271);
				match(PERIOD);
				setState(1272);
				id_expression();
				}
				}
				setState(1277);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Procedure_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterProcedure_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitProcedure_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitProcedure_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_nameContext procedure_name() throws RecognitionException {
		Procedure_nameContext _localctx = new Procedure_nameContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_procedure_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1278);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Variable_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterVariable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitVariable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitVariable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_nameContext variable_name() throws RecognitionException {
		Variable_nameContext _localctx = new Variable_nameContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_variable_name);
		int _la;
		try {
			setState(1290);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABS:
			case ABSENT:
			case ACCESS:
			case ACCESSED:
			case ACCOUNT:
			case ACL:
			case ACOS:
			case ACROSS:
			case ACTION:
			case ACTIONS:
			case ACTIVATE:
			case ACTIVE:
			case ACTIVE_COMPONENT:
			case ACTIVE_DATA:
			case ACTIVE_FUNCTION:
			case ACTIVE_TAG:
			case ACTIVITY:
			case ADAPTIVE_PLAN:
			case ADD:
			case ADD_COLUMN:
			case ADD_GROUP:
			case ADD_MONTHS:
			case ADJ_DATE:
			case ADMIN:
			case ADMINISTER:
			case ADMINISTRATOR:
			case ADVANCED:
			case ADVISE:
			case ADVISOR:
			case AFD_DISKSTRING:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALIAS:
			case ALLOCATE:
			case ALLOW:
			case ALL_ROWS:
			case ALTERNATE:
			case ALWAYS:
			case ANALYTIC:
			case ANALYZE:
			case ANCESTOR:
			case ANCILLARY:
			case AND_EQUAL:
			case ANOMALY:
			case ANSI_REARCH:
			case ANTIJOIN:
			case ANYSCHEMA:
			case APPEND:
			case APPENDCHILDXML:
			case APPEND_VALUES:
			case APPLICATION:
			case APPLY:
			case APPROX_COUNT_DISTINCT:
			case ARCHIVAL:
			case ARCHIVE:
			case ARCHIVED:
			case ARCHIVELOG:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASIS:
			case ASSEMBLY:
			case ASSIGN:
			case ASSOCIATE:
			case ASYNC:
			case ASYNCHRONOUS:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AUTHENTICATED:
			case AUTHENTICATION:
			case AUTHID:
			case AUTHORIZATION:
			case AUTOALLOCATE:
			case AUTO:
			case AUTOEXTEND:
			case AUTO_LOGIN:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case AUTO_REOPTIMIZE:
			case AVAILABILITY:
			case AVRO:
			case BACKGROUND:
			case BACKINGFILE:
			case BACKUP:
			case BACKUPS:
			case BASIC:
			case BASICFILE:
			case BATCH:
			case BATCHSIZE:
			case BATCH_TABLE_ACCESS_BY_ROWID:
			case BECOME:
			case BEFORE:
			case BEGIN:
			case BEGINNING:
			case BEGIN_OUTLINE_DATA:
			case BEHALF:
			case BEQUEATH:
			case BFILE:
			case BFILENAME:
			case BIGFILE:
			case BINARY:
			case BINARY_DOUBLE:
			case BINARY_DOUBLE_INFINITY:
			case BINARY_DOUBLE_NAN:
			case BINARY_FLOAT:
			case BINARY_FLOAT_INFINITY:
			case BINARY_FLOAT_NAN:
			case BINARY_INTEGER:
			case BIND_AWARE:
			case BINDING:
			case BIN_TO_NUM:
			case BITAND:
			case BITMAP_AND:
			case BITMAP:
			case BITMAPS:
			case BITMAP_TREE:
			case BITS:
			case BLOB:
			case BLOCK:
			case BLOCK_RANGE:
			case BLOCKS:
			case BLOCKSIZE:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BOUND:
			case BRANCH:
			case BREADTH:
			case BROADCAST:
			case BSON:
			case BUFFER:
			case BUFFER_CACHE:
			case BUFFER_POOL:
			case BUILD:
			case BULK:
			case BYPASS_RECURSIVE_CHECK:
			case BYPASS_UJVC:
			case BYTE:
			case CACHE:
			case CACHE_CB:
			case CACHE_INSTANCES:
			case CACHE_TEMP_TABLE:
			case CACHING:
			case CALCULATED:
			case CALLBACK:
			case CALL:
			case CANCEL:
			case CAPACITY:
			case CAPTION:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CASESENSITIVE:
			case CATEGORY:
			case CDBDEFAULT:
			case CEIL:
			case CELL_FLASH_CACHE:
			case CERTIFICATE:
			case CFILE:
			case CHAINED:
			case CHANGE:
			case CHANGE_DUPKEY_ERROR_INDEX:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHECK_ACL_REWRITE:
			case CHECKPOINT:
			case CHILD:
			case CHOOSE:
			case CHR:
			case CHUNK:
			case CLASS:
			case CLASSIFICATION:
			case CLASSIFIER:
			case CLAUSE:
			case CLEAN:
			case CLEANUP:
			case CLEAR:
			case C_LETTER:
			case CLIENT:
			case CLOB:
			case CLONE:
			case CLOSE_CACHED_OPEN_CURSORS:
			case CLOSE:
			case CLUSTER_BY_ROWID:
			case CLUSTER:
			case CLUSTER_DETAILS:
			case CLUSTER_DISTANCE:
			case CLUSTER_ID:
			case CLUSTERING:
			case CLUSTERING_FACTOR:
			case CLUSTER_PROBABILITY:
			case CLUSTER_SET:
			case COALESCE:
			case COALESCE_SQ:
			case COARSE:
			case CO_AUTH_IND:
			case COLD:
			case COLLECT:
			case COLUMNAR:
			case COLUMN_AUTH_INDICATOR:
			case COLUMN:
			case COLUMNS:
			case COLUMN_STATS:
			case COLUMN_VALUE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMMON:
			case COMMON_DATA:
			case COMPACT:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPLIANCE:
			case COMPONENT:
			case COMPONENTS:
			case COMPOSE:
			case COMPOSITE:
			case COMPOSITE_LIMIT:
			case COMPOUND:
			case COMPUTE:
			case CONCAT:
			case CON_DBID_TO_ID:
			case CONDITIONAL:
			case CONDITION:
			case CONFIRM:
			case CONFORMING:
			case CON_GUID_TO_ID:
			case CON_ID:
			case CON_NAME_TO_ID:
			case CONNECT_BY_CB_WHR_ONLY:
			case CONNECT_BY_COMBINE_SW:
			case CONNECT_BY_COST_BASED:
			case CONNECT_BY_ELIM_DUPS:
			case CONNECT_BY_FILTERING:
			case CONNECT_BY_ISCYCLE:
			case CONNECT_BY_ISLEAF:
			case CONNECT_BY_ROOT:
			case CONNECT_TIME:
			case CONSIDER:
			case CONSISTENT:
			case CONSTANT:
			case CONST:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINER:
			case CONTAINERS:
			case CONTAINERS_DEFAULT:
			case CONTAINER_DATA:
			case CONTAINER_MAP:
			case CONTENT:
			case CONTENTS:
			case CONTEXT:
			case CONTINUE:
			case CONTROLFILE:
			case CON_UID_TO_ID:
			case CONVERT:
			case CONVERSION:
			case COOKIE:
			case COPY:
			case CORR_K:
			case CORR_S:
			case CORRUPTION:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COST_XML_QUERY_REWRITE:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CPU_COSTING:
			case CPU_PER_CALL:
			case CPU_PER_SESSION:
			case CRASH:
			case CREATE_FILE_DEST:
			case CREATE_STORED_OUTLINES:
			case CREATION:
			case CREDENTIAL:
			case CRITICAL:
			case CROSS:
			case CROSSEDITION:
			case CSCONVERT:
			case CUBE_AJ:
			case CUBE:
			case CUBE_GB:
			case CUBE_SJ:
			case CUME_DISTM:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURRENTV:
			case CURSOR:
			case CURSOR_SHARING_EXACT:
			case CURSOR_SPECIFIC_SEGMENT:
			case CUSTOMDATUM:
			case CV:
			case CYCLE:
			case DANGLING:
			case DATABASE:
			case DATA:
			case DATAFILE:
			case DATAFILES:
			case DATAMOVEMENT:
			case DATAOBJNO:
			case DATAOBJ_TO_MAT_PARTITION:
			case DATAOBJ_TO_PARTITION:
			case DATAPUMP:
			case DATA_SECURITY_REWRITE_LIMIT:
			case DATE_MODE:
			case DAY:
			case DAYOFWEEK:
			case DAYS:
			case DBA:
			case DBA_RECYCLEBIN:
			case DBMS_STATS:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DB_UNIQUE_NAME:
			case DB_VERSION:
			case DDL:
			case DEALLOCATE:
			case DEBUG:
			case DEBUGGER:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECORRELATE:
			case DECR:
			case DECREMENT:
			case DECRYPT:
			case DEDUPLICATE:
			case DEFAULTS:
			case DEFAULT_COLLATION:
			case DEFAULT_CREDENTIAL:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINED:
			case DEFINE:
			case DEFINER:
			case DEGREE:
			case DELAY:
			case DELEGATE:
			case DELETE_ALL:
			case DELETE:
			case DELETEXML:
			case DEMAND:
			case DENSE_RANKM:
			case DEPENDENT:
			case DEPTH:
			case DEQUEUE:
			case DEREF:
			case DEREF_NO_REWRITE:
			case DESCRIPTION:
			case DESTROY:
			case DETACHED:
			case DETERMINES:
			case DETERMINISTIC:
			case DICTIONARY:
			case DIMENSION:
			case DIMENSIONS:
			case DIRECT_LOAD:
			case DIRECTORY:
			case DIRECT_PATH:
			case DISABLE_ALL:
			case DISABLE:
			case DISABLE_PARALLEL_DML:
			case DISABLE_PRESET:
			case DISABLE_RPKE:
			case DISALLOW:
			case DISASSOCIATE:
			case DISCARD:
			case DISCONNECT:
			case DISK:
			case DISKGROUP:
			case DISKS:
			case DISMOUNT:
			case DISTINGUISHED:
			case DISTRIBUTED:
			case DISTRIBUTE:
			case DML:
			case DML_UPDATE:
			case DOCFIDELITY:
			case DOCUMENT:
			case DOMAIN_INDEX_FILTER:
			case DOMAIN_INDEX_NO_SORT:
			case DOMAIN_INDEX_SORT:
			case DOY:
			case DOUBLE:
			case DOWNGRADE:
			case DRIVING_SITE:
			case DROP_COLUMN:
			case DROP_GROUP:
			case DSINTERVAL_UNCONSTRAINED:
			case DST_UPGRADE_INSERT_CONV:
			case DUMP:
			case DUPLICATE:
			case DV:
			case DYNAMIC:
			case DYNAMIC_SAMPLING:
			case DYNAMIC_SAMPLING_EST_CDN:
			case E_LETTER:
			case EACH:
			case EDITIONABLE:
			case EDITION:
			case EDITIONING:
			case EDITIONS:
			case ELEMENT:
			case ELIM_GROUPBY:
			case ELIMINATE_JOIN:
			case ELIMINATE_OBY:
			case ELIMINATE_OUTER_JOIN:
			case EM:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE_ALL:
			case ENABLE:
			case ENABLE_PARALLEL_DML:
			case ENABLE_PRESET:
			case ENCODING:
			case ENCRYPT:
			case ENCRYPTION:
			case END_OUTLINE_DATA:
			case ENFORCED:
			case ENFORCE:
			case ENQUEUE:
			case ENTERPRISE:
			case ENTITYESCAPING:
			case ENTRY:
			case EQUIPART:
			case ERR:
			case ERROR_ARGUMENT:
			case ERROR:
			case ERROR_ON_OVERLAP_TIME:
			case ERRORS:
			case ESCAPE:
			case ESTIMATE:
			case EVAL:
			case EVALNAME:
			case EVALUATE:
			case EVALUATION:
			case EVENTS:
			case EVERY:
			case EXCEPT:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCHANGE:
			case EXCLUDE:
			case EXCLUDING:
			case EXECUTE:
			case EXEMPT:
			case EXISTING:
			case EXISTS:
			case EXISTSNODE:
			case EXIT:
			case EXPAND_GSET_TO_UNION:
			case EXPAND_TABLE:
			case EXP:
			case EXPIRE:
			case EXPLAIN:
			case EXPLOSION:
			case EXPORT:
			case EXPR_CORR_CHECK:
			case EXPRESS:
			case EXTENDS:
			case EXTENT:
			case EXTENTS:
			case EXTERNAL:
			case EXTERNALLY:
			case EXTRACTCLOBXML:
			case EXTRACT:
			case EXTRACTVALUE:
			case EXTRA:
			case FACILITY:
			case FACT:
			case FACTOR:
			case FACTORIZE_JOIN:
			case FAILED:
			case FAILED_LOGIN_ATTEMPTS:
			case FAILGROUP:
			case FAILOVER:
			case FAILURE:
			case FALSE:
			case FAMILY:
			case FAR:
			case FAST:
			case FASTSTART:
			case FBTSCAN:
			case FEATURE:
			case FEATURE_DETAILS:
			case FEATURE_ID:
			case FEATURE_SET:
			case FEATURE_VALUE:
			case FETCH:
			case FILE:
			case FILE_NAME_CONVERT:
			case FILEGROUP:
			case FILESTORE:
			case FILESYSTEM_LIKE_LOGGING:
			case FILTER:
			case FINAL:
			case FINE:
			case FINISH:
			case FIRST:
			case FIRSTM:
			case FIRST_ROWS:
			case FIRST_VALUE:
			case FIXED_VIEW_DATA:
			case FLAGGER:
			case FLASHBACK:
			case FLASH_CACHE:
			case FLOAT:
			case FLOB:
			case FLEX:
			case FLOOR:
			case FLUSH:
			case FOLDER:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FORCE_XML_QUERY_REWRITE:
			case FOREIGN:
			case FOREVER:
			case FORMAT:
			case FORWARD:
			case FRAGMENT_NUMBER:
			case FREELIST:
			case FREELISTS:
			case FREEPOOLS:
			case FRESH:
			case FROM_TZ:
			case FULL:
			case FULL_OUTER_JOIN_TO_OUTER:
			case FUNCTION:
			case FUNCTIONS:
			case FTP:
			case G_LETTER:
			case GATHER_OPTIMIZER_STATISTICS:
			case GATHER_PLAN_STATISTICS:
			case GBY_CONC_ROLLUP:
			case GBY_PUSHDOWN:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GLOBALLY:
			case GLOBAL_NAME:
			case GLOBAL_TOPIC_ENABLED:
			case GROUP_BY:
			case GROUP_ID:
			case GROUPING:
			case GROUPING_ID:
			case GROUPS:
			case GUARANTEED:
			case GUARANTEE:
			case GUARD:
			case HALF_YEARS:
			case HASH_AJ:
			case HASH:
			case HASHKEYS:
			case HASH_SJ:
			case HEADER:
			case HEAP:
			case HELP:
			case HEXTORAW:
			case HEXTOREF:
			case HIDDEN_KEYWORD:
			case HIDE:
			case HIER_ORDER:
			case HIERARCHICAL:
			case HIERARCHY:
			case HIGH:
			case HINTSET_BEGIN:
			case HINTSET_END:
			case HOT:
			case HOUR:
			case HOURS:
			case HTTP:
			case HWM_BROKERED:
			case HYBRID:
			case H_LETTER:
			case IDENTIFIER:
			case IDENTITY:
			case IDGENERATORS:
			case ID:
			case IDLE_TIME:
			case IF:
			case IGNORE:
			case IGNORE_OPTIM_EMBEDDED_HINTS:
			case IGNORE_ROW_ON_DUPKEY_INDEX:
			case IGNORE_WHERE_CLAUSE:
			case ILM:
			case IMMEDIATE:
			case IMPACT:
			case IMPORT:
			case INACTIVE:
			case INACTIVE_ACCOUNT_TIME:
			case INCLUDE:
			case INCLUDE_VERSION:
			case INCLUDING:
			case INCREMENTAL:
			case INCREMENT:
			case INCR:
			case INDENT:
			case INDEX_ASC:
			case INDEX_COMBINE:
			case INDEX_DESC:
			case INDEXED:
			case INDEXES:
			case INDEX_FFS:
			case INDEX_FILTER:
			case INDEXING:
			case INDEX_JOIN:
			case INDEX_ROWS:
			case INDEX_RRS:
			case INDEX_RS_ASC:
			case INDEX_RS_DESC:
			case INDEX_RS:
			case INDEX_SCAN:
			case INDEX_SKIP_SCAN:
			case INDEX_SS_ASC:
			case INDEX_SS_DESC:
			case INDEX_SS:
			case INDEX_STATS:
			case INDEXTYPE:
			case INDEXTYPES:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INFORMATIONAL:
			case INHERIT:
			case INITCAP:
			case INITIAL:
			case INITIALIZED:
			case INITIALLY:
			case INITRANS:
			case INLINE:
			case INLINE_XMLTYPE_NT:
			case INMEMORY:
			case IN_MEMORY_METADATA:
			case INMEMORY_PRUNING:
			case INNER:
			case INOUT:
			case INPLACE:
			case INSERTCHILDXMLAFTER:
			case INSERTCHILDXMLBEFORE:
			case INSERTCHILDXML:
			case INSERTXMLAFTER:
			case INSERTXMLBEFORE:
			case INSTANCE:
			case INSTANCES:
			case INSTANTIABLE:
			case INSTANTLY:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTEGER:
			case INTERLEAVED:
			case INTERMEDIATE:
			case INTERNAL_CONVERT:
			case INTERNAL_USE:
			case INTERPRETED:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case INVISIBLE:
			case IN_XQUERY:
			case IS_LEAF:
			case ISOLATION:
			case ISOLATION_LEVEL:
			case ITERATE:
			case ITERATION_NUMBER:
			case JAVA:
			case JOB:
			case JOIN:
			case JSON_ARRAYAGG:
			case JSON_ARRAY:
			case JSON_EQUAL:
			case JSON_EXISTS2:
			case JSON_EXISTS:
			case JSONGET:
			case JSON:
			case JSON_OBJECTAGG:
			case JSON_OBJECT:
			case JSONPARSE:
			case JSON_QUERY:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_TEXTCONTAINS2:
			case JSON_TEXTCONTAINS:
			case JSON_TRANSFORM:
			case JSON_VALUE:
			case K_LETTER:
			case KEEP_DUPLICATES:
			case KEEP:
			case KERBEROS:
			case KEY:
			case KEY_LENGTH:
			case KEYSIZE:
			case KEYS:
			case KEYSTORE:
			case KILL:
			case LABEL:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LATERAL:
			case LAX:
			case LAYER:
			case LDAP_REGISTRATION_ENABLED:
			case LDAP_REGISTRATION:
			case LDAP_REG_SYNC_INTERVAL:
			case LEAF:
			case LEAD_CDB:
			case LEAD_CDB_URI:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LESS:
			case LEVEL:
			case LEVEL_NAME:
			case LEVELS:
			case LIBRARY:
			case LIFECYCLE:
			case LIFE:
			case LIFETIME:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_EXPAND:
			case LIMIT:
			case LINEAR:
			case LINK:
			case LIST:
			case LN:
			case LNNVL:
			case LOAD:
			case LOB:
			case LOBNVL:
			case LOBS:
			case LOCAL_INDEXES:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCATOR:
			case LOCKDOWN:
			case LOCKED:
			case LOCKING:
			case LOGFILE:
			case LOGFILES:
			case LOGGING:
			case LOGICAL:
			case LOGICAL_READS_PER_CALL:
			case LOGICAL_READS_PER_SESSION:
			case LOG:
			case LOGMINING:
			case LOGOFF:
			case LOGON:
			case LOG_READ_ONLY_VIOLATIONS:
			case LONG:
			case LOOP:
			case LOST:
			case LOWER:
			case LOW:
			case LPAD:
			case LTRIM:
			case M_LETTER:
			case MAIN:
			case MAKE_REF:
			case MANAGED:
			case MANAGE:
			case MANAGEMENT:
			case MANAGER:
			case MANDATORY:
			case MANUAL:
			case MAP:
			case MAPPING:
			case MASTER:
			case MATCHED:
			case MATCHES:
			case MATCH:
			case MATCH_NUMBER:
			case MATCH_RECOGNIZE:
			case MATERIALIZED:
			case MATERIALIZE:
			case MAXARCHLOGS:
			case MAXDATAFILES:
			case MAXEXTENTS:
			case MAXIMIZE:
			case MAXINSTANCES:
			case MAXLOGFILES:
			case MAXLOGHISTORY:
			case MAXLOGMEMBERS:
			case MAX_SHARED_TEMP_SIZE:
			case MAXSIZE:
			case MAXTRANS:
			case MAXVALUE:
			case MEASURE:
			case MEASURES:
			case MEDIUM:
			case MEMBER:
			case MEMBER_CAPTION:
			case MEMBER_DESCRIPTION:
			case MEMBER_NAME:
			case MEMBER_UNIQUE_NAME:
			case MEMCOMPRESS:
			case MEMORY:
			case MERGEACTIONS:
			case MERGE_AJ:
			case MERGE_CONST_ON:
			case MERGE:
			case MERGE_SJ:
			case METADATA:
			case METHOD:
			case MIGRATE:
			case MIGRATION:
			case MINEXTENTS:
			case MINIMIZE:
			case MINIMUM:
			case MINING:
			case MINUS_NULL:
			case MINUTE:
			case MINUTES:
			case MINVALUE:
			case MIRRORCOLD:
			case MIRRORHOT:
			case MIRROR:
			case MISSING:
			case MISMATCH:
			case MLSLABEL:
			case MODEL_COMPILE_SUBQUERY:
			case MODEL_DONTVERIFY_UNIQUENESS:
			case MODEL_DYNAMIC_SUBQUERY:
			case MODEL_MIN_ANALYSIS:
			case MODEL:
			case MODEL_NB:
			case MODEL_NO_ANALYSIS:
			case MODEL_PBY:
			case MODEL_PUSH_REF:
			case MODEL_SV:
			case MODIFICATION:
			case MODIFY_COLUMN_TYPE:
			case MODIFY:
			case MOD:
			case MODULE:
			case MONITORING:
			case MONITOR:
			case MONTH:
			case MONTHS_BETWEEN:
			case MONTHS:
			case MOUNT:
			case MOUNTPATH:
			case MOUNTPOINT:
			case MOVEMENT:
			case MOVE:
			case MULTIDIMENSIONAL:
			case MULTISET:
			case MV_MERGE:
			case NAMED:
			case NAME:
			case NAMESPACE:
			case NAN:
			case NANVL:
			case NATIONAL:
			case NATIVE_FULL_OUTER_JOIN:
			case NATIVE:
			case NATURAL:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NEEDED:
			case NEG:
			case NESTED:
			case NESTED_TABLE_FAST_INSERT:
			case NESTED_TABLE_GET_REFS:
			case NESTED_TABLE_ID:
			case NESTED_TABLE_SET_REFS:
			case NESTED_TABLE_SET_SETID:
			case NETWORK:
			case NEVER:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NEXT:
			case NL_AJ:
			case NLJ_BATCHING:
			case NLJ_INDEX_FILTER:
			case NLJ_INDEX_SCAN:
			case NLJ_PREFETCH:
			case NLS_CALENDAR:
			case NLS_CHARACTERSET:
			case NLS_CHARSET_DECL_LEN:
			case NLS_CHARSET_ID:
			case NLS_CHARSET_NAME:
			case NLS_COMP:
			case NLS_CURRENCY:
			case NLS_DATE_FORMAT:
			case NLS_DATE_LANGUAGE:
			case NLS_INITCAP:
			case NLS_ISO_CURRENCY:
			case NL_SJ:
			case NLS_LANG:
			case NLS_LANGUAGE:
			case NLS_LENGTH_SEMANTICS:
			case NLS_LOWER:
			case NLS_NCHAR_CONV_EXCP:
			case NLS_NUMERIC_CHARACTERS:
			case NLS_SORT:
			case NLSSORT:
			case NLS_SPECIAL_CHARS:
			case NLS_TERRITORY:
			case NLS_UPPER:
			case NO_ACCESS:
			case NO_ADAPTIVE_PLAN:
			case NO_ANSI_REARCH:
			case NOAPPEND:
			case NOARCHIVELOG:
			case NOAUDIT:
			case NO_AUTO_REOPTIMIZE:
			case NO_BASETABLE_MULTIMV_REWRITE:
			case NO_BATCH_TABLE_ACCESS_BY_ROWID:
			case NO_BIND_AWARE:
			case NO_BUFFER:
			case NOCACHE:
			case NO_CARTESIAN:
			case NO_CHECK_ACL_REWRITE:
			case NO_CLUSTER_BY_ROWID:
			case NO_CLUSTERING:
			case NO_COALESCE_SQ:
			case NO_COMMON_DATA:
			case NO_CONNECT_BY_CB_WHR_ONLY:
			case NO_CONNECT_BY_COMBINE_SW:
			case NO_CONNECT_BY_COST_BASED:
			case NO_CONNECT_BY_ELIM_DUPS:
			case NO_CONNECT_BY_FILTERING:
			case NOCOPY:
			case NO_COST_XML_QUERY_REWRITE:
			case NO_CPU_COSTING:
			case NOCPU_COSTING:
			case NOCYCLE:
			case NO_DATA_SECURITY_REWRITE:
			case NO_DECORRELATE:
			case NODELAY:
			case NO_DOMAIN_INDEX_FILTER:
			case NO_DST_UPGRADE_INSERT_CONV:
			case NO_ELIM_GROUPBY:
			case NO_ELIMINATE_JOIN:
			case NO_ELIMINATE_OBY:
			case NO_ELIMINATE_OUTER_JOIN:
			case NOENTITYESCAPING:
			case NO_EXPAND_GSET_TO_UNION:
			case NO_EXPAND:
			case NO_EXPAND_TABLE:
			case NO_FACT:
			case NO_FACTORIZE_JOIN:
			case NO_FILTERING:
			case NOFORCE:
			case NO_FULL_OUTER_JOIN_TO_OUTER:
			case NO_GATHER_OPTIMIZER_STATISTICS:
			case NO_GBY_PUSHDOWN:
			case NOGUARANTEE:
			case NO_INDEX_FFS:
			case NO_INDEX:
			case NO_INDEX_SS:
			case NO_INMEMORY:
			case NO_INMEMORY_PRUNING:
			case NOKEEP:
			case NO_LOAD:
			case NOLOCAL:
			case NOLOGGING:
			case NOMAPPING:
			case NOMAXVALUE:
			case NO_MERGE:
			case NOMINIMIZE:
			case NOMINVALUE:
			case NO_MODEL_PUSH_REF:
			case NO_MONITORING:
			case NOMONITORING:
			case NO_MONITOR:
			case NO_MULTIMV_REWRITE:
			case NO_NATIVE_FULL_OUTER_JOIN:
			case NONBLOCKING:
			case NONEDITIONABLE:
			case NONE:
			case NO_NLJ_BATCHING:
			case NO_NLJ_PREFETCH:
			case NO:
			case NONSCHEMA:
			case NO_OBJECT_LINK:
			case NOORDER:
			case NO_ORDER_ROLLUPS:
			case NO_OUTER_JOIN_TO_ANTI:
			case NO_OUTER_JOIN_TO_INNER:
			case NOOVERRIDE:
			case NO_PARALLEL_INDEX:
			case NOPARALLEL_INDEX:
			case NO_PARALLEL:
			case NOPARALLEL:
			case NO_PARTIAL_COMMIT:
			case NO_PARTIAL_JOIN:
			case NO_PARTIAL_ROLLUP_PUSHDOWN:
			case NOPARTITION:
			case NO_PLACE_DISTINCT:
			case NO_PLACE_GROUP_BY:
			case NO_PQ_CONCURRENT_UNION:
			case NO_PQ_MAP:
			case NOPROMPT:
			case NO_PQ_REPLICATE:
			case NO_PQ_SKEW:
			case NO_PRUNE_GSETS:
			case NO_PULL_PRED:
			case NO_PUSH_PRED:
			case NO_PUSH_SUBQ:
			case NO_PX_FAULT_TOLERANCE:
			case NO_PX_JOIN_FILTER:
			case NO_QKN_BUFF:
			case NO_QUERY_TRANSFORMATION:
			case NO_REF_CASCADE:
			case NORELOCATE:
			case NORELY:
			case NOREPAIR:
			case NOREPLAY:
			case NORESETLOGS:
			case NO_RESULT_CACHE:
			case NOREVERSE:
			case NO_REWRITE:
			case NOREWRITE:
			case NORMAL:
			case NO_ROOT_SW_FOR_LOCAL:
			case NOROWDEPENDENCIES:
			case NOSCHEMACHECK:
			case NOSEGMENT:
			case NO_SEMIJOIN:
			case NO_SEMI_TO_INNER:
			case NO_SET_TO_JOIN:
			case NOSORT:
			case NO_SQL_TRANSLATION:
			case NO_SQL_TUNE:
			case NO_STAR_TRANSFORMATION:
			case NO_STATEMENT_QUEUING:
			case NO_STATS_GSETS:
			case NOSTRICT:
			case NO_SUBQUERY_PRUNING:
			case NO_SUBSTRB_PAD:
			case NO_SWAP_JOIN_INPUTS:
			case NOSWITCH:
			case NO_TABLE_LOOKUP_BY_NL:
			case NO_TEMP_TABLE:
			case NOTHING:
			case NOTIFICATION:
			case NO_TRANSFORM_DISTINCT_AGG:
			case NO_UNNEST:
			case NO_USE_CUBE:
			case NO_USE_HASH_AGGREGATION:
			case NO_USE_HASH_GBY_FOR_PUSHDOWN:
			case NO_USE_HASH:
			case NO_USE_INVISIBLE_INDEXES:
			case NO_USE_MERGE:
			case NO_USE_NL:
			case NO_USE_VECTOR_AGGREGATION:
			case NOVALIDATE:
			case NO_VECTOR_TRANSFORM_DIMS:
			case NO_VECTOR_TRANSFORM_FACT:
			case NO_VECTOR_TRANSFORM:
			case NO_XDB_FASTPATH_INSERT:
			case NO_XML_DML_REWRITE:
			case NO_XMLINDEX_REWRITE_IN_SELECT:
			case NO_XMLINDEX_REWRITE:
			case NO_XML_QUERY_REWRITE:
			case NO_ZONEMAP:
			case NTH_VALUE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUM_INDEX_KEYS:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT2XML:
			case OBJECT:
			case OBJ_ID:
			case OBJNO:
			case OBJNO_REUSE:
			case OCCURENCES:
			case OFFLINE:
			case OFF:
			case OFFSET:
			case OIDINDEX:
			case OID:
			case OLAP:
			case OLD:
			case OLD_PUSH_PRED:
			case OLS:
			case OLTP:
			case OMIT:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPAQUE:
			case OPAQUE_TRANSFORM:
			case OPAQUE_XCANONICAL:
			case OPCODE:
			case OPEN:
			case OPERATIONS:
			case OPERATOR:
			case OPT_ESTIMATE:
			case OPTIMAL:
			case OPTIMIZE:
			case OPTIMIZER_FEATURES_ENABLE:
			case OPTIMIZER_GOAL:
			case OPT_PARAM:
			case ORA_BRANCH:
			case ORA_CHECK_ACL:
			case ORA_CHECK_PRIVILEGE:
			case ORA_CLUSTERING:
			case ORADATA:
			case ORADEBUG:
			case ORA_DST_AFFECTED:
			case ORA_DST_CONVERT:
			case ORA_DST_ERROR:
			case ORA_GET_ACLIDS:
			case ORA_GET_PRIVILEGES:
			case ORA_HASH:
			case ORA_INVOKING_USERID:
			case ORA_INVOKING_USER:
			case ORA_INVOKING_XS_USER_GUID:
			case ORA_INVOKING_XS_USER:
			case ORA_RAWCOMPARE:
			case ORA_RAWCONCAT:
			case ORA_ROWSCN:
			case ORA_ROWSCN_RAW:
			case ORA_ROWVERSION:
			case ORA_TABVERSION:
			case ORA_WRITE_TIME:
			case ORDERED:
			case ORDERED_PREDICATES:
			case ORDINALITY:
			case OR_EXPAND:
			case ORGANIZATION:
			case OR_PREDICATES:
			case OSERROR:
			case OTHER:
			case OUTER_JOIN_TO_ANTI:
			case OUTER_JOIN_TO_INNER:
			case OUTER:
			case OUTLINE_LEAF:
			case OUTLINE:
			case OUT_OF_LINE:
			case OUT:
			case OVERFLOW_NOMOVE:
			case OVERFLOW:
			case OVERLAPS:
			case OVER:
			case OVERRIDING:
			case OWNER:
			case OWNERSHIP:
			case OWN:
			case P_LETTER:
			case PACKAGE:
			case PACKAGES:
			case PARALLEL_ENABLE:
			case PARALLEL_INDEX:
			case PARALLEL:
			case PARAMETERS:
			case PARAM:
			case PARENT:
			case PARENT_LEVEL_NAME:
			case PARENT_UNIQUE_NAME:
			case PARITY:
			case PARTIAL_JOIN:
			case PARTIALLY:
			case PARTIAL:
			case PARTIAL_ROLLUP_PUSHDOWN:
			case PARTITION_HASH:
			case PARTITION_LIST:
			case PARTITION:
			case PARTITION_RANGE:
			case PARTITIONS:
			case PARTNUMINST:
			case PASSING:
			case PASSWORD_GRACE_TIME:
			case PASSWORD_LIFE_TIME:
			case PASSWORD_LOCK_TIME:
			case PASSWORD:
			case PASSWORD_REUSE_MAX:
			case PASSWORD_REUSE_TIME:
			case PASSWORD_ROLLOVER_TIME:
			case PASSWORD_VERIFY_FUNCTION:
			case PAST:
			case PATCH:
			case PATH:
			case PATH_PREFIX:
			case PATHS:
			case PATTERN:
			case PBL_HS_BEGIN:
			case PBL_HS_END:
			case PCTINCREASE:
			case PCTTHRESHOLD:
			case PCTUSED:
			case PCTVERSION:
			case PENDING:
			case PERCENT_KEYWORD:
			case PERCENT_RANKM:
			case PERFORMANCE:
			case PERIOD_KEYWORD:
			case PERMANENT:
			case PERMISSION:
			case PERMUTE:
			case PER:
			case PFILE:
			case PHYSICAL:
			case PIKEY:
			case PIPELINED:
			case PIV_GB:
			case PIVOT:
			case PIV_SSF:
			case PLACE_DISTINCT:
			case PLACE_GROUP_BY:
			case PLAN:
			case PLSCOPE_SETTINGS:
			case PLS_INTEGER:
			case PLSQL_CCFLAGS:
			case PLSQL_CODE_TYPE:
			case PLSQL_DEBUG:
			case PLSQL_OPTIMIZE_LEVEL:
			case PLSQL_WARNINGS:
			case PLUGGABLE:
			case PMEM:
			case POINT:
			case POLICY:
			case POOL_16K:
			case POOL_2K:
			case POOL_32K:
			case POOL_4K:
			case POOL_8K:
			case POSITIVEN:
			case POSITIVE:
			case POST_TRANSACTION:
			case POWERMULTISET_BY_CARDINALITY:
			case POWERMULTISET:
			case POWER:
			case PQ_CONCURRENT_UNION:
			case PQ_DISTRIBUTE:
			case PQ_DISTRIBUTE_WINDOW:
			case PQ_FILTER:
			case PQ_MAP:
			case PQ_NOMAP:
			case PQ_REPLICATE:
			case PQ_SKEW:
			case PRAGMA:
			case PREBUILT:
			case PRECEDES:
			case PRECEDING:
			case PRECISION:
			case PRECOMPUTE_SUBQUERY:
			case PREDICATE_REORDERS:
			case PRELOAD:
			case PREPARE:
			case PRESENTNNV:
			case PRESENT:
			case PRESENTV:
			case PRESERVE_OID:
			case PRESERVE:
			case PRETTY:
			case PREVIOUS:
			case PREV:
			case PRIMARY:
			case PRINTBLOBTOCLOB:
			case PRIORITY:
			case PRIVATE:
			case PRIVATE_SGA:
			case PRIVILEGED:
			case PRIVILEGE:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCESS:
			case PROFILE:
			case PROGRAM:
			case PROJECT:
			case PROPAGATE:
			case PROPERTY:
			case PROTECTED:
			case PROTECTION:
			case PROTOCOL:
			case PROXY:
			case PRUNING:
			case PUBLIC:
			case PULL_PRED:
			case PURGE:
			case PUSH_PRED:
			case PUSH_SUBQ:
			case PX_FAULT_TOLERANCE:
			case PX_GRANULE:
			case PX_JOIN_FILTER:
			case QB_NAME:
			case QUARTER:
			case QUARTERS:
			case QUERY_BLOCK:
			case QUERY:
			case QUEUE_CURR:
			case QUEUE:
			case QUEUE_ROWP:
			case QUIESCE:
			case QUORUM:
			case QUOTA:
			case QUOTAGROUP:
			case RAISE:
			case RANDOM_LOCAL:
			case RANDOM:
			case RANGE:
			case RANKM:
			case RAPIDLY:
			case RAW:
			case RAWTOHEX:
			case RAWTONHEX:
			case RBA:
			case RBO_OUTLINE:
			case RDBA:
			case READ:
			case READS:
			case REALM:
			case REAL:
			case REBALANCE:
			case REBUILD:
			case RECORD:
			case RECORDS_PER_BLOCK:
			case RECOVERABLE:
			case RECOVER:
			case RECOVERY:
			case RECYCLEBIN:
			case RECYCLE:
			case REDACTION:
			case REDEFINE:
			case REDO:
			case REDUCED:
			case REDUNDANCY:
			case REF_CASCADE_CURSOR:
			case REFERENCED:
			case REFERENCE:
			case REFERENCES:
			case REFERENCING:
			case REF:
			case REFRESH:
			case REFTOHEX:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REGISTER:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REGULAR:
			case REJECT:
			case REKEY:
			case RELATIONAL:
			case RELOCATE:
			case RELY:
			case REMAINDER:
			case REMOTE:
			case REMOTE_MAPPED:
			case REMOVE:
			case RENAME:
			case REPAIR:
			case REPEAT:
			case REPLACE:
			case REPLICATION:
			case REQUIRED:
			case RESETLOGS:
			case RESET:
			case RESIZE:
			case RESOLVE:
			case RESOLVER:
			case RESPECT:
			case RESTART:
			case RESTORE_AS_INTERVALS:
			case RESTORE:
			case RESTRICT_ALL_REF_CONS:
			case RESTRICTED:
			case RESTRICT_REFERENCES:
			case RESTRICT:
			case RESULT_CACHE:
			case RESULT:
			case RESUMABLE:
			case RESUME:
			case RETENTION:
			case RETRY_ON_ROW_CHANGE:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REWRITE_OR_ERROR:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLESET:
			case ROLES:
			case ROLLBACK:
			case ROLLING:
			case ROLLUP:
			case ROWDEPENDENCIES:
			case ROWID_MAPPING_TABLE:
			case ROWID:
			case ROWIDTOCHAR:
			case ROWIDTONCHAR:
			case ROW_LENGTH:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULE:
			case RULES:
			case RUNNING:
			case SALT:
			case SAMPLE:
			case SAVE_AS_INTERVALS:
			case SAVEPOINT:
			case SAVE:
			case SB4:
			case SCALE_ROWS:
			case SCALE:
			case SCAN_INSTANCES:
			case SCAN:
			case SCHEDULER:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN_ASCENDING:
			case SCN:
			case SCOPE:
			case SCRUB:
			case SD_ALL:
			case SD_INHIBIT:
			case SDO_GEOM_MBR:
			case SDO_GEOMETRY:
			case SD_SHOW:
			case SEARCH:
			case SECOND:
			case SECONDS:
			case SECRET:
			case SECUREFILE_DBA:
			case SECUREFILE:
			case SECURITY:
			case SEED:
			case SEG_BLOCK:
			case SEG_FILE:
			case SEGMENT:
			case SELECTIVITY:
			case SELF:
			case SEMIJOIN_DRIVER:
			case SEMIJOIN:
			case SEMI_TO_INNER:
			case SEQUENCED:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERIAL:
			case SERVERERROR:
			case SERVICE_NAME_CONVERT:
			case SERVICE:
			case SERVICES:
			case SESSION_CACHED_CURSORS:
			case SESSION:
			case SESSIONS_PER_USER:
			case SESSIONTIMEZONE:
			case SESSIONTZNAME:
			case SET:
			case SETS:
			case SETTINGS:
			case SET_TO_JOIN:
			case SEVERE:
			case SHARDSPACE:
			case SHARED_POOL:
			case SHARED:
			case SHARING:
			case SHELFLIFE:
			case SHOW:
			case SHRINK:
			case SHUTDOWN:
			case SIBLINGS:
			case SID:
			case SITE:
			case SIGNAL_COMPONENT:
			case SIGNAL_FUNCTION:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SIMPLE:
			case SINGLE:
			case SINGLETASK:
			case SINH:
			case SIN:
			case SKIP_EXT_OPTIMIZER:
			case SKIP_:
			case SKIP_UNQ_UNUSABLE_IDX:
			case SKIP_UNUSABLE_INDEXES:
			case SMALLFILE:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SORT:
			case SOUNDEX:
			case SOURCE_FILE_DIRECTORY:
			case SOURCE_FILE_NAME_CONVERT:
			case SOURCE:
			case SPACE_KEYWORD:
			case SPECIFICATION:
			case SPFILE:
			case SPLIT:
			case SPREADSHEET:
			case SQLDATA:
			case SQLERROR:
			case SQLLDR:
			case SQL:
			case SQL_MACRO:
			case SQL_TRACE:
			case SQL_TRANSLATION_PROFILE:
			case SQRT:
			case STALE:
			case STANDALONE:
			case STANDARD:
			case STANDARD_HASH:
			case STANDBY_MAX_DATA_DELAY:
			case STANDBYS:
			case STANDBY:
			case STAR:
			case STAR_TRANSFORMATION:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT_QUEUING:
			case STATEMENTS:
			case STATEMENT:
			case STATE:
			case STATIC:
			case STATISTICS:
			case STATS_BINOMIAL_TEST:
			case STATS_CROSSTAB:
			case STATS_F_TEST:
			case STATS_KS_TEST:
			case STATS_MODE:
			case STATS_MW_TEST:
			case STATS_ONE_WAY_ANOVA:
			case STATS_T_TEST_INDEP:
			case STATS_T_TEST_INDEPU:
			case STATS_T_TEST_ONE:
			case STATS_T_TEST_PAIRED:
			case STATS_WSR_TEST:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STOP:
			case STORAGE:
			case STORE:
			case STREAMS:
			case STREAM:
			case STRICT:
			case STRING:
			case STRIPE_COLUMNS:
			case STRIPE_WIDTH:
			case STRIP:
			case STRUCTURE:
			case SUBMULTISET:
			case SUBPARTITION_REL:
			case SUBPARTITIONS:
			case SUBPARTITION:
			case SUBQUERIES:
			case SUBQUERY_PRUNING:
			case SUBSCRIBE:
			case SUBSET:
			case SUBSTITUTABLE:
			case SUBSTR2:
			case SUBSTR4:
			case SUBSTRB:
			case SUBSTRC:
			case SUBTYPE:
			case SUCCESSFUL:
			case SUCCESS:
			case SUMMARY:
			case SUPPLEMENTAL:
			case SUSPEND:
			case SWAP_JOIN_INPUTS:
			case SWITCHOVER:
			case SWITCH:
			case SYNCHRONOUS:
			case SYNC:
			case SYS:
			case SYSASM:
			case SYS_AUDIT:
			case SYSAUX:
			case SYSBACKUP:
			case SYS_CHECKACL:
			case SYS_CHECK_PRIVILEGE:
			case SYS_CONNECT_BY_PATH:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSDBA:
			case SYS_DBURIGEN:
			case SYSDG:
			case SYS_DL_CURSOR:
			case SYS_DM_RXFORM_CHR:
			case SYS_DM_RXFORM_NUM:
			case SYS_DOM_COMPARE:
			case SYS_DST_PRIM2SEC:
			case SYS_DST_SEC2PRIM:
			case SYS_ET_BFILE_TO_RAW:
			case SYS_ET_BLOB_TO_IMAGE:
			case SYS_ET_IMAGE_TO_BLOB:
			case SYS_ET_RAW_TO_BFILE:
			case SYS_EXTPDTXT:
			case SYS_EXTRACT_UTC:
			case SYS_FBT_INSDEL:
			case SYS_FILTER_ACLS:
			case SYS_FNMATCHES:
			case SYS_FNREPLACE:
			case SYS_GET_ACLIDS:
			case SYS_GET_COL_ACLIDS:
			case SYS_GET_PRIVILEGES:
			case SYS_GETTOKENID:
			case SYS_GETXTIVAL:
			case SYS_GUID:
			case SYSGUID:
			case SYSKM:
			case SYS_MAKE_XMLNODEID:
			case SYS_MAKEXML:
			case SYS_MKXMLATTR:
			case SYS_MKXTI:
			case SYSOBJ:
			case SYS_OP_ADT2BIN:
			case SYS_OP_ADTCONS:
			case SYS_OP_ALSCRVAL:
			case SYS_OP_ATG:
			case SYS_OP_BIN2ADT:
			case SYS_OP_BITVEC:
			case SYS_OP_BL2R:
			case SYS_OP_BLOOM_FILTER_LIST:
			case SYS_OP_BLOOM_FILTER:
			case SYS_OP_C2C:
			case SYS_OP_CAST:
			case SYS_OP_CEG:
			case SYS_OP_CL2C:
			case SYS_OP_COMBINED_HASH:
			case SYS_OP_COMP:
			case SYS_OP_CONVERT:
			case SYS_OP_COUNTCHG:
			case SYS_OP_CSCONV:
			case SYS_OP_CSCONVTEST:
			case SYS_OP_CSR:
			case SYS_OP_CSX_PATCH:
			case SYS_OP_CYCLED_SEQ:
			case SYS_OP_DECOMP:
			case SYS_OP_DESCEND:
			case SYS_OP_DISTINCT:
			case SYS_OP_DRA:
			case SYS_OP_DUMP:
			case SYS_OP_DV_CHECK:
			case SYS_OP_ENFORCE_NOT_NULL:
			case SYSOPER:
			case SYS_OP_EXTRACT:
			case SYS_OP_GROUPING:
			case SYS_OP_GUID:
			case SYS_OP_HASH:
			case SYS_OP_IIX:
			case SYS_OP_ITR:
			case SYS_OP_KEY_VECTOR_CREATE:
			case SYS_OP_KEY_VECTOR_FILTER_LIST:
			case SYS_OP_KEY_VECTOR_FILTER:
			case SYS_OP_KEY_VECTOR_SUCCEEDED:
			case SYS_OP_KEY_VECTOR_USE:
			case SYS_OP_LBID:
			case SYS_OP_LOBLOC2BLOB:
			case SYS_OP_LOBLOC2CLOB:
			case SYS_OP_LOBLOC2ID:
			case SYS_OP_LOBLOC2NCLOB:
			case SYS_OP_LOBLOC2TYP:
			case SYS_OP_LSVI:
			case SYS_OP_LVL:
			case SYS_OP_MAKEOID:
			case SYS_OP_MAP_NONNULL:
			case SYS_OP_MSR:
			case SYS_OP_NICOMBINE:
			case SYS_OP_NIEXTRACT:
			case SYS_OP_NII:
			case SYS_OP_NIX:
			case SYS_OP_NOEXPAND:
			case SYS_OP_NTCIMG:
			case SYS_OP_NUMTORAW:
			case SYS_OP_OIDVALUE:
			case SYS_OP_OPNSIZE:
			case SYS_OP_PAR_1:
			case SYS_OP_PARGID_1:
			case SYS_OP_PARGID:
			case SYS_OP_PAR:
			case SYS_OP_PART_ID:
			case SYS_OP_PIVOT:
			case SYS_OP_R2O:
			case SYS_OP_RAWTONUM:
			case SYS_OP_RDTM:
			case SYS_OP_REF:
			case SYS_OP_RMTD:
			case SYS_OP_ROWIDTOOBJ:
			case SYS_OP_RPB:
			case SYS_OPTLOBPRBSC:
			case SYS_OP_TOSETID:
			case SYS_OP_TPR:
			case SYS_OP_TRTB:
			case SYS_OPTXICMP:
			case SYS_OPTXQCASTASNQ:
			case SYS_OP_UNDESCEND:
			case SYS_OP_VECAND:
			case SYS_OP_VECBIT:
			case SYS_OP_VECOR:
			case SYS_OP_VECXOR:
			case SYS_OP_VERSION:
			case SYS_OP_VREF:
			case SYS_OP_VVD:
			case SYS_OP_XMLCONS_FOR_CSX:
			case SYS_OP_XPTHATG:
			case SYS_OP_XPTHIDX:
			case SYS_OP_XPTHOP:
			case SYS_OP_XTXT2SQLT:
			case SYS_OP_ZONE_ID:
			case SYS_ORDERKEY_DEPTH:
			case SYS_ORDERKEY_MAXCHILD:
			case SYS_ORDERKEY_PARENT:
			case SYS_PARALLEL_TXN:
			case SYS_PATHID_IS_ATTR:
			case SYS_PATHID_IS_NMSPC:
			case SYS_PATHID_LASTNAME:
			case SYS_PATHID_LASTNMSPC:
			case SYS_PATH_REVERSE:
			case SYS_PXQEXTRACT:
			case SYS_RAW_TO_XSID:
			case SYS_RID_ORDER:
			case SYS_ROW_DELTA:
			case SYS_SC_2_XMLT:
			case SYS_SYNRCIREDO:
			case SYSTEM_DEFINED:
			case SYSTEM:
			case SYSTIMESTAMP:
			case SYS_TYPEID:
			case SYS_UMAKEXML:
			case SYS_XMLANALYZE:
			case SYS_XMLCONTAINS:
			case SYS_XMLCONV:
			case SYS_XMLEXNSURI:
			case SYS_XMLGEN:
			case SYS_XMLI_LOC_ISNODE:
			case SYS_XMLI_LOC_ISTEXT:
			case SYS_XMLINSTR:
			case SYS_XMLLOCATOR_GETSVAL:
			case SYS_XMLNODEID_GETCID:
			case SYS_XMLNODEID_GETLOCATOR:
			case SYS_XMLNODEID_GETOKEY:
			case SYS_XMLNODEID_GETPATHID:
			case SYS_XMLNODEID_GETPTRID:
			case SYS_XMLNODEID_GETRID:
			case SYS_XMLNODEID_GETSVAL:
			case SYS_XMLNODEID_GETTID:
			case SYS_XMLNODEID:
			case SYS_XMLT_2_SC:
			case SYS_XMLTRANSLATE:
			case SYS_XMLTYPE2SQL:
			case SYS_XQ_ASQLCNV:
			case SYS_XQ_ATOMCNVCHK:
			case SYS_XQBASEURI:
			case SYS_XQCASTABLEERRH:
			case SYS_XQCODEP2STR:
			case SYS_XQCODEPEQ:
			case SYS_XQCON2SEQ:
			case SYS_XQCONCAT:
			case SYS_XQDELETE:
			case SYS_XQDFLTCOLATION:
			case SYS_XQDOC:
			case SYS_XQDOCURI:
			case SYS_XQDURDIV:
			case SYS_XQED4URI:
			case SYS_XQENDSWITH:
			case SYS_XQERRH:
			case SYS_XQERR:
			case SYS_XQESHTMLURI:
			case SYS_XQEXLOBVAL:
			case SYS_XQEXSTWRP:
			case SYS_XQEXTRACT:
			case SYS_XQEXTRREF:
			case SYS_XQEXVAL:
			case SYS_XQFB2STR:
			case SYS_XQFNBOOL:
			case SYS_XQFNCMP:
			case SYS_XQFNDATIM:
			case SYS_XQFNLNAME:
			case SYS_XQFNNM:
			case SYS_XQFNNSURI:
			case SYS_XQFNPREDTRUTH:
			case SYS_XQFNQNM:
			case SYS_XQFNROOT:
			case SYS_XQFORMATNUM:
			case SYS_XQFTCONTAIN:
			case SYS_XQFUNCR:
			case SYS_XQGETCONTENT:
			case SYS_XQINDXOF:
			case SYS_XQINSERT:
			case SYS_XQINSPFX:
			case SYS_XQIRI2URI:
			case SYS_XQLANG:
			case SYS_XQLLNMFRMQNM:
			case SYS_XQMKNODEREF:
			case SYS_XQNILLED:
			case SYS_XQNODENAME:
			case SYS_XQNORMSPACE:
			case SYS_XQNORMUCODE:
			case SYS_XQ_NRNG:
			case SYS_XQNSP4PFX:
			case SYS_XQNSPFRMQNM:
			case SYS_XQPFXFRMQNM:
			case SYS_XQ_PKSQL2XML:
			case SYS_XQPOLYABS:
			case SYS_XQPOLYADD:
			case SYS_XQPOLYCEL:
			case SYS_XQPOLYCSTBL:
			case SYS_XQPOLYCST:
			case SYS_XQPOLYDIV:
			case SYS_XQPOLYFLR:
			case SYS_XQPOLYMOD:
			case SYS_XQPOLYMUL:
			case SYS_XQPOLYRND:
			case SYS_XQPOLYSQRT:
			case SYS_XQPOLYSUB:
			case SYS_XQPOLYUMUS:
			case SYS_XQPOLYUPLS:
			case SYS_XQPOLYVEQ:
			case SYS_XQPOLYVGE:
			case SYS_XQPOLYVGT:
			case SYS_XQPOLYVLE:
			case SYS_XQPOLYVLT:
			case SYS_XQPOLYVNE:
			case SYS_XQREF2VAL:
			case SYS_XQRENAME:
			case SYS_XQREPLACE:
			case SYS_XQRESVURI:
			case SYS_XQRNDHALF2EVN:
			case SYS_XQRSLVQNM:
			case SYS_XQRYENVPGET:
			case SYS_XQRYVARGET:
			case SYS_XQRYWRP:
			case SYS_XQSEQ2CON4XC:
			case SYS_XQSEQ2CON:
			case SYS_XQSEQDEEPEQ:
			case SYS_XQSEQINSB:
			case SYS_XQSEQRM:
			case SYS_XQSEQRVS:
			case SYS_XQSEQSUB:
			case SYS_XQSEQTYPMATCH:
			case SYS_XQSTARTSWITH:
			case SYS_XQSTATBURI:
			case SYS_XQSTR2CODEP:
			case SYS_XQSTRJOIN:
			case SYS_XQSUBSTRAFT:
			case SYS_XQSUBSTRBEF:
			case SYS_XQTOKENIZE:
			case SYS_XQTREATAS:
			case SYS_XQ_UPKXML2SQL:
			case SYS_XQXFORM:
			case SYS_XSID_TO_RAW:
			case SYS_ZMAP_FILTER:
			case SYS_ZMAP_REFRESH:
			case T_LETTER:
			case TABLE_LOOKUP_BY_NL:
			case TABLESPACE_NO:
			case TABLESPACE:
			case TABLES:
			case TABLE_STATS:
			case TABLE:
			case TABNO:
			case TAG:
			case TANH:
			case TAN:
			case TBLORIDXPARTNUM:
			case TEMPFILE:
			case TEMPLATE:
			case TEMPORARY:
			case TEMP_TABLE:
			case TEST:
			case TEXT:
			case THAN:
			case THEN:
			case THE:
			case THREAD:
			case THROUGH:
			case TIER:
			case TIES:
			case TIMEOUT:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMES:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_OFFSET:
			case TIMEZONE_REGION:
			case TIME_ZONE:
			case TIMING:
			case TIV_GB:
			case TIV_SSF:
			case TO_ACLID:
			case TO_BINARY_DOUBLE:
			case TO_BINARY_FLOAT:
			case TO_BLOB:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCHAR:
			case TO_NCLOB:
			case TO_NUMBER:
			case TOPLEVEL:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_TIME:
			case TO_TIME_TZ:
			case TO_YMINTERVAL:
			case TRACE:
			case TRACING:
			case TRACKING:
			case TRAILING:
			case TRANSACTION:
			case TRANSFORM:
			case TRANSFORM_DISTINCT_AGG:
			case TRANSITIONAL:
			case TRANSITION:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGERS:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TRUNC:
			case TRUSTED:
			case TRUST:
			case TUNING:
			case TX:
			case TYPES:
			case TYPE:
			case TZ_OFFSET:
			case UB2:
			case UBA:
			case UCS2:
			case UID:
			case UNARCHIVED:
			case UNBOUNDED:
			case UNBOUND:
			case UNCONDITIONAL:
			case UNDER:
			case UNDO:
			case UNDROP:
			case UNIFORM:
			case UNISTR:
			case UNLIMITED:
			case UNLOAD:
			case UNLOCK:
			case UNMATCHED:
			case UNNEST_INNERJ_DISTINCT_VIEW:
			case UNNEST_NOSEMIJ_NODISTINCTVIEW:
			case UNNEST_SEMIJ_VIEW:
			case UNNEST:
			case UNPACKED:
			case UNPIVOT:
			case UNPLUG:
			case UNPROTECTED:
			case UNQUIESCE:
			case UNRECOVERABLE:
			case UNRESTRICTED:
			case UNSUBSCRIBE:
			case UNTIL:
			case UNUSABLE:
			case UNUSED:
			case UPDATABLE:
			case UPDATED:
			case UPDATEXML:
			case UPD_INDEXES:
			case UPD_JOININDEX:
			case UPGRADE:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USABLE:
			case USAGE:
			case USE_ANTI:
			case USE_CONCAT:
			case USE_CUBE:
			case USE_HASH_AGGREGATION:
			case USE_HASH_GBY_FOR_PUSHDOWN:
			case USE_HASH:
			case USE_HIDDEN_PARTITIONS:
			case USE_INVISIBLE_INDEXES:
			case USE_MERGE_CARTESIAN:
			case USE_MERGE:
			case USE_NL:
			case USE_NL_WITH_INDEX:
			case USE_PRIVATE_OUTLINES:
			case USER_DATA:
			case USER_DEFINED:
			case USERENV:
			case USERGROUP:
			case USER_RECYCLEBIN:
			case USERS:
			case USER_TABLESPACES:
			case USER:
			case USE_SEMI:
			case USE_STORED_OUTLINES:
			case USE_TTT_FOR_GSETS:
			case USE:
			case USE_VECTOR_AGGREGATION:
			case USE_WEAK_NAME_RESL:
			case USING_NO_EXPAND:
			case USING:
			case UTF16BE:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case V1:
			case V2:
			case VALIDATE:
			case VALIDATE_CONVERSION:
			case VALIDATION:
			case VALID_TIME_END:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VAR_POP:
			case VARRAYS:
			case VARRAY:
			case VAR_SAMP:
			case VARYING:
			case VECTOR_READ_TRACE:
			case VECTOR_READ:
			case VECTOR_TRANSFORM_DIMS:
			case VECTOR_TRANSFORM_FACT:
			case VECTOR_TRANSFORM:
			case VERIFIER:
			case VERIFY:
			case VERSIONING:
			case VERSIONS_ENDSCN:
			case VERSIONS_ENDTIME:
			case VERSIONS_OPERATION:
			case VERSIONS_STARTSCN:
			case VERSIONS_STARTTIME:
			case VERSIONS:
			case VERSIONS_XID:
			case VERSION:
			case VIOLATION:
			case VIRTUAL:
			case VISIBILITY:
			case VISIBLE:
			case VOLUME:
			case VSIZE:
			case WAIT:
			case WALLET:
			case WARNING:
			case WEEKS:
			case WEEK:
			case WELLFORMED:
			case WHENEVER:
			case WHEN:
			case WHILE:
			case WHITESPACE:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WITH_PLSQL:
			case WORK:
			case WRAPPED:
			case WRAPPER:
			case WRITE:
			case XDB_FASTPATH_INSERT:
			case X_DYN_PRUNE:
			case XID:
			case XML2OBJECT:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCDATA:
			case XMLCOLATTVAL:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDIFF:
			case XML_DML_RWT_STMT:
			case XMLELEMENT:
			case XMLEXISTS2:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLINDEX_REWRITE_IN_SELECT:
			case XMLINDEX_REWRITE:
			case XMLINDEX_SEL_IDX_TBL:
			case XMLISNODE:
			case XMLISVALID:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPATCH:
			case XMLPI:
			case XMLQUERYVAL:
			case XMLQUERY:
			case XMLROOT:
			case XMLSCHEMA:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTRANSFORMBLOB:
			case XMLTRANSFORM:
			case XMLTYPE:
			case XML:
			case XPATHTABLE:
			case XS_SYS_CONTEXT:
			case XS:
			case YEARS:
			case YEAR:
			case YEAROFWEEK:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONEMAP:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case BLOCKCHAIN:
			case COLLATE:
			case COLLATION:
			case DEFINITION:
			case DUPLICATED:
			case EXTENDED:
			case HASHING:
			case IDLE:
			case IMMUTABLE:
			case ORACLE_DATAPUMP:
			case ORACLE_HDFS:
			case ORACLE_HIVE:
			case ORACLE_LOADER:
			case SHARDED:
			case ISOLATE:
			case ROOT:
			case UNITE:
			case ALGORITHM:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MEMOPTIMIZE:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case PERIOD:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1282);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTRODUCER) {
					{
					setState(1280);
					match(INTRODUCER);
					setState(1281);
					char_set_name();
					}
				}

				setState(1284);
				id_expression();
				setState(1287);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
				case 1:
					{
					setState(1285);
					match(PERIOD);
					setState(1286);
					id_expression();
					}
					break;
				}
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(1289);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIndex_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIndex_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitIndex_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_index_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1292);
			identifier();
			setState(1295);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(1293);
				match(PERIOD);
				setState(1294);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cursor_nameContext extends ParserRuleContext {
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_cursor_name);
		try {
			setState(1299);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABS:
			case ABSENT:
			case ACCESS:
			case ACCESSED:
			case ACCOUNT:
			case ACL:
			case ACOS:
			case ACROSS:
			case ACTION:
			case ACTIONS:
			case ACTIVATE:
			case ACTIVE:
			case ACTIVE_COMPONENT:
			case ACTIVE_DATA:
			case ACTIVE_FUNCTION:
			case ACTIVE_TAG:
			case ACTIVITY:
			case ADAPTIVE_PLAN:
			case ADD:
			case ADD_COLUMN:
			case ADD_GROUP:
			case ADD_MONTHS:
			case ADJ_DATE:
			case ADMIN:
			case ADMINISTER:
			case ADMINISTRATOR:
			case ADVANCED:
			case ADVISE:
			case ADVISOR:
			case AFD_DISKSTRING:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALIAS:
			case ALLOCATE:
			case ALLOW:
			case ALL_ROWS:
			case ALTERNATE:
			case ALWAYS:
			case ANALYTIC:
			case ANALYZE:
			case ANCESTOR:
			case ANCILLARY:
			case AND_EQUAL:
			case ANOMALY:
			case ANSI_REARCH:
			case ANTIJOIN:
			case ANYSCHEMA:
			case APPEND:
			case APPENDCHILDXML:
			case APPEND_VALUES:
			case APPLICATION:
			case APPLY:
			case APPROX_COUNT_DISTINCT:
			case ARCHIVAL:
			case ARCHIVE:
			case ARCHIVED:
			case ARCHIVELOG:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASIS:
			case ASSEMBLY:
			case ASSIGN:
			case ASSOCIATE:
			case ASYNC:
			case ASYNCHRONOUS:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AUTHENTICATED:
			case AUTHENTICATION:
			case AUTHID:
			case AUTHORIZATION:
			case AUTOALLOCATE:
			case AUTO:
			case AUTOEXTEND:
			case AUTO_LOGIN:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case AUTO_REOPTIMIZE:
			case AVAILABILITY:
			case AVRO:
			case BACKGROUND:
			case BACKINGFILE:
			case BACKUP:
			case BACKUPS:
			case BASIC:
			case BASICFILE:
			case BATCH:
			case BATCHSIZE:
			case BATCH_TABLE_ACCESS_BY_ROWID:
			case BECOME:
			case BEFORE:
			case BEGIN:
			case BEGINNING:
			case BEGIN_OUTLINE_DATA:
			case BEHALF:
			case BEQUEATH:
			case BFILE:
			case BFILENAME:
			case BIGFILE:
			case BINARY:
			case BINARY_DOUBLE:
			case BINARY_DOUBLE_INFINITY:
			case BINARY_DOUBLE_NAN:
			case BINARY_FLOAT:
			case BINARY_FLOAT_INFINITY:
			case BINARY_FLOAT_NAN:
			case BINARY_INTEGER:
			case BIND_AWARE:
			case BINDING:
			case BIN_TO_NUM:
			case BITAND:
			case BITMAP_AND:
			case BITMAP:
			case BITMAPS:
			case BITMAP_TREE:
			case BITS:
			case BLOB:
			case BLOCK:
			case BLOCK_RANGE:
			case BLOCKS:
			case BLOCKSIZE:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BOUND:
			case BRANCH:
			case BREADTH:
			case BROADCAST:
			case BSON:
			case BUFFER:
			case BUFFER_CACHE:
			case BUFFER_POOL:
			case BUILD:
			case BULK:
			case BYPASS_RECURSIVE_CHECK:
			case BYPASS_UJVC:
			case BYTE:
			case CACHE:
			case CACHE_CB:
			case CACHE_INSTANCES:
			case CACHE_TEMP_TABLE:
			case CACHING:
			case CALCULATED:
			case CALLBACK:
			case CALL:
			case CANCEL:
			case CAPACITY:
			case CAPTION:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CASESENSITIVE:
			case CATEGORY:
			case CDBDEFAULT:
			case CEIL:
			case CELL_FLASH_CACHE:
			case CERTIFICATE:
			case CFILE:
			case CHAINED:
			case CHANGE:
			case CHANGE_DUPKEY_ERROR_INDEX:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHECK_ACL_REWRITE:
			case CHECKPOINT:
			case CHILD:
			case CHOOSE:
			case CHR:
			case CHUNK:
			case CLASS:
			case CLASSIFICATION:
			case CLASSIFIER:
			case CLAUSE:
			case CLEAN:
			case CLEANUP:
			case CLEAR:
			case C_LETTER:
			case CLIENT:
			case CLOB:
			case CLONE:
			case CLOSE_CACHED_OPEN_CURSORS:
			case CLOSE:
			case CLUSTER_BY_ROWID:
			case CLUSTER:
			case CLUSTER_DETAILS:
			case CLUSTER_DISTANCE:
			case CLUSTER_ID:
			case CLUSTERING:
			case CLUSTERING_FACTOR:
			case CLUSTER_PROBABILITY:
			case CLUSTER_SET:
			case COALESCE:
			case COALESCE_SQ:
			case COARSE:
			case CO_AUTH_IND:
			case COLD:
			case COLLECT:
			case COLUMNAR:
			case COLUMN_AUTH_INDICATOR:
			case COLUMN:
			case COLUMNS:
			case COLUMN_STATS:
			case COLUMN_VALUE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMMON:
			case COMMON_DATA:
			case COMPACT:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPLIANCE:
			case COMPONENT:
			case COMPONENTS:
			case COMPOSE:
			case COMPOSITE:
			case COMPOSITE_LIMIT:
			case COMPOUND:
			case COMPUTE:
			case CONCAT:
			case CON_DBID_TO_ID:
			case CONDITIONAL:
			case CONDITION:
			case CONFIRM:
			case CONFORMING:
			case CON_GUID_TO_ID:
			case CON_ID:
			case CON_NAME_TO_ID:
			case CONNECT_BY_CB_WHR_ONLY:
			case CONNECT_BY_COMBINE_SW:
			case CONNECT_BY_COST_BASED:
			case CONNECT_BY_ELIM_DUPS:
			case CONNECT_BY_FILTERING:
			case CONNECT_BY_ISCYCLE:
			case CONNECT_BY_ISLEAF:
			case CONNECT_BY_ROOT:
			case CONNECT_TIME:
			case CONSIDER:
			case CONSISTENT:
			case CONSTANT:
			case CONST:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINER:
			case CONTAINERS:
			case CONTAINERS_DEFAULT:
			case CONTAINER_DATA:
			case CONTAINER_MAP:
			case CONTENT:
			case CONTENTS:
			case CONTEXT:
			case CONTINUE:
			case CONTROLFILE:
			case CON_UID_TO_ID:
			case CONVERT:
			case CONVERSION:
			case COOKIE:
			case COPY:
			case CORR_K:
			case CORR_S:
			case CORRUPTION:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COST_XML_QUERY_REWRITE:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CPU_COSTING:
			case CPU_PER_CALL:
			case CPU_PER_SESSION:
			case CRASH:
			case CREATE_FILE_DEST:
			case CREATE_STORED_OUTLINES:
			case CREATION:
			case CREDENTIAL:
			case CRITICAL:
			case CROSS:
			case CROSSEDITION:
			case CSCONVERT:
			case CUBE_AJ:
			case CUBE:
			case CUBE_GB:
			case CUBE_SJ:
			case CUME_DISTM:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURRENTV:
			case CURSOR:
			case CURSOR_SHARING_EXACT:
			case CURSOR_SPECIFIC_SEGMENT:
			case CUSTOMDATUM:
			case CV:
			case CYCLE:
			case DANGLING:
			case DATABASE:
			case DATA:
			case DATAFILE:
			case DATAFILES:
			case DATAMOVEMENT:
			case DATAOBJNO:
			case DATAOBJ_TO_MAT_PARTITION:
			case DATAOBJ_TO_PARTITION:
			case DATAPUMP:
			case DATA_SECURITY_REWRITE_LIMIT:
			case DATE_MODE:
			case DAY:
			case DAYOFWEEK:
			case DAYS:
			case DBA:
			case DBA_RECYCLEBIN:
			case DBMS_STATS:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DB_UNIQUE_NAME:
			case DB_VERSION:
			case DDL:
			case DEALLOCATE:
			case DEBUG:
			case DEBUGGER:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECORRELATE:
			case DECR:
			case DECREMENT:
			case DECRYPT:
			case DEDUPLICATE:
			case DEFAULTS:
			case DEFAULT_COLLATION:
			case DEFAULT_CREDENTIAL:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINED:
			case DEFINE:
			case DEFINER:
			case DEGREE:
			case DELAY:
			case DELEGATE:
			case DELETE_ALL:
			case DELETE:
			case DELETEXML:
			case DEMAND:
			case DENSE_RANKM:
			case DEPENDENT:
			case DEPTH:
			case DEQUEUE:
			case DEREF:
			case DEREF_NO_REWRITE:
			case DESCRIPTION:
			case DESTROY:
			case DETACHED:
			case DETERMINES:
			case DETERMINISTIC:
			case DICTIONARY:
			case DIMENSION:
			case DIMENSIONS:
			case DIRECT_LOAD:
			case DIRECTORY:
			case DIRECT_PATH:
			case DISABLE_ALL:
			case DISABLE:
			case DISABLE_PARALLEL_DML:
			case DISABLE_PRESET:
			case DISABLE_RPKE:
			case DISALLOW:
			case DISASSOCIATE:
			case DISCARD:
			case DISCONNECT:
			case DISK:
			case DISKGROUP:
			case DISKS:
			case DISMOUNT:
			case DISTINGUISHED:
			case DISTRIBUTED:
			case DISTRIBUTE:
			case DML:
			case DML_UPDATE:
			case DOCFIDELITY:
			case DOCUMENT:
			case DOMAIN_INDEX_FILTER:
			case DOMAIN_INDEX_NO_SORT:
			case DOMAIN_INDEX_SORT:
			case DOY:
			case DOUBLE:
			case DOWNGRADE:
			case DRIVING_SITE:
			case DROP_COLUMN:
			case DROP_GROUP:
			case DSINTERVAL_UNCONSTRAINED:
			case DST_UPGRADE_INSERT_CONV:
			case DUMP:
			case DUPLICATE:
			case DV:
			case DYNAMIC:
			case DYNAMIC_SAMPLING:
			case DYNAMIC_SAMPLING_EST_CDN:
			case E_LETTER:
			case EACH:
			case EDITIONABLE:
			case EDITION:
			case EDITIONING:
			case EDITIONS:
			case ELEMENT:
			case ELIM_GROUPBY:
			case ELIMINATE_JOIN:
			case ELIMINATE_OBY:
			case ELIMINATE_OUTER_JOIN:
			case EM:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE_ALL:
			case ENABLE:
			case ENABLE_PARALLEL_DML:
			case ENABLE_PRESET:
			case ENCODING:
			case ENCRYPT:
			case ENCRYPTION:
			case END_OUTLINE_DATA:
			case ENFORCED:
			case ENFORCE:
			case ENQUEUE:
			case ENTERPRISE:
			case ENTITYESCAPING:
			case ENTRY:
			case EQUIPART:
			case ERR:
			case ERROR_ARGUMENT:
			case ERROR:
			case ERROR_ON_OVERLAP_TIME:
			case ERRORS:
			case ESCAPE:
			case ESTIMATE:
			case EVAL:
			case EVALNAME:
			case EVALUATE:
			case EVALUATION:
			case EVENTS:
			case EVERY:
			case EXCEPT:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCHANGE:
			case EXCLUDE:
			case EXCLUDING:
			case EXECUTE:
			case EXEMPT:
			case EXISTING:
			case EXISTS:
			case EXISTSNODE:
			case EXIT:
			case EXPAND_GSET_TO_UNION:
			case EXPAND_TABLE:
			case EXP:
			case EXPIRE:
			case EXPLAIN:
			case EXPLOSION:
			case EXPORT:
			case EXPR_CORR_CHECK:
			case EXPRESS:
			case EXTENDS:
			case EXTENT:
			case EXTENTS:
			case EXTERNAL:
			case EXTERNALLY:
			case EXTRACTCLOBXML:
			case EXTRACT:
			case EXTRACTVALUE:
			case EXTRA:
			case FACILITY:
			case FACT:
			case FACTOR:
			case FACTORIZE_JOIN:
			case FAILED:
			case FAILED_LOGIN_ATTEMPTS:
			case FAILGROUP:
			case FAILOVER:
			case FAILURE:
			case FALSE:
			case FAMILY:
			case FAR:
			case FAST:
			case FASTSTART:
			case FBTSCAN:
			case FEATURE:
			case FEATURE_DETAILS:
			case FEATURE_ID:
			case FEATURE_SET:
			case FEATURE_VALUE:
			case FETCH:
			case FILE:
			case FILE_NAME_CONVERT:
			case FILEGROUP:
			case FILESTORE:
			case FILESYSTEM_LIKE_LOGGING:
			case FILTER:
			case FINAL:
			case FINE:
			case FINISH:
			case FIRST:
			case FIRSTM:
			case FIRST_ROWS:
			case FIRST_VALUE:
			case FIXED_VIEW_DATA:
			case FLAGGER:
			case FLASHBACK:
			case FLASH_CACHE:
			case FLOAT:
			case FLOB:
			case FLEX:
			case FLOOR:
			case FLUSH:
			case FOLDER:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FORCE_XML_QUERY_REWRITE:
			case FOREIGN:
			case FOREVER:
			case FORMAT:
			case FORWARD:
			case FRAGMENT_NUMBER:
			case FREELIST:
			case FREELISTS:
			case FREEPOOLS:
			case FRESH:
			case FROM_TZ:
			case FULL:
			case FULL_OUTER_JOIN_TO_OUTER:
			case FUNCTION:
			case FUNCTIONS:
			case FTP:
			case G_LETTER:
			case GATHER_OPTIMIZER_STATISTICS:
			case GATHER_PLAN_STATISTICS:
			case GBY_CONC_ROLLUP:
			case GBY_PUSHDOWN:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GLOBALLY:
			case GLOBAL_NAME:
			case GLOBAL_TOPIC_ENABLED:
			case GROUP_BY:
			case GROUP_ID:
			case GROUPING:
			case GROUPING_ID:
			case GROUPS:
			case GUARANTEED:
			case GUARANTEE:
			case GUARD:
			case HALF_YEARS:
			case HASH_AJ:
			case HASH:
			case HASHKEYS:
			case HASH_SJ:
			case HEADER:
			case HEAP:
			case HELP:
			case HEXTORAW:
			case HEXTOREF:
			case HIDDEN_KEYWORD:
			case HIDE:
			case HIER_ORDER:
			case HIERARCHICAL:
			case HIERARCHY:
			case HIGH:
			case HINTSET_BEGIN:
			case HINTSET_END:
			case HOT:
			case HOUR:
			case HOURS:
			case HTTP:
			case HWM_BROKERED:
			case HYBRID:
			case H_LETTER:
			case IDENTIFIER:
			case IDENTITY:
			case IDGENERATORS:
			case ID:
			case IDLE_TIME:
			case IF:
			case IGNORE:
			case IGNORE_OPTIM_EMBEDDED_HINTS:
			case IGNORE_ROW_ON_DUPKEY_INDEX:
			case IGNORE_WHERE_CLAUSE:
			case ILM:
			case IMMEDIATE:
			case IMPACT:
			case IMPORT:
			case INACTIVE:
			case INACTIVE_ACCOUNT_TIME:
			case INCLUDE:
			case INCLUDE_VERSION:
			case INCLUDING:
			case INCREMENTAL:
			case INCREMENT:
			case INCR:
			case INDENT:
			case INDEX_ASC:
			case INDEX_COMBINE:
			case INDEX_DESC:
			case INDEXED:
			case INDEXES:
			case INDEX_FFS:
			case INDEX_FILTER:
			case INDEXING:
			case INDEX_JOIN:
			case INDEX_ROWS:
			case INDEX_RRS:
			case INDEX_RS_ASC:
			case INDEX_RS_DESC:
			case INDEX_RS:
			case INDEX_SCAN:
			case INDEX_SKIP_SCAN:
			case INDEX_SS_ASC:
			case INDEX_SS_DESC:
			case INDEX_SS:
			case INDEX_STATS:
			case INDEXTYPE:
			case INDEXTYPES:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INFORMATIONAL:
			case INHERIT:
			case INITCAP:
			case INITIAL:
			case INITIALIZED:
			case INITIALLY:
			case INITRANS:
			case INLINE:
			case INLINE_XMLTYPE_NT:
			case INMEMORY:
			case IN_MEMORY_METADATA:
			case INMEMORY_PRUNING:
			case INNER:
			case INOUT:
			case INPLACE:
			case INSERTCHILDXMLAFTER:
			case INSERTCHILDXMLBEFORE:
			case INSERTCHILDXML:
			case INSERTXMLAFTER:
			case INSERTXMLBEFORE:
			case INSTANCE:
			case INSTANCES:
			case INSTANTIABLE:
			case INSTANTLY:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTEGER:
			case INTERLEAVED:
			case INTERMEDIATE:
			case INTERNAL_CONVERT:
			case INTERNAL_USE:
			case INTERPRETED:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case INVISIBLE:
			case IN_XQUERY:
			case IS_LEAF:
			case ISOLATION:
			case ISOLATION_LEVEL:
			case ITERATE:
			case ITERATION_NUMBER:
			case JAVA:
			case JOB:
			case JOIN:
			case JSON_ARRAYAGG:
			case JSON_ARRAY:
			case JSON_EQUAL:
			case JSON_EXISTS2:
			case JSON_EXISTS:
			case JSONGET:
			case JSON:
			case JSON_OBJECTAGG:
			case JSON_OBJECT:
			case JSONPARSE:
			case JSON_QUERY:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_TEXTCONTAINS2:
			case JSON_TEXTCONTAINS:
			case JSON_TRANSFORM:
			case JSON_VALUE:
			case K_LETTER:
			case KEEP_DUPLICATES:
			case KEEP:
			case KERBEROS:
			case KEY:
			case KEY_LENGTH:
			case KEYSIZE:
			case KEYS:
			case KEYSTORE:
			case KILL:
			case LABEL:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LATERAL:
			case LAX:
			case LAYER:
			case LDAP_REGISTRATION_ENABLED:
			case LDAP_REGISTRATION:
			case LDAP_REG_SYNC_INTERVAL:
			case LEAF:
			case LEAD_CDB:
			case LEAD_CDB_URI:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LESS:
			case LEVEL:
			case LEVEL_NAME:
			case LEVELS:
			case LIBRARY:
			case LIFECYCLE:
			case LIFE:
			case LIFETIME:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_EXPAND:
			case LIMIT:
			case LINEAR:
			case LINK:
			case LIST:
			case LN:
			case LNNVL:
			case LOAD:
			case LOB:
			case LOBNVL:
			case LOBS:
			case LOCAL_INDEXES:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCATOR:
			case LOCKDOWN:
			case LOCKED:
			case LOCKING:
			case LOGFILE:
			case LOGFILES:
			case LOGGING:
			case LOGICAL:
			case LOGICAL_READS_PER_CALL:
			case LOGICAL_READS_PER_SESSION:
			case LOG:
			case LOGMINING:
			case LOGOFF:
			case LOGON:
			case LOG_READ_ONLY_VIOLATIONS:
			case LONG:
			case LOOP:
			case LOST:
			case LOWER:
			case LOW:
			case LPAD:
			case LTRIM:
			case M_LETTER:
			case MAIN:
			case MAKE_REF:
			case MANAGED:
			case MANAGE:
			case MANAGEMENT:
			case MANAGER:
			case MANDATORY:
			case MANUAL:
			case MAP:
			case MAPPING:
			case MASTER:
			case MATCHED:
			case MATCHES:
			case MATCH:
			case MATCH_NUMBER:
			case MATCH_RECOGNIZE:
			case MATERIALIZED:
			case MATERIALIZE:
			case MAXARCHLOGS:
			case MAXDATAFILES:
			case MAXEXTENTS:
			case MAXIMIZE:
			case MAXINSTANCES:
			case MAXLOGFILES:
			case MAXLOGHISTORY:
			case MAXLOGMEMBERS:
			case MAX_SHARED_TEMP_SIZE:
			case MAXSIZE:
			case MAXTRANS:
			case MAXVALUE:
			case MEASURE:
			case MEASURES:
			case MEDIUM:
			case MEMBER:
			case MEMBER_CAPTION:
			case MEMBER_DESCRIPTION:
			case MEMBER_NAME:
			case MEMBER_UNIQUE_NAME:
			case MEMCOMPRESS:
			case MEMORY:
			case MERGEACTIONS:
			case MERGE_AJ:
			case MERGE_CONST_ON:
			case MERGE:
			case MERGE_SJ:
			case METADATA:
			case METHOD:
			case MIGRATE:
			case MIGRATION:
			case MINEXTENTS:
			case MINIMIZE:
			case MINIMUM:
			case MINING:
			case MINUS_NULL:
			case MINUTE:
			case MINUTES:
			case MINVALUE:
			case MIRRORCOLD:
			case MIRRORHOT:
			case MIRROR:
			case MISSING:
			case MISMATCH:
			case MLSLABEL:
			case MODEL_COMPILE_SUBQUERY:
			case MODEL_DONTVERIFY_UNIQUENESS:
			case MODEL_DYNAMIC_SUBQUERY:
			case MODEL_MIN_ANALYSIS:
			case MODEL:
			case MODEL_NB:
			case MODEL_NO_ANALYSIS:
			case MODEL_PBY:
			case MODEL_PUSH_REF:
			case MODEL_SV:
			case MODIFICATION:
			case MODIFY_COLUMN_TYPE:
			case MODIFY:
			case MOD:
			case MODULE:
			case MONITORING:
			case MONITOR:
			case MONTH:
			case MONTHS_BETWEEN:
			case MONTHS:
			case MOUNT:
			case MOUNTPATH:
			case MOUNTPOINT:
			case MOVEMENT:
			case MOVE:
			case MULTIDIMENSIONAL:
			case MULTISET:
			case MV_MERGE:
			case NAMED:
			case NAME:
			case NAMESPACE:
			case NAN:
			case NANVL:
			case NATIONAL:
			case NATIVE_FULL_OUTER_JOIN:
			case NATIVE:
			case NATURAL:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NEEDED:
			case NEG:
			case NESTED:
			case NESTED_TABLE_FAST_INSERT:
			case NESTED_TABLE_GET_REFS:
			case NESTED_TABLE_ID:
			case NESTED_TABLE_SET_REFS:
			case NESTED_TABLE_SET_SETID:
			case NETWORK:
			case NEVER:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NEXT:
			case NL_AJ:
			case NLJ_BATCHING:
			case NLJ_INDEX_FILTER:
			case NLJ_INDEX_SCAN:
			case NLJ_PREFETCH:
			case NLS_CALENDAR:
			case NLS_CHARACTERSET:
			case NLS_CHARSET_DECL_LEN:
			case NLS_CHARSET_ID:
			case NLS_CHARSET_NAME:
			case NLS_COMP:
			case NLS_CURRENCY:
			case NLS_DATE_FORMAT:
			case NLS_DATE_LANGUAGE:
			case NLS_INITCAP:
			case NLS_ISO_CURRENCY:
			case NL_SJ:
			case NLS_LANG:
			case NLS_LANGUAGE:
			case NLS_LENGTH_SEMANTICS:
			case NLS_LOWER:
			case NLS_NCHAR_CONV_EXCP:
			case NLS_NUMERIC_CHARACTERS:
			case NLS_SORT:
			case NLSSORT:
			case NLS_SPECIAL_CHARS:
			case NLS_TERRITORY:
			case NLS_UPPER:
			case NO_ACCESS:
			case NO_ADAPTIVE_PLAN:
			case NO_ANSI_REARCH:
			case NOAPPEND:
			case NOARCHIVELOG:
			case NOAUDIT:
			case NO_AUTO_REOPTIMIZE:
			case NO_BASETABLE_MULTIMV_REWRITE:
			case NO_BATCH_TABLE_ACCESS_BY_ROWID:
			case NO_BIND_AWARE:
			case NO_BUFFER:
			case NOCACHE:
			case NO_CARTESIAN:
			case NO_CHECK_ACL_REWRITE:
			case NO_CLUSTER_BY_ROWID:
			case NO_CLUSTERING:
			case NO_COALESCE_SQ:
			case NO_COMMON_DATA:
			case NO_CONNECT_BY_CB_WHR_ONLY:
			case NO_CONNECT_BY_COMBINE_SW:
			case NO_CONNECT_BY_COST_BASED:
			case NO_CONNECT_BY_ELIM_DUPS:
			case NO_CONNECT_BY_FILTERING:
			case NOCOPY:
			case NO_COST_XML_QUERY_REWRITE:
			case NO_CPU_COSTING:
			case NOCPU_COSTING:
			case NOCYCLE:
			case NO_DATA_SECURITY_REWRITE:
			case NO_DECORRELATE:
			case NODELAY:
			case NO_DOMAIN_INDEX_FILTER:
			case NO_DST_UPGRADE_INSERT_CONV:
			case NO_ELIM_GROUPBY:
			case NO_ELIMINATE_JOIN:
			case NO_ELIMINATE_OBY:
			case NO_ELIMINATE_OUTER_JOIN:
			case NOENTITYESCAPING:
			case NO_EXPAND_GSET_TO_UNION:
			case NO_EXPAND:
			case NO_EXPAND_TABLE:
			case NO_FACT:
			case NO_FACTORIZE_JOIN:
			case NO_FILTERING:
			case NOFORCE:
			case NO_FULL_OUTER_JOIN_TO_OUTER:
			case NO_GATHER_OPTIMIZER_STATISTICS:
			case NO_GBY_PUSHDOWN:
			case NOGUARANTEE:
			case NO_INDEX_FFS:
			case NO_INDEX:
			case NO_INDEX_SS:
			case NO_INMEMORY:
			case NO_INMEMORY_PRUNING:
			case NOKEEP:
			case NO_LOAD:
			case NOLOCAL:
			case NOLOGGING:
			case NOMAPPING:
			case NOMAXVALUE:
			case NO_MERGE:
			case NOMINIMIZE:
			case NOMINVALUE:
			case NO_MODEL_PUSH_REF:
			case NO_MONITORING:
			case NOMONITORING:
			case NO_MONITOR:
			case NO_MULTIMV_REWRITE:
			case NO_NATIVE_FULL_OUTER_JOIN:
			case NONBLOCKING:
			case NONEDITIONABLE:
			case NONE:
			case NO_NLJ_BATCHING:
			case NO_NLJ_PREFETCH:
			case NO:
			case NONSCHEMA:
			case NO_OBJECT_LINK:
			case NOORDER:
			case NO_ORDER_ROLLUPS:
			case NO_OUTER_JOIN_TO_ANTI:
			case NO_OUTER_JOIN_TO_INNER:
			case NOOVERRIDE:
			case NO_PARALLEL_INDEX:
			case NOPARALLEL_INDEX:
			case NO_PARALLEL:
			case NOPARALLEL:
			case NO_PARTIAL_COMMIT:
			case NO_PARTIAL_JOIN:
			case NO_PARTIAL_ROLLUP_PUSHDOWN:
			case NOPARTITION:
			case NO_PLACE_DISTINCT:
			case NO_PLACE_GROUP_BY:
			case NO_PQ_CONCURRENT_UNION:
			case NO_PQ_MAP:
			case NOPROMPT:
			case NO_PQ_REPLICATE:
			case NO_PQ_SKEW:
			case NO_PRUNE_GSETS:
			case NO_PULL_PRED:
			case NO_PUSH_PRED:
			case NO_PUSH_SUBQ:
			case NO_PX_FAULT_TOLERANCE:
			case NO_PX_JOIN_FILTER:
			case NO_QKN_BUFF:
			case NO_QUERY_TRANSFORMATION:
			case NO_REF_CASCADE:
			case NORELOCATE:
			case NORELY:
			case NOREPAIR:
			case NOREPLAY:
			case NORESETLOGS:
			case NO_RESULT_CACHE:
			case NOREVERSE:
			case NO_REWRITE:
			case NOREWRITE:
			case NORMAL:
			case NO_ROOT_SW_FOR_LOCAL:
			case NOROWDEPENDENCIES:
			case NOSCHEMACHECK:
			case NOSEGMENT:
			case NO_SEMIJOIN:
			case NO_SEMI_TO_INNER:
			case NO_SET_TO_JOIN:
			case NOSORT:
			case NO_SQL_TRANSLATION:
			case NO_SQL_TUNE:
			case NO_STAR_TRANSFORMATION:
			case NO_STATEMENT_QUEUING:
			case NO_STATS_GSETS:
			case NOSTRICT:
			case NO_SUBQUERY_PRUNING:
			case NO_SUBSTRB_PAD:
			case NO_SWAP_JOIN_INPUTS:
			case NOSWITCH:
			case NO_TABLE_LOOKUP_BY_NL:
			case NO_TEMP_TABLE:
			case NOTHING:
			case NOTIFICATION:
			case NO_TRANSFORM_DISTINCT_AGG:
			case NO_UNNEST:
			case NO_USE_CUBE:
			case NO_USE_HASH_AGGREGATION:
			case NO_USE_HASH_GBY_FOR_PUSHDOWN:
			case NO_USE_HASH:
			case NO_USE_INVISIBLE_INDEXES:
			case NO_USE_MERGE:
			case NO_USE_NL:
			case NO_USE_VECTOR_AGGREGATION:
			case NOVALIDATE:
			case NO_VECTOR_TRANSFORM_DIMS:
			case NO_VECTOR_TRANSFORM_FACT:
			case NO_VECTOR_TRANSFORM:
			case NO_XDB_FASTPATH_INSERT:
			case NO_XML_DML_REWRITE:
			case NO_XMLINDEX_REWRITE_IN_SELECT:
			case NO_XMLINDEX_REWRITE:
			case NO_XML_QUERY_REWRITE:
			case NO_ZONEMAP:
			case NTH_VALUE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUM_INDEX_KEYS:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT2XML:
			case OBJECT:
			case OBJ_ID:
			case OBJNO:
			case OBJNO_REUSE:
			case OCCURENCES:
			case OFFLINE:
			case OFF:
			case OFFSET:
			case OIDINDEX:
			case OID:
			case OLAP:
			case OLD:
			case OLD_PUSH_PRED:
			case OLS:
			case OLTP:
			case OMIT:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPAQUE:
			case OPAQUE_TRANSFORM:
			case OPAQUE_XCANONICAL:
			case OPCODE:
			case OPEN:
			case OPERATIONS:
			case OPERATOR:
			case OPT_ESTIMATE:
			case OPTIMAL:
			case OPTIMIZE:
			case OPTIMIZER_FEATURES_ENABLE:
			case OPTIMIZER_GOAL:
			case OPT_PARAM:
			case ORA_BRANCH:
			case ORA_CHECK_ACL:
			case ORA_CHECK_PRIVILEGE:
			case ORA_CLUSTERING:
			case ORADATA:
			case ORADEBUG:
			case ORA_DST_AFFECTED:
			case ORA_DST_CONVERT:
			case ORA_DST_ERROR:
			case ORA_GET_ACLIDS:
			case ORA_GET_PRIVILEGES:
			case ORA_HASH:
			case ORA_INVOKING_USERID:
			case ORA_INVOKING_USER:
			case ORA_INVOKING_XS_USER_GUID:
			case ORA_INVOKING_XS_USER:
			case ORA_RAWCOMPARE:
			case ORA_RAWCONCAT:
			case ORA_ROWSCN:
			case ORA_ROWSCN_RAW:
			case ORA_ROWVERSION:
			case ORA_TABVERSION:
			case ORA_WRITE_TIME:
			case ORDERED:
			case ORDERED_PREDICATES:
			case ORDINALITY:
			case OR_EXPAND:
			case ORGANIZATION:
			case OR_PREDICATES:
			case OSERROR:
			case OTHER:
			case OUTER_JOIN_TO_ANTI:
			case OUTER_JOIN_TO_INNER:
			case OUTER:
			case OUTLINE_LEAF:
			case OUTLINE:
			case OUT_OF_LINE:
			case OUT:
			case OVERFLOW_NOMOVE:
			case OVERFLOW:
			case OVERLAPS:
			case OVER:
			case OVERRIDING:
			case OWNER:
			case OWNERSHIP:
			case OWN:
			case P_LETTER:
			case PACKAGE:
			case PACKAGES:
			case PARALLEL_ENABLE:
			case PARALLEL_INDEX:
			case PARALLEL:
			case PARAMETERS:
			case PARAM:
			case PARENT:
			case PARENT_LEVEL_NAME:
			case PARENT_UNIQUE_NAME:
			case PARITY:
			case PARTIAL_JOIN:
			case PARTIALLY:
			case PARTIAL:
			case PARTIAL_ROLLUP_PUSHDOWN:
			case PARTITION_HASH:
			case PARTITION_LIST:
			case PARTITION:
			case PARTITION_RANGE:
			case PARTITIONS:
			case PARTNUMINST:
			case PASSING:
			case PASSWORD_GRACE_TIME:
			case PASSWORD_LIFE_TIME:
			case PASSWORD_LOCK_TIME:
			case PASSWORD:
			case PASSWORD_REUSE_MAX:
			case PASSWORD_REUSE_TIME:
			case PASSWORD_ROLLOVER_TIME:
			case PASSWORD_VERIFY_FUNCTION:
			case PAST:
			case PATCH:
			case PATH:
			case PATH_PREFIX:
			case PATHS:
			case PATTERN:
			case PBL_HS_BEGIN:
			case PBL_HS_END:
			case PCTINCREASE:
			case PCTTHRESHOLD:
			case PCTUSED:
			case PCTVERSION:
			case PENDING:
			case PERCENT_KEYWORD:
			case PERCENT_RANKM:
			case PERFORMANCE:
			case PERIOD_KEYWORD:
			case PERMANENT:
			case PERMISSION:
			case PERMUTE:
			case PER:
			case PFILE:
			case PHYSICAL:
			case PIKEY:
			case PIPELINED:
			case PIV_GB:
			case PIVOT:
			case PIV_SSF:
			case PLACE_DISTINCT:
			case PLACE_GROUP_BY:
			case PLAN:
			case PLSCOPE_SETTINGS:
			case PLS_INTEGER:
			case PLSQL_CCFLAGS:
			case PLSQL_CODE_TYPE:
			case PLSQL_DEBUG:
			case PLSQL_OPTIMIZE_LEVEL:
			case PLSQL_WARNINGS:
			case PLUGGABLE:
			case PMEM:
			case POINT:
			case POLICY:
			case POOL_16K:
			case POOL_2K:
			case POOL_32K:
			case POOL_4K:
			case POOL_8K:
			case POSITIVEN:
			case POSITIVE:
			case POST_TRANSACTION:
			case POWERMULTISET_BY_CARDINALITY:
			case POWERMULTISET:
			case POWER:
			case PQ_CONCURRENT_UNION:
			case PQ_DISTRIBUTE:
			case PQ_DISTRIBUTE_WINDOW:
			case PQ_FILTER:
			case PQ_MAP:
			case PQ_NOMAP:
			case PQ_REPLICATE:
			case PQ_SKEW:
			case PRAGMA:
			case PREBUILT:
			case PRECEDES:
			case PRECEDING:
			case PRECISION:
			case PRECOMPUTE_SUBQUERY:
			case PREDICATE_REORDERS:
			case PRELOAD:
			case PREPARE:
			case PRESENTNNV:
			case PRESENT:
			case PRESENTV:
			case PRESERVE_OID:
			case PRESERVE:
			case PRETTY:
			case PREVIOUS:
			case PREV:
			case PRIMARY:
			case PRINTBLOBTOCLOB:
			case PRIORITY:
			case PRIVATE:
			case PRIVATE_SGA:
			case PRIVILEGED:
			case PRIVILEGE:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCESS:
			case PROFILE:
			case PROGRAM:
			case PROJECT:
			case PROPAGATE:
			case PROPERTY:
			case PROTECTED:
			case PROTECTION:
			case PROTOCOL:
			case PROXY:
			case PRUNING:
			case PUBLIC:
			case PULL_PRED:
			case PURGE:
			case PUSH_PRED:
			case PUSH_SUBQ:
			case PX_FAULT_TOLERANCE:
			case PX_GRANULE:
			case PX_JOIN_FILTER:
			case QB_NAME:
			case QUARTER:
			case QUARTERS:
			case QUERY_BLOCK:
			case QUERY:
			case QUEUE_CURR:
			case QUEUE:
			case QUEUE_ROWP:
			case QUIESCE:
			case QUORUM:
			case QUOTA:
			case QUOTAGROUP:
			case RAISE:
			case RANDOM_LOCAL:
			case RANDOM:
			case RANGE:
			case RANKM:
			case RAPIDLY:
			case RAW:
			case RAWTOHEX:
			case RAWTONHEX:
			case RBA:
			case RBO_OUTLINE:
			case RDBA:
			case READ:
			case READS:
			case REALM:
			case REAL:
			case REBALANCE:
			case REBUILD:
			case RECORD:
			case RECORDS_PER_BLOCK:
			case RECOVERABLE:
			case RECOVER:
			case RECOVERY:
			case RECYCLEBIN:
			case RECYCLE:
			case REDACTION:
			case REDEFINE:
			case REDO:
			case REDUCED:
			case REDUNDANCY:
			case REF_CASCADE_CURSOR:
			case REFERENCED:
			case REFERENCE:
			case REFERENCES:
			case REFERENCING:
			case REF:
			case REFRESH:
			case REFTOHEX:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REGISTER:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REGULAR:
			case REJECT:
			case REKEY:
			case RELATIONAL:
			case RELOCATE:
			case RELY:
			case REMAINDER:
			case REMOTE:
			case REMOTE_MAPPED:
			case REMOVE:
			case RENAME:
			case REPAIR:
			case REPEAT:
			case REPLACE:
			case REPLICATION:
			case REQUIRED:
			case RESETLOGS:
			case RESET:
			case RESIZE:
			case RESOLVE:
			case RESOLVER:
			case RESPECT:
			case RESTART:
			case RESTORE_AS_INTERVALS:
			case RESTORE:
			case RESTRICT_ALL_REF_CONS:
			case RESTRICTED:
			case RESTRICT_REFERENCES:
			case RESTRICT:
			case RESULT_CACHE:
			case RESULT:
			case RESUMABLE:
			case RESUME:
			case RETENTION:
			case RETRY_ON_ROW_CHANGE:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REWRITE_OR_ERROR:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLESET:
			case ROLES:
			case ROLLBACK:
			case ROLLING:
			case ROLLUP:
			case ROWDEPENDENCIES:
			case ROWID_MAPPING_TABLE:
			case ROWID:
			case ROWIDTOCHAR:
			case ROWIDTONCHAR:
			case ROW_LENGTH:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULE:
			case RULES:
			case RUNNING:
			case SALT:
			case SAMPLE:
			case SAVE_AS_INTERVALS:
			case SAVEPOINT:
			case SAVE:
			case SB4:
			case SCALE_ROWS:
			case SCALE:
			case SCAN_INSTANCES:
			case SCAN:
			case SCHEDULER:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN_ASCENDING:
			case SCN:
			case SCOPE:
			case SCRUB:
			case SD_ALL:
			case SD_INHIBIT:
			case SDO_GEOM_MBR:
			case SDO_GEOMETRY:
			case SD_SHOW:
			case SEARCH:
			case SECOND:
			case SECONDS:
			case SECRET:
			case SECUREFILE_DBA:
			case SECUREFILE:
			case SECURITY:
			case SEED:
			case SEG_BLOCK:
			case SEG_FILE:
			case SEGMENT:
			case SELECTIVITY:
			case SELF:
			case SEMIJOIN_DRIVER:
			case SEMIJOIN:
			case SEMI_TO_INNER:
			case SEQUENCED:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERIAL:
			case SERVERERROR:
			case SERVICE_NAME_CONVERT:
			case SERVICE:
			case SERVICES:
			case SESSION_CACHED_CURSORS:
			case SESSION:
			case SESSIONS_PER_USER:
			case SESSIONTIMEZONE:
			case SESSIONTZNAME:
			case SET:
			case SETS:
			case SETTINGS:
			case SET_TO_JOIN:
			case SEVERE:
			case SHARDSPACE:
			case SHARED_POOL:
			case SHARED:
			case SHARING:
			case SHELFLIFE:
			case SHOW:
			case SHRINK:
			case SHUTDOWN:
			case SIBLINGS:
			case SID:
			case SITE:
			case SIGNAL_COMPONENT:
			case SIGNAL_FUNCTION:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SIMPLE:
			case SINGLE:
			case SINGLETASK:
			case SINH:
			case SIN:
			case SKIP_EXT_OPTIMIZER:
			case SKIP_:
			case SKIP_UNQ_UNUSABLE_IDX:
			case SKIP_UNUSABLE_INDEXES:
			case SMALLFILE:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SORT:
			case SOUNDEX:
			case SOURCE_FILE_DIRECTORY:
			case SOURCE_FILE_NAME_CONVERT:
			case SOURCE:
			case SPACE_KEYWORD:
			case SPECIFICATION:
			case SPFILE:
			case SPLIT:
			case SPREADSHEET:
			case SQLDATA:
			case SQLERROR:
			case SQLLDR:
			case SQL:
			case SQL_MACRO:
			case SQL_TRACE:
			case SQL_TRANSLATION_PROFILE:
			case SQRT:
			case STALE:
			case STANDALONE:
			case STANDARD:
			case STANDARD_HASH:
			case STANDBY_MAX_DATA_DELAY:
			case STANDBYS:
			case STANDBY:
			case STAR:
			case STAR_TRANSFORMATION:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT_QUEUING:
			case STATEMENTS:
			case STATEMENT:
			case STATE:
			case STATIC:
			case STATISTICS:
			case STATS_BINOMIAL_TEST:
			case STATS_CROSSTAB:
			case STATS_F_TEST:
			case STATS_KS_TEST:
			case STATS_MODE:
			case STATS_MW_TEST:
			case STATS_ONE_WAY_ANOVA:
			case STATS_T_TEST_INDEP:
			case STATS_T_TEST_INDEPU:
			case STATS_T_TEST_ONE:
			case STATS_T_TEST_PAIRED:
			case STATS_WSR_TEST:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STOP:
			case STORAGE:
			case STORE:
			case STREAMS:
			case STREAM:
			case STRICT:
			case STRING:
			case STRIPE_COLUMNS:
			case STRIPE_WIDTH:
			case STRIP:
			case STRUCTURE:
			case SUBMULTISET:
			case SUBPARTITION_REL:
			case SUBPARTITIONS:
			case SUBPARTITION:
			case SUBQUERIES:
			case SUBQUERY_PRUNING:
			case SUBSCRIBE:
			case SUBSET:
			case SUBSTITUTABLE:
			case SUBSTR2:
			case SUBSTR4:
			case SUBSTRB:
			case SUBSTRC:
			case SUBTYPE:
			case SUCCESSFUL:
			case SUCCESS:
			case SUMMARY:
			case SUPPLEMENTAL:
			case SUSPEND:
			case SWAP_JOIN_INPUTS:
			case SWITCHOVER:
			case SWITCH:
			case SYNCHRONOUS:
			case SYNC:
			case SYS:
			case SYSASM:
			case SYS_AUDIT:
			case SYSAUX:
			case SYSBACKUP:
			case SYS_CHECKACL:
			case SYS_CHECK_PRIVILEGE:
			case SYS_CONNECT_BY_PATH:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSDBA:
			case SYS_DBURIGEN:
			case SYSDG:
			case SYS_DL_CURSOR:
			case SYS_DM_RXFORM_CHR:
			case SYS_DM_RXFORM_NUM:
			case SYS_DOM_COMPARE:
			case SYS_DST_PRIM2SEC:
			case SYS_DST_SEC2PRIM:
			case SYS_ET_BFILE_TO_RAW:
			case SYS_ET_BLOB_TO_IMAGE:
			case SYS_ET_IMAGE_TO_BLOB:
			case SYS_ET_RAW_TO_BFILE:
			case SYS_EXTPDTXT:
			case SYS_EXTRACT_UTC:
			case SYS_FBT_INSDEL:
			case SYS_FILTER_ACLS:
			case SYS_FNMATCHES:
			case SYS_FNREPLACE:
			case SYS_GET_ACLIDS:
			case SYS_GET_COL_ACLIDS:
			case SYS_GET_PRIVILEGES:
			case SYS_GETTOKENID:
			case SYS_GETXTIVAL:
			case SYS_GUID:
			case SYSGUID:
			case SYSKM:
			case SYS_MAKE_XMLNODEID:
			case SYS_MAKEXML:
			case SYS_MKXMLATTR:
			case SYS_MKXTI:
			case SYSOBJ:
			case SYS_OP_ADT2BIN:
			case SYS_OP_ADTCONS:
			case SYS_OP_ALSCRVAL:
			case SYS_OP_ATG:
			case SYS_OP_BIN2ADT:
			case SYS_OP_BITVEC:
			case SYS_OP_BL2R:
			case SYS_OP_BLOOM_FILTER_LIST:
			case SYS_OP_BLOOM_FILTER:
			case SYS_OP_C2C:
			case SYS_OP_CAST:
			case SYS_OP_CEG:
			case SYS_OP_CL2C:
			case SYS_OP_COMBINED_HASH:
			case SYS_OP_COMP:
			case SYS_OP_CONVERT:
			case SYS_OP_COUNTCHG:
			case SYS_OP_CSCONV:
			case SYS_OP_CSCONVTEST:
			case SYS_OP_CSR:
			case SYS_OP_CSX_PATCH:
			case SYS_OP_CYCLED_SEQ:
			case SYS_OP_DECOMP:
			case SYS_OP_DESCEND:
			case SYS_OP_DISTINCT:
			case SYS_OP_DRA:
			case SYS_OP_DUMP:
			case SYS_OP_DV_CHECK:
			case SYS_OP_ENFORCE_NOT_NULL:
			case SYSOPER:
			case SYS_OP_EXTRACT:
			case SYS_OP_GROUPING:
			case SYS_OP_GUID:
			case SYS_OP_HASH:
			case SYS_OP_IIX:
			case SYS_OP_ITR:
			case SYS_OP_KEY_VECTOR_CREATE:
			case SYS_OP_KEY_VECTOR_FILTER_LIST:
			case SYS_OP_KEY_VECTOR_FILTER:
			case SYS_OP_KEY_VECTOR_SUCCEEDED:
			case SYS_OP_KEY_VECTOR_USE:
			case SYS_OP_LBID:
			case SYS_OP_LOBLOC2BLOB:
			case SYS_OP_LOBLOC2CLOB:
			case SYS_OP_LOBLOC2ID:
			case SYS_OP_LOBLOC2NCLOB:
			case SYS_OP_LOBLOC2TYP:
			case SYS_OP_LSVI:
			case SYS_OP_LVL:
			case SYS_OP_MAKEOID:
			case SYS_OP_MAP_NONNULL:
			case SYS_OP_MSR:
			case SYS_OP_NICOMBINE:
			case SYS_OP_NIEXTRACT:
			case SYS_OP_NII:
			case SYS_OP_NIX:
			case SYS_OP_NOEXPAND:
			case SYS_OP_NTCIMG:
			case SYS_OP_NUMTORAW:
			case SYS_OP_OIDVALUE:
			case SYS_OP_OPNSIZE:
			case SYS_OP_PAR_1:
			case SYS_OP_PARGID_1:
			case SYS_OP_PARGID:
			case SYS_OP_PAR:
			case SYS_OP_PART_ID:
			case SYS_OP_PIVOT:
			case SYS_OP_R2O:
			case SYS_OP_RAWTONUM:
			case SYS_OP_RDTM:
			case SYS_OP_REF:
			case SYS_OP_RMTD:
			case SYS_OP_ROWIDTOOBJ:
			case SYS_OP_RPB:
			case SYS_OPTLOBPRBSC:
			case SYS_OP_TOSETID:
			case SYS_OP_TPR:
			case SYS_OP_TRTB:
			case SYS_OPTXICMP:
			case SYS_OPTXQCASTASNQ:
			case SYS_OP_UNDESCEND:
			case SYS_OP_VECAND:
			case SYS_OP_VECBIT:
			case SYS_OP_VECOR:
			case SYS_OP_VECXOR:
			case SYS_OP_VERSION:
			case SYS_OP_VREF:
			case SYS_OP_VVD:
			case SYS_OP_XMLCONS_FOR_CSX:
			case SYS_OP_XPTHATG:
			case SYS_OP_XPTHIDX:
			case SYS_OP_XPTHOP:
			case SYS_OP_XTXT2SQLT:
			case SYS_OP_ZONE_ID:
			case SYS_ORDERKEY_DEPTH:
			case SYS_ORDERKEY_MAXCHILD:
			case SYS_ORDERKEY_PARENT:
			case SYS_PARALLEL_TXN:
			case SYS_PATHID_IS_ATTR:
			case SYS_PATHID_IS_NMSPC:
			case SYS_PATHID_LASTNAME:
			case SYS_PATHID_LASTNMSPC:
			case SYS_PATH_REVERSE:
			case SYS_PXQEXTRACT:
			case SYS_RAW_TO_XSID:
			case SYS_RID_ORDER:
			case SYS_ROW_DELTA:
			case SYS_SC_2_XMLT:
			case SYS_SYNRCIREDO:
			case SYSTEM_DEFINED:
			case SYSTEM:
			case SYSTIMESTAMP:
			case SYS_TYPEID:
			case SYS_UMAKEXML:
			case SYS_XMLANALYZE:
			case SYS_XMLCONTAINS:
			case SYS_XMLCONV:
			case SYS_XMLEXNSURI:
			case SYS_XMLGEN:
			case SYS_XMLI_LOC_ISNODE:
			case SYS_XMLI_LOC_ISTEXT:
			case SYS_XMLINSTR:
			case SYS_XMLLOCATOR_GETSVAL:
			case SYS_XMLNODEID_GETCID:
			case SYS_XMLNODEID_GETLOCATOR:
			case SYS_XMLNODEID_GETOKEY:
			case SYS_XMLNODEID_GETPATHID:
			case SYS_XMLNODEID_GETPTRID:
			case SYS_XMLNODEID_GETRID:
			case SYS_XMLNODEID_GETSVAL:
			case SYS_XMLNODEID_GETTID:
			case SYS_XMLNODEID:
			case SYS_XMLT_2_SC:
			case SYS_XMLTRANSLATE:
			case SYS_XMLTYPE2SQL:
			case SYS_XQ_ASQLCNV:
			case SYS_XQ_ATOMCNVCHK:
			case SYS_XQBASEURI:
			case SYS_XQCASTABLEERRH:
			case SYS_XQCODEP2STR:
			case SYS_XQCODEPEQ:
			case SYS_XQCON2SEQ:
			case SYS_XQCONCAT:
			case SYS_XQDELETE:
			case SYS_XQDFLTCOLATION:
			case SYS_XQDOC:
			case SYS_XQDOCURI:
			case SYS_XQDURDIV:
			case SYS_XQED4URI:
			case SYS_XQENDSWITH:
			case SYS_XQERRH:
			case SYS_XQERR:
			case SYS_XQESHTMLURI:
			case SYS_XQEXLOBVAL:
			case SYS_XQEXSTWRP:
			case SYS_XQEXTRACT:
			case SYS_XQEXTRREF:
			case SYS_XQEXVAL:
			case SYS_XQFB2STR:
			case SYS_XQFNBOOL:
			case SYS_XQFNCMP:
			case SYS_XQFNDATIM:
			case SYS_XQFNLNAME:
			case SYS_XQFNNM:
			case SYS_XQFNNSURI:
			case SYS_XQFNPREDTRUTH:
			case SYS_XQFNQNM:
			case SYS_XQFNROOT:
			case SYS_XQFORMATNUM:
			case SYS_XQFTCONTAIN:
			case SYS_XQFUNCR:
			case SYS_XQGETCONTENT:
			case SYS_XQINDXOF:
			case SYS_XQINSERT:
			case SYS_XQINSPFX:
			case SYS_XQIRI2URI:
			case SYS_XQLANG:
			case SYS_XQLLNMFRMQNM:
			case SYS_XQMKNODEREF:
			case SYS_XQNILLED:
			case SYS_XQNODENAME:
			case SYS_XQNORMSPACE:
			case SYS_XQNORMUCODE:
			case SYS_XQ_NRNG:
			case SYS_XQNSP4PFX:
			case SYS_XQNSPFRMQNM:
			case SYS_XQPFXFRMQNM:
			case SYS_XQ_PKSQL2XML:
			case SYS_XQPOLYABS:
			case SYS_XQPOLYADD:
			case SYS_XQPOLYCEL:
			case SYS_XQPOLYCSTBL:
			case SYS_XQPOLYCST:
			case SYS_XQPOLYDIV:
			case SYS_XQPOLYFLR:
			case SYS_XQPOLYMOD:
			case SYS_XQPOLYMUL:
			case SYS_XQPOLYRND:
			case SYS_XQPOLYSQRT:
			case SYS_XQPOLYSUB:
			case SYS_XQPOLYUMUS:
			case SYS_XQPOLYUPLS:
			case SYS_XQPOLYVEQ:
			case SYS_XQPOLYVGE:
			case SYS_XQPOLYVGT:
			case SYS_XQPOLYVLE:
			case SYS_XQPOLYVLT:
			case SYS_XQPOLYVNE:
			case SYS_XQREF2VAL:
			case SYS_XQRENAME:
			case SYS_XQREPLACE:
			case SYS_XQRESVURI:
			case SYS_XQRNDHALF2EVN:
			case SYS_XQRSLVQNM:
			case SYS_XQRYENVPGET:
			case SYS_XQRYVARGET:
			case SYS_XQRYWRP:
			case SYS_XQSEQ2CON4XC:
			case SYS_XQSEQ2CON:
			case SYS_XQSEQDEEPEQ:
			case SYS_XQSEQINSB:
			case SYS_XQSEQRM:
			case SYS_XQSEQRVS:
			case SYS_XQSEQSUB:
			case SYS_XQSEQTYPMATCH:
			case SYS_XQSTARTSWITH:
			case SYS_XQSTATBURI:
			case SYS_XQSTR2CODEP:
			case SYS_XQSTRJOIN:
			case SYS_XQSUBSTRAFT:
			case SYS_XQSUBSTRBEF:
			case SYS_XQTOKENIZE:
			case SYS_XQTREATAS:
			case SYS_XQ_UPKXML2SQL:
			case SYS_XQXFORM:
			case SYS_XSID_TO_RAW:
			case SYS_ZMAP_FILTER:
			case SYS_ZMAP_REFRESH:
			case T_LETTER:
			case TABLE_LOOKUP_BY_NL:
			case TABLESPACE_NO:
			case TABLESPACE:
			case TABLES:
			case TABLE_STATS:
			case TABLE:
			case TABNO:
			case TAG:
			case TANH:
			case TAN:
			case TBLORIDXPARTNUM:
			case TEMPFILE:
			case TEMPLATE:
			case TEMPORARY:
			case TEMP_TABLE:
			case TEST:
			case TEXT:
			case THAN:
			case THEN:
			case THE:
			case THREAD:
			case THROUGH:
			case TIER:
			case TIES:
			case TIMEOUT:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMES:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_OFFSET:
			case TIMEZONE_REGION:
			case TIME_ZONE:
			case TIMING:
			case TIV_GB:
			case TIV_SSF:
			case TO_ACLID:
			case TO_BINARY_DOUBLE:
			case TO_BINARY_FLOAT:
			case TO_BLOB:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCHAR:
			case TO_NCLOB:
			case TO_NUMBER:
			case TOPLEVEL:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_TIME:
			case TO_TIME_TZ:
			case TO_YMINTERVAL:
			case TRACE:
			case TRACING:
			case TRACKING:
			case TRAILING:
			case TRANSACTION:
			case TRANSFORM:
			case TRANSFORM_DISTINCT_AGG:
			case TRANSITIONAL:
			case TRANSITION:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGERS:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TRUNC:
			case TRUSTED:
			case TRUST:
			case TUNING:
			case TX:
			case TYPES:
			case TYPE:
			case TZ_OFFSET:
			case UB2:
			case UBA:
			case UCS2:
			case UID:
			case UNARCHIVED:
			case UNBOUNDED:
			case UNBOUND:
			case UNCONDITIONAL:
			case UNDER:
			case UNDO:
			case UNDROP:
			case UNIFORM:
			case UNISTR:
			case UNLIMITED:
			case UNLOAD:
			case UNLOCK:
			case UNMATCHED:
			case UNNEST_INNERJ_DISTINCT_VIEW:
			case UNNEST_NOSEMIJ_NODISTINCTVIEW:
			case UNNEST_SEMIJ_VIEW:
			case UNNEST:
			case UNPACKED:
			case UNPIVOT:
			case UNPLUG:
			case UNPROTECTED:
			case UNQUIESCE:
			case UNRECOVERABLE:
			case UNRESTRICTED:
			case UNSUBSCRIBE:
			case UNTIL:
			case UNUSABLE:
			case UNUSED:
			case UPDATABLE:
			case UPDATED:
			case UPDATEXML:
			case UPD_INDEXES:
			case UPD_JOININDEX:
			case UPGRADE:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USABLE:
			case USAGE:
			case USE_ANTI:
			case USE_CONCAT:
			case USE_CUBE:
			case USE_HASH_AGGREGATION:
			case USE_HASH_GBY_FOR_PUSHDOWN:
			case USE_HASH:
			case USE_HIDDEN_PARTITIONS:
			case USE_INVISIBLE_INDEXES:
			case USE_MERGE_CARTESIAN:
			case USE_MERGE:
			case USE_NL:
			case USE_NL_WITH_INDEX:
			case USE_PRIVATE_OUTLINES:
			case USER_DATA:
			case USER_DEFINED:
			case USERENV:
			case USERGROUP:
			case USER_RECYCLEBIN:
			case USERS:
			case USER_TABLESPACES:
			case USER:
			case USE_SEMI:
			case USE_STORED_OUTLINES:
			case USE_TTT_FOR_GSETS:
			case USE:
			case USE_VECTOR_AGGREGATION:
			case USE_WEAK_NAME_RESL:
			case USING_NO_EXPAND:
			case USING:
			case UTF16BE:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case V1:
			case V2:
			case VALIDATE:
			case VALIDATE_CONVERSION:
			case VALIDATION:
			case VALID_TIME_END:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VAR_POP:
			case VARRAYS:
			case VARRAY:
			case VAR_SAMP:
			case VARYING:
			case VECTOR_READ_TRACE:
			case VECTOR_READ:
			case VECTOR_TRANSFORM_DIMS:
			case VECTOR_TRANSFORM_FACT:
			case VECTOR_TRANSFORM:
			case VERIFIER:
			case VERIFY:
			case VERSIONING:
			case VERSIONS_ENDSCN:
			case VERSIONS_ENDTIME:
			case VERSIONS_OPERATION:
			case VERSIONS_STARTSCN:
			case VERSIONS_STARTTIME:
			case VERSIONS:
			case VERSIONS_XID:
			case VERSION:
			case VIOLATION:
			case VIRTUAL:
			case VISIBILITY:
			case VISIBLE:
			case VOLUME:
			case VSIZE:
			case WAIT:
			case WALLET:
			case WARNING:
			case WEEKS:
			case WEEK:
			case WELLFORMED:
			case WHENEVER:
			case WHEN:
			case WHILE:
			case WHITESPACE:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WITH_PLSQL:
			case WORK:
			case WRAPPED:
			case WRAPPER:
			case WRITE:
			case XDB_FASTPATH_INSERT:
			case X_DYN_PRUNE:
			case XID:
			case XML2OBJECT:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCDATA:
			case XMLCOLATTVAL:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDIFF:
			case XML_DML_RWT_STMT:
			case XMLELEMENT:
			case XMLEXISTS2:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLINDEX_REWRITE_IN_SELECT:
			case XMLINDEX_REWRITE:
			case XMLINDEX_SEL_IDX_TBL:
			case XMLISNODE:
			case XMLISVALID:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPATCH:
			case XMLPI:
			case XMLQUERYVAL:
			case XMLQUERY:
			case XMLROOT:
			case XMLSCHEMA:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTRANSFORMBLOB:
			case XMLTRANSFORM:
			case XMLTYPE:
			case XML:
			case XPATHTABLE:
			case XS_SYS_CONTEXT:
			case XS:
			case YEARS:
			case YEAR:
			case YEAROFWEEK:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONEMAP:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case BLOCKCHAIN:
			case COLLATE:
			case COLLATION:
			case DEFINITION:
			case DUPLICATED:
			case EXTENDED:
			case HASHING:
			case IDLE:
			case IMMUTABLE:
			case ORACLE_DATAPUMP:
			case ORACLE_HDFS:
			case ORACLE_HIVE:
			case ORACLE_LOADER:
			case SHARDED:
			case ISOLATE:
			case ROOT:
			case UNITE:
			case ALGORITHM:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MEMOPTIMIZE:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case PERIOD:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1297);
				general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(1298);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Record_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Record_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRecord_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRecord_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRecord_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_nameContext record_name() throws RecognitionException {
		Record_nameContext _localctx = new Record_nameContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_record_name);
		try {
			setState(1303);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABS:
			case ABSENT:
			case ACCESS:
			case ACCESSED:
			case ACCOUNT:
			case ACL:
			case ACOS:
			case ACROSS:
			case ACTION:
			case ACTIONS:
			case ACTIVATE:
			case ACTIVE:
			case ACTIVE_COMPONENT:
			case ACTIVE_DATA:
			case ACTIVE_FUNCTION:
			case ACTIVE_TAG:
			case ACTIVITY:
			case ADAPTIVE_PLAN:
			case ADD:
			case ADD_COLUMN:
			case ADD_GROUP:
			case ADD_MONTHS:
			case ADJ_DATE:
			case ADMIN:
			case ADMINISTER:
			case ADMINISTRATOR:
			case ADVANCED:
			case ADVISE:
			case ADVISOR:
			case AFD_DISKSTRING:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALIAS:
			case ALLOCATE:
			case ALLOW:
			case ALL_ROWS:
			case ALTERNATE:
			case ALWAYS:
			case ANALYTIC:
			case ANALYZE:
			case ANCESTOR:
			case ANCILLARY:
			case AND_EQUAL:
			case ANOMALY:
			case ANSI_REARCH:
			case ANTIJOIN:
			case ANYSCHEMA:
			case APPEND:
			case APPENDCHILDXML:
			case APPEND_VALUES:
			case APPLICATION:
			case APPLY:
			case APPROX_COUNT_DISTINCT:
			case ARCHIVAL:
			case ARCHIVE:
			case ARCHIVED:
			case ARCHIVELOG:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASIS:
			case ASSEMBLY:
			case ASSIGN:
			case ASSOCIATE:
			case ASYNC:
			case ASYNCHRONOUS:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AUTHENTICATED:
			case AUTHENTICATION:
			case AUTHID:
			case AUTHORIZATION:
			case AUTOALLOCATE:
			case AUTO:
			case AUTOEXTEND:
			case AUTO_LOGIN:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case AUTO_REOPTIMIZE:
			case AVAILABILITY:
			case AVRO:
			case BACKGROUND:
			case BACKINGFILE:
			case BACKUP:
			case BACKUPS:
			case BASIC:
			case BASICFILE:
			case BATCH:
			case BATCHSIZE:
			case BATCH_TABLE_ACCESS_BY_ROWID:
			case BECOME:
			case BEFORE:
			case BEGIN:
			case BEGINNING:
			case BEGIN_OUTLINE_DATA:
			case BEHALF:
			case BEQUEATH:
			case BFILE:
			case BFILENAME:
			case BIGFILE:
			case BINARY:
			case BINARY_DOUBLE:
			case BINARY_DOUBLE_INFINITY:
			case BINARY_DOUBLE_NAN:
			case BINARY_FLOAT:
			case BINARY_FLOAT_INFINITY:
			case BINARY_FLOAT_NAN:
			case BINARY_INTEGER:
			case BIND_AWARE:
			case BINDING:
			case BIN_TO_NUM:
			case BITAND:
			case BITMAP_AND:
			case BITMAP:
			case BITMAPS:
			case BITMAP_TREE:
			case BITS:
			case BLOB:
			case BLOCK:
			case BLOCK_RANGE:
			case BLOCKS:
			case BLOCKSIZE:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BOUND:
			case BRANCH:
			case BREADTH:
			case BROADCAST:
			case BSON:
			case BUFFER:
			case BUFFER_CACHE:
			case BUFFER_POOL:
			case BUILD:
			case BULK:
			case BYPASS_RECURSIVE_CHECK:
			case BYPASS_UJVC:
			case BYTE:
			case CACHE:
			case CACHE_CB:
			case CACHE_INSTANCES:
			case CACHE_TEMP_TABLE:
			case CACHING:
			case CALCULATED:
			case CALLBACK:
			case CALL:
			case CANCEL:
			case CAPACITY:
			case CAPTION:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CASESENSITIVE:
			case CATEGORY:
			case CDBDEFAULT:
			case CEIL:
			case CELL_FLASH_CACHE:
			case CERTIFICATE:
			case CFILE:
			case CHAINED:
			case CHANGE:
			case CHANGE_DUPKEY_ERROR_INDEX:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHECK_ACL_REWRITE:
			case CHECKPOINT:
			case CHILD:
			case CHOOSE:
			case CHR:
			case CHUNK:
			case CLASS:
			case CLASSIFICATION:
			case CLASSIFIER:
			case CLAUSE:
			case CLEAN:
			case CLEANUP:
			case CLEAR:
			case C_LETTER:
			case CLIENT:
			case CLOB:
			case CLONE:
			case CLOSE_CACHED_OPEN_CURSORS:
			case CLOSE:
			case CLUSTER_BY_ROWID:
			case CLUSTER:
			case CLUSTER_DETAILS:
			case CLUSTER_DISTANCE:
			case CLUSTER_ID:
			case CLUSTERING:
			case CLUSTERING_FACTOR:
			case CLUSTER_PROBABILITY:
			case CLUSTER_SET:
			case COALESCE:
			case COALESCE_SQ:
			case COARSE:
			case CO_AUTH_IND:
			case COLD:
			case COLLECT:
			case COLUMNAR:
			case COLUMN_AUTH_INDICATOR:
			case COLUMN:
			case COLUMNS:
			case COLUMN_STATS:
			case COLUMN_VALUE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMMON:
			case COMMON_DATA:
			case COMPACT:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPLIANCE:
			case COMPONENT:
			case COMPONENTS:
			case COMPOSE:
			case COMPOSITE:
			case COMPOSITE_LIMIT:
			case COMPOUND:
			case COMPUTE:
			case CONCAT:
			case CON_DBID_TO_ID:
			case CONDITIONAL:
			case CONDITION:
			case CONFIRM:
			case CONFORMING:
			case CON_GUID_TO_ID:
			case CON_ID:
			case CON_NAME_TO_ID:
			case CONNECT_BY_CB_WHR_ONLY:
			case CONNECT_BY_COMBINE_SW:
			case CONNECT_BY_COST_BASED:
			case CONNECT_BY_ELIM_DUPS:
			case CONNECT_BY_FILTERING:
			case CONNECT_BY_ISCYCLE:
			case CONNECT_BY_ISLEAF:
			case CONNECT_BY_ROOT:
			case CONNECT_TIME:
			case CONSIDER:
			case CONSISTENT:
			case CONSTANT:
			case CONST:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINER:
			case CONTAINERS:
			case CONTAINERS_DEFAULT:
			case CONTAINER_DATA:
			case CONTAINER_MAP:
			case CONTENT:
			case CONTENTS:
			case CONTEXT:
			case CONTINUE:
			case CONTROLFILE:
			case CON_UID_TO_ID:
			case CONVERT:
			case CONVERSION:
			case COOKIE:
			case COPY:
			case CORR_K:
			case CORR_S:
			case CORRUPTION:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COST_XML_QUERY_REWRITE:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CPU_COSTING:
			case CPU_PER_CALL:
			case CPU_PER_SESSION:
			case CRASH:
			case CREATE_FILE_DEST:
			case CREATE_STORED_OUTLINES:
			case CREATION:
			case CREDENTIAL:
			case CRITICAL:
			case CROSS:
			case CROSSEDITION:
			case CSCONVERT:
			case CUBE_AJ:
			case CUBE:
			case CUBE_GB:
			case CUBE_SJ:
			case CUME_DISTM:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURRENTV:
			case CURSOR:
			case CURSOR_SHARING_EXACT:
			case CURSOR_SPECIFIC_SEGMENT:
			case CUSTOMDATUM:
			case CV:
			case CYCLE:
			case DANGLING:
			case DATABASE:
			case DATA:
			case DATAFILE:
			case DATAFILES:
			case DATAMOVEMENT:
			case DATAOBJNO:
			case DATAOBJ_TO_MAT_PARTITION:
			case DATAOBJ_TO_PARTITION:
			case DATAPUMP:
			case DATA_SECURITY_REWRITE_LIMIT:
			case DATE_MODE:
			case DAY:
			case DAYOFWEEK:
			case DAYS:
			case DBA:
			case DBA_RECYCLEBIN:
			case DBMS_STATS:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DB_UNIQUE_NAME:
			case DB_VERSION:
			case DDL:
			case DEALLOCATE:
			case DEBUG:
			case DEBUGGER:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECORRELATE:
			case DECR:
			case DECREMENT:
			case DECRYPT:
			case DEDUPLICATE:
			case DEFAULTS:
			case DEFAULT_COLLATION:
			case DEFAULT_CREDENTIAL:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINED:
			case DEFINE:
			case DEFINER:
			case DEGREE:
			case DELAY:
			case DELEGATE:
			case DELETE_ALL:
			case DELETE:
			case DELETEXML:
			case DEMAND:
			case DENSE_RANKM:
			case DEPENDENT:
			case DEPTH:
			case DEQUEUE:
			case DEREF:
			case DEREF_NO_REWRITE:
			case DESCRIPTION:
			case DESTROY:
			case DETACHED:
			case DETERMINES:
			case DETERMINISTIC:
			case DICTIONARY:
			case DIMENSION:
			case DIMENSIONS:
			case DIRECT_LOAD:
			case DIRECTORY:
			case DIRECT_PATH:
			case DISABLE_ALL:
			case DISABLE:
			case DISABLE_PARALLEL_DML:
			case DISABLE_PRESET:
			case DISABLE_RPKE:
			case DISALLOW:
			case DISASSOCIATE:
			case DISCARD:
			case DISCONNECT:
			case DISK:
			case DISKGROUP:
			case DISKS:
			case DISMOUNT:
			case DISTINGUISHED:
			case DISTRIBUTED:
			case DISTRIBUTE:
			case DML:
			case DML_UPDATE:
			case DOCFIDELITY:
			case DOCUMENT:
			case DOMAIN_INDEX_FILTER:
			case DOMAIN_INDEX_NO_SORT:
			case DOMAIN_INDEX_SORT:
			case DOY:
			case DOUBLE:
			case DOWNGRADE:
			case DRIVING_SITE:
			case DROP_COLUMN:
			case DROP_GROUP:
			case DSINTERVAL_UNCONSTRAINED:
			case DST_UPGRADE_INSERT_CONV:
			case DUMP:
			case DUPLICATE:
			case DV:
			case DYNAMIC:
			case DYNAMIC_SAMPLING:
			case DYNAMIC_SAMPLING_EST_CDN:
			case E_LETTER:
			case EACH:
			case EDITIONABLE:
			case EDITION:
			case EDITIONING:
			case EDITIONS:
			case ELEMENT:
			case ELIM_GROUPBY:
			case ELIMINATE_JOIN:
			case ELIMINATE_OBY:
			case ELIMINATE_OUTER_JOIN:
			case EM:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE_ALL:
			case ENABLE:
			case ENABLE_PARALLEL_DML:
			case ENABLE_PRESET:
			case ENCODING:
			case ENCRYPT:
			case ENCRYPTION:
			case END_OUTLINE_DATA:
			case ENFORCED:
			case ENFORCE:
			case ENQUEUE:
			case ENTERPRISE:
			case ENTITYESCAPING:
			case ENTRY:
			case EQUIPART:
			case ERR:
			case ERROR_ARGUMENT:
			case ERROR:
			case ERROR_ON_OVERLAP_TIME:
			case ERRORS:
			case ESCAPE:
			case ESTIMATE:
			case EVAL:
			case EVALNAME:
			case EVALUATE:
			case EVALUATION:
			case EVENTS:
			case EVERY:
			case EXCEPT:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCHANGE:
			case EXCLUDE:
			case EXCLUDING:
			case EXECUTE:
			case EXEMPT:
			case EXISTING:
			case EXISTS:
			case EXISTSNODE:
			case EXIT:
			case EXPAND_GSET_TO_UNION:
			case EXPAND_TABLE:
			case EXP:
			case EXPIRE:
			case EXPLAIN:
			case EXPLOSION:
			case EXPORT:
			case EXPR_CORR_CHECK:
			case EXPRESS:
			case EXTENDS:
			case EXTENT:
			case EXTENTS:
			case EXTERNAL:
			case EXTERNALLY:
			case EXTRACTCLOBXML:
			case EXTRACT:
			case EXTRACTVALUE:
			case EXTRA:
			case FACILITY:
			case FACT:
			case FACTOR:
			case FACTORIZE_JOIN:
			case FAILED:
			case FAILED_LOGIN_ATTEMPTS:
			case FAILGROUP:
			case FAILOVER:
			case FAILURE:
			case FALSE:
			case FAMILY:
			case FAR:
			case FAST:
			case FASTSTART:
			case FBTSCAN:
			case FEATURE:
			case FEATURE_DETAILS:
			case FEATURE_ID:
			case FEATURE_SET:
			case FEATURE_VALUE:
			case FETCH:
			case FILE:
			case FILE_NAME_CONVERT:
			case FILEGROUP:
			case FILESTORE:
			case FILESYSTEM_LIKE_LOGGING:
			case FILTER:
			case FINAL:
			case FINE:
			case FINISH:
			case FIRST:
			case FIRSTM:
			case FIRST_ROWS:
			case FIRST_VALUE:
			case FIXED_VIEW_DATA:
			case FLAGGER:
			case FLASHBACK:
			case FLASH_CACHE:
			case FLOAT:
			case FLOB:
			case FLEX:
			case FLOOR:
			case FLUSH:
			case FOLDER:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FORCE_XML_QUERY_REWRITE:
			case FOREIGN:
			case FOREVER:
			case FORMAT:
			case FORWARD:
			case FRAGMENT_NUMBER:
			case FREELIST:
			case FREELISTS:
			case FREEPOOLS:
			case FRESH:
			case FROM_TZ:
			case FULL:
			case FULL_OUTER_JOIN_TO_OUTER:
			case FUNCTION:
			case FUNCTIONS:
			case FTP:
			case G_LETTER:
			case GATHER_OPTIMIZER_STATISTICS:
			case GATHER_PLAN_STATISTICS:
			case GBY_CONC_ROLLUP:
			case GBY_PUSHDOWN:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GLOBALLY:
			case GLOBAL_NAME:
			case GLOBAL_TOPIC_ENABLED:
			case GROUP_BY:
			case GROUP_ID:
			case GROUPING:
			case GROUPING_ID:
			case GROUPS:
			case GUARANTEED:
			case GUARANTEE:
			case GUARD:
			case HALF_YEARS:
			case HASH_AJ:
			case HASH:
			case HASHKEYS:
			case HASH_SJ:
			case HEADER:
			case HEAP:
			case HELP:
			case HEXTORAW:
			case HEXTOREF:
			case HIDDEN_KEYWORD:
			case HIDE:
			case HIER_ORDER:
			case HIERARCHICAL:
			case HIERARCHY:
			case HIGH:
			case HINTSET_BEGIN:
			case HINTSET_END:
			case HOT:
			case HOUR:
			case HOURS:
			case HTTP:
			case HWM_BROKERED:
			case HYBRID:
			case H_LETTER:
			case IDENTIFIER:
			case IDENTITY:
			case IDGENERATORS:
			case ID:
			case IDLE_TIME:
			case IF:
			case IGNORE:
			case IGNORE_OPTIM_EMBEDDED_HINTS:
			case IGNORE_ROW_ON_DUPKEY_INDEX:
			case IGNORE_WHERE_CLAUSE:
			case ILM:
			case IMMEDIATE:
			case IMPACT:
			case IMPORT:
			case INACTIVE:
			case INACTIVE_ACCOUNT_TIME:
			case INCLUDE:
			case INCLUDE_VERSION:
			case INCLUDING:
			case INCREMENTAL:
			case INCREMENT:
			case INCR:
			case INDENT:
			case INDEX_ASC:
			case INDEX_COMBINE:
			case INDEX_DESC:
			case INDEXED:
			case INDEXES:
			case INDEX_FFS:
			case INDEX_FILTER:
			case INDEXING:
			case INDEX_JOIN:
			case INDEX_ROWS:
			case INDEX_RRS:
			case INDEX_RS_ASC:
			case INDEX_RS_DESC:
			case INDEX_RS:
			case INDEX_SCAN:
			case INDEX_SKIP_SCAN:
			case INDEX_SS_ASC:
			case INDEX_SS_DESC:
			case INDEX_SS:
			case INDEX_STATS:
			case INDEXTYPE:
			case INDEXTYPES:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INFORMATIONAL:
			case INHERIT:
			case INITCAP:
			case INITIAL:
			case INITIALIZED:
			case INITIALLY:
			case INITRANS:
			case INLINE:
			case INLINE_XMLTYPE_NT:
			case INMEMORY:
			case IN_MEMORY_METADATA:
			case INMEMORY_PRUNING:
			case INNER:
			case INOUT:
			case INPLACE:
			case INSERTCHILDXMLAFTER:
			case INSERTCHILDXMLBEFORE:
			case INSERTCHILDXML:
			case INSERTXMLAFTER:
			case INSERTXMLBEFORE:
			case INSTANCE:
			case INSTANCES:
			case INSTANTIABLE:
			case INSTANTLY:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTEGER:
			case INTERLEAVED:
			case INTERMEDIATE:
			case INTERNAL_CONVERT:
			case INTERNAL_USE:
			case INTERPRETED:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case INVISIBLE:
			case IN_XQUERY:
			case IS_LEAF:
			case ISOLATION:
			case ISOLATION_LEVEL:
			case ITERATE:
			case ITERATION_NUMBER:
			case JAVA:
			case JOB:
			case JOIN:
			case JSON_ARRAYAGG:
			case JSON_ARRAY:
			case JSON_EQUAL:
			case JSON_EXISTS2:
			case JSON_EXISTS:
			case JSONGET:
			case JSON:
			case JSON_OBJECTAGG:
			case JSON_OBJECT:
			case JSONPARSE:
			case JSON_QUERY:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_TEXTCONTAINS2:
			case JSON_TEXTCONTAINS:
			case JSON_TRANSFORM:
			case JSON_VALUE:
			case K_LETTER:
			case KEEP_DUPLICATES:
			case KEEP:
			case KERBEROS:
			case KEY:
			case KEY_LENGTH:
			case KEYSIZE:
			case KEYS:
			case KEYSTORE:
			case KILL:
			case LABEL:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LATERAL:
			case LAX:
			case LAYER:
			case LDAP_REGISTRATION_ENABLED:
			case LDAP_REGISTRATION:
			case LDAP_REG_SYNC_INTERVAL:
			case LEAF:
			case LEAD_CDB:
			case LEAD_CDB_URI:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LESS:
			case LEVEL:
			case LEVEL_NAME:
			case LEVELS:
			case LIBRARY:
			case LIFECYCLE:
			case LIFE:
			case LIFETIME:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_EXPAND:
			case LIMIT:
			case LINEAR:
			case LINK:
			case LIST:
			case LN:
			case LNNVL:
			case LOAD:
			case LOB:
			case LOBNVL:
			case LOBS:
			case LOCAL_INDEXES:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCATOR:
			case LOCKDOWN:
			case LOCKED:
			case LOCKING:
			case LOGFILE:
			case LOGFILES:
			case LOGGING:
			case LOGICAL:
			case LOGICAL_READS_PER_CALL:
			case LOGICAL_READS_PER_SESSION:
			case LOG:
			case LOGMINING:
			case LOGOFF:
			case LOGON:
			case LOG_READ_ONLY_VIOLATIONS:
			case LONG:
			case LOOP:
			case LOST:
			case LOWER:
			case LOW:
			case LPAD:
			case LTRIM:
			case M_LETTER:
			case MAIN:
			case MAKE_REF:
			case MANAGED:
			case MANAGE:
			case MANAGEMENT:
			case MANAGER:
			case MANDATORY:
			case MANUAL:
			case MAP:
			case MAPPING:
			case MASTER:
			case MATCHED:
			case MATCHES:
			case MATCH:
			case MATCH_NUMBER:
			case MATCH_RECOGNIZE:
			case MATERIALIZED:
			case MATERIALIZE:
			case MAXARCHLOGS:
			case MAXDATAFILES:
			case MAXEXTENTS:
			case MAXIMIZE:
			case MAXINSTANCES:
			case MAXLOGFILES:
			case MAXLOGHISTORY:
			case MAXLOGMEMBERS:
			case MAX_SHARED_TEMP_SIZE:
			case MAXSIZE:
			case MAXTRANS:
			case MAXVALUE:
			case MEASURE:
			case MEASURES:
			case MEDIUM:
			case MEMBER:
			case MEMBER_CAPTION:
			case MEMBER_DESCRIPTION:
			case MEMBER_NAME:
			case MEMBER_UNIQUE_NAME:
			case MEMCOMPRESS:
			case MEMORY:
			case MERGEACTIONS:
			case MERGE_AJ:
			case MERGE_CONST_ON:
			case MERGE:
			case MERGE_SJ:
			case METADATA:
			case METHOD:
			case MIGRATE:
			case MIGRATION:
			case MINEXTENTS:
			case MINIMIZE:
			case MINIMUM:
			case MINING:
			case MINUS_NULL:
			case MINUTE:
			case MINUTES:
			case MINVALUE:
			case MIRRORCOLD:
			case MIRRORHOT:
			case MIRROR:
			case MISSING:
			case MISMATCH:
			case MLSLABEL:
			case MODEL_COMPILE_SUBQUERY:
			case MODEL_DONTVERIFY_UNIQUENESS:
			case MODEL_DYNAMIC_SUBQUERY:
			case MODEL_MIN_ANALYSIS:
			case MODEL:
			case MODEL_NB:
			case MODEL_NO_ANALYSIS:
			case MODEL_PBY:
			case MODEL_PUSH_REF:
			case MODEL_SV:
			case MODIFICATION:
			case MODIFY_COLUMN_TYPE:
			case MODIFY:
			case MOD:
			case MODULE:
			case MONITORING:
			case MONITOR:
			case MONTH:
			case MONTHS_BETWEEN:
			case MONTHS:
			case MOUNT:
			case MOUNTPATH:
			case MOUNTPOINT:
			case MOVEMENT:
			case MOVE:
			case MULTIDIMENSIONAL:
			case MULTISET:
			case MV_MERGE:
			case NAMED:
			case NAME:
			case NAMESPACE:
			case NAN:
			case NANVL:
			case NATIONAL:
			case NATIVE_FULL_OUTER_JOIN:
			case NATIVE:
			case NATURAL:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NEEDED:
			case NEG:
			case NESTED:
			case NESTED_TABLE_FAST_INSERT:
			case NESTED_TABLE_GET_REFS:
			case NESTED_TABLE_ID:
			case NESTED_TABLE_SET_REFS:
			case NESTED_TABLE_SET_SETID:
			case NETWORK:
			case NEVER:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NEXT:
			case NL_AJ:
			case NLJ_BATCHING:
			case NLJ_INDEX_FILTER:
			case NLJ_INDEX_SCAN:
			case NLJ_PREFETCH:
			case NLS_CALENDAR:
			case NLS_CHARACTERSET:
			case NLS_CHARSET_DECL_LEN:
			case NLS_CHARSET_ID:
			case NLS_CHARSET_NAME:
			case NLS_COMP:
			case NLS_CURRENCY:
			case NLS_DATE_FORMAT:
			case NLS_DATE_LANGUAGE:
			case NLS_INITCAP:
			case NLS_ISO_CURRENCY:
			case NL_SJ:
			case NLS_LANG:
			case NLS_LANGUAGE:
			case NLS_LENGTH_SEMANTICS:
			case NLS_LOWER:
			case NLS_NCHAR_CONV_EXCP:
			case NLS_NUMERIC_CHARACTERS:
			case NLS_SORT:
			case NLSSORT:
			case NLS_SPECIAL_CHARS:
			case NLS_TERRITORY:
			case NLS_UPPER:
			case NO_ACCESS:
			case NO_ADAPTIVE_PLAN:
			case NO_ANSI_REARCH:
			case NOAPPEND:
			case NOARCHIVELOG:
			case NOAUDIT:
			case NO_AUTO_REOPTIMIZE:
			case NO_BASETABLE_MULTIMV_REWRITE:
			case NO_BATCH_TABLE_ACCESS_BY_ROWID:
			case NO_BIND_AWARE:
			case NO_BUFFER:
			case NOCACHE:
			case NO_CARTESIAN:
			case NO_CHECK_ACL_REWRITE:
			case NO_CLUSTER_BY_ROWID:
			case NO_CLUSTERING:
			case NO_COALESCE_SQ:
			case NO_COMMON_DATA:
			case NO_CONNECT_BY_CB_WHR_ONLY:
			case NO_CONNECT_BY_COMBINE_SW:
			case NO_CONNECT_BY_COST_BASED:
			case NO_CONNECT_BY_ELIM_DUPS:
			case NO_CONNECT_BY_FILTERING:
			case NOCOPY:
			case NO_COST_XML_QUERY_REWRITE:
			case NO_CPU_COSTING:
			case NOCPU_COSTING:
			case NOCYCLE:
			case NO_DATA_SECURITY_REWRITE:
			case NO_DECORRELATE:
			case NODELAY:
			case NO_DOMAIN_INDEX_FILTER:
			case NO_DST_UPGRADE_INSERT_CONV:
			case NO_ELIM_GROUPBY:
			case NO_ELIMINATE_JOIN:
			case NO_ELIMINATE_OBY:
			case NO_ELIMINATE_OUTER_JOIN:
			case NOENTITYESCAPING:
			case NO_EXPAND_GSET_TO_UNION:
			case NO_EXPAND:
			case NO_EXPAND_TABLE:
			case NO_FACT:
			case NO_FACTORIZE_JOIN:
			case NO_FILTERING:
			case NOFORCE:
			case NO_FULL_OUTER_JOIN_TO_OUTER:
			case NO_GATHER_OPTIMIZER_STATISTICS:
			case NO_GBY_PUSHDOWN:
			case NOGUARANTEE:
			case NO_INDEX_FFS:
			case NO_INDEX:
			case NO_INDEX_SS:
			case NO_INMEMORY:
			case NO_INMEMORY_PRUNING:
			case NOKEEP:
			case NO_LOAD:
			case NOLOCAL:
			case NOLOGGING:
			case NOMAPPING:
			case NOMAXVALUE:
			case NO_MERGE:
			case NOMINIMIZE:
			case NOMINVALUE:
			case NO_MODEL_PUSH_REF:
			case NO_MONITORING:
			case NOMONITORING:
			case NO_MONITOR:
			case NO_MULTIMV_REWRITE:
			case NO_NATIVE_FULL_OUTER_JOIN:
			case NONBLOCKING:
			case NONEDITIONABLE:
			case NONE:
			case NO_NLJ_BATCHING:
			case NO_NLJ_PREFETCH:
			case NO:
			case NONSCHEMA:
			case NO_OBJECT_LINK:
			case NOORDER:
			case NO_ORDER_ROLLUPS:
			case NO_OUTER_JOIN_TO_ANTI:
			case NO_OUTER_JOIN_TO_INNER:
			case NOOVERRIDE:
			case NO_PARALLEL_INDEX:
			case NOPARALLEL_INDEX:
			case NO_PARALLEL:
			case NOPARALLEL:
			case NO_PARTIAL_COMMIT:
			case NO_PARTIAL_JOIN:
			case NO_PARTIAL_ROLLUP_PUSHDOWN:
			case NOPARTITION:
			case NO_PLACE_DISTINCT:
			case NO_PLACE_GROUP_BY:
			case NO_PQ_CONCURRENT_UNION:
			case NO_PQ_MAP:
			case NOPROMPT:
			case NO_PQ_REPLICATE:
			case NO_PQ_SKEW:
			case NO_PRUNE_GSETS:
			case NO_PULL_PRED:
			case NO_PUSH_PRED:
			case NO_PUSH_SUBQ:
			case NO_PX_FAULT_TOLERANCE:
			case NO_PX_JOIN_FILTER:
			case NO_QKN_BUFF:
			case NO_QUERY_TRANSFORMATION:
			case NO_REF_CASCADE:
			case NORELOCATE:
			case NORELY:
			case NOREPAIR:
			case NOREPLAY:
			case NORESETLOGS:
			case NO_RESULT_CACHE:
			case NOREVERSE:
			case NO_REWRITE:
			case NOREWRITE:
			case NORMAL:
			case NO_ROOT_SW_FOR_LOCAL:
			case NOROWDEPENDENCIES:
			case NOSCHEMACHECK:
			case NOSEGMENT:
			case NO_SEMIJOIN:
			case NO_SEMI_TO_INNER:
			case NO_SET_TO_JOIN:
			case NOSORT:
			case NO_SQL_TRANSLATION:
			case NO_SQL_TUNE:
			case NO_STAR_TRANSFORMATION:
			case NO_STATEMENT_QUEUING:
			case NO_STATS_GSETS:
			case NOSTRICT:
			case NO_SUBQUERY_PRUNING:
			case NO_SUBSTRB_PAD:
			case NO_SWAP_JOIN_INPUTS:
			case NOSWITCH:
			case NO_TABLE_LOOKUP_BY_NL:
			case NO_TEMP_TABLE:
			case NOTHING:
			case NOTIFICATION:
			case NO_TRANSFORM_DISTINCT_AGG:
			case NO_UNNEST:
			case NO_USE_CUBE:
			case NO_USE_HASH_AGGREGATION:
			case NO_USE_HASH_GBY_FOR_PUSHDOWN:
			case NO_USE_HASH:
			case NO_USE_INVISIBLE_INDEXES:
			case NO_USE_MERGE:
			case NO_USE_NL:
			case NO_USE_VECTOR_AGGREGATION:
			case NOVALIDATE:
			case NO_VECTOR_TRANSFORM_DIMS:
			case NO_VECTOR_TRANSFORM_FACT:
			case NO_VECTOR_TRANSFORM:
			case NO_XDB_FASTPATH_INSERT:
			case NO_XML_DML_REWRITE:
			case NO_XMLINDEX_REWRITE_IN_SELECT:
			case NO_XMLINDEX_REWRITE:
			case NO_XML_QUERY_REWRITE:
			case NO_ZONEMAP:
			case NTH_VALUE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUM_INDEX_KEYS:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT2XML:
			case OBJECT:
			case OBJ_ID:
			case OBJNO:
			case OBJNO_REUSE:
			case OCCURENCES:
			case OFFLINE:
			case OFF:
			case OFFSET:
			case OIDINDEX:
			case OID:
			case OLAP:
			case OLD:
			case OLD_PUSH_PRED:
			case OLS:
			case OLTP:
			case OMIT:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPAQUE:
			case OPAQUE_TRANSFORM:
			case OPAQUE_XCANONICAL:
			case OPCODE:
			case OPEN:
			case OPERATIONS:
			case OPERATOR:
			case OPT_ESTIMATE:
			case OPTIMAL:
			case OPTIMIZE:
			case OPTIMIZER_FEATURES_ENABLE:
			case OPTIMIZER_GOAL:
			case OPT_PARAM:
			case ORA_BRANCH:
			case ORA_CHECK_ACL:
			case ORA_CHECK_PRIVILEGE:
			case ORA_CLUSTERING:
			case ORADATA:
			case ORADEBUG:
			case ORA_DST_AFFECTED:
			case ORA_DST_CONVERT:
			case ORA_DST_ERROR:
			case ORA_GET_ACLIDS:
			case ORA_GET_PRIVILEGES:
			case ORA_HASH:
			case ORA_INVOKING_USERID:
			case ORA_INVOKING_USER:
			case ORA_INVOKING_XS_USER_GUID:
			case ORA_INVOKING_XS_USER:
			case ORA_RAWCOMPARE:
			case ORA_RAWCONCAT:
			case ORA_ROWSCN:
			case ORA_ROWSCN_RAW:
			case ORA_ROWVERSION:
			case ORA_TABVERSION:
			case ORA_WRITE_TIME:
			case ORDERED:
			case ORDERED_PREDICATES:
			case ORDINALITY:
			case OR_EXPAND:
			case ORGANIZATION:
			case OR_PREDICATES:
			case OSERROR:
			case OTHER:
			case OUTER_JOIN_TO_ANTI:
			case OUTER_JOIN_TO_INNER:
			case OUTER:
			case OUTLINE_LEAF:
			case OUTLINE:
			case OUT_OF_LINE:
			case OUT:
			case OVERFLOW_NOMOVE:
			case OVERFLOW:
			case OVERLAPS:
			case OVER:
			case OVERRIDING:
			case OWNER:
			case OWNERSHIP:
			case OWN:
			case P_LETTER:
			case PACKAGE:
			case PACKAGES:
			case PARALLEL_ENABLE:
			case PARALLEL_INDEX:
			case PARALLEL:
			case PARAMETERS:
			case PARAM:
			case PARENT:
			case PARENT_LEVEL_NAME:
			case PARENT_UNIQUE_NAME:
			case PARITY:
			case PARTIAL_JOIN:
			case PARTIALLY:
			case PARTIAL:
			case PARTIAL_ROLLUP_PUSHDOWN:
			case PARTITION_HASH:
			case PARTITION_LIST:
			case PARTITION:
			case PARTITION_RANGE:
			case PARTITIONS:
			case PARTNUMINST:
			case PASSING:
			case PASSWORD_GRACE_TIME:
			case PASSWORD_LIFE_TIME:
			case PASSWORD_LOCK_TIME:
			case PASSWORD:
			case PASSWORD_REUSE_MAX:
			case PASSWORD_REUSE_TIME:
			case PASSWORD_ROLLOVER_TIME:
			case PASSWORD_VERIFY_FUNCTION:
			case PAST:
			case PATCH:
			case PATH:
			case PATH_PREFIX:
			case PATHS:
			case PATTERN:
			case PBL_HS_BEGIN:
			case PBL_HS_END:
			case PCTINCREASE:
			case PCTTHRESHOLD:
			case PCTUSED:
			case PCTVERSION:
			case PENDING:
			case PERCENT_KEYWORD:
			case PERCENT_RANKM:
			case PERFORMANCE:
			case PERIOD_KEYWORD:
			case PERMANENT:
			case PERMISSION:
			case PERMUTE:
			case PER:
			case PFILE:
			case PHYSICAL:
			case PIKEY:
			case PIPELINED:
			case PIV_GB:
			case PIVOT:
			case PIV_SSF:
			case PLACE_DISTINCT:
			case PLACE_GROUP_BY:
			case PLAN:
			case PLSCOPE_SETTINGS:
			case PLS_INTEGER:
			case PLSQL_CCFLAGS:
			case PLSQL_CODE_TYPE:
			case PLSQL_DEBUG:
			case PLSQL_OPTIMIZE_LEVEL:
			case PLSQL_WARNINGS:
			case PLUGGABLE:
			case PMEM:
			case POINT:
			case POLICY:
			case POOL_16K:
			case POOL_2K:
			case POOL_32K:
			case POOL_4K:
			case POOL_8K:
			case POSITIVEN:
			case POSITIVE:
			case POST_TRANSACTION:
			case POWERMULTISET_BY_CARDINALITY:
			case POWERMULTISET:
			case POWER:
			case PQ_CONCURRENT_UNION:
			case PQ_DISTRIBUTE:
			case PQ_DISTRIBUTE_WINDOW:
			case PQ_FILTER:
			case PQ_MAP:
			case PQ_NOMAP:
			case PQ_REPLICATE:
			case PQ_SKEW:
			case PRAGMA:
			case PREBUILT:
			case PRECEDES:
			case PRECEDING:
			case PRECISION:
			case PRECOMPUTE_SUBQUERY:
			case PREDICATE_REORDERS:
			case PRELOAD:
			case PREPARE:
			case PRESENTNNV:
			case PRESENT:
			case PRESENTV:
			case PRESERVE_OID:
			case PRESERVE:
			case PRETTY:
			case PREVIOUS:
			case PREV:
			case PRIMARY:
			case PRINTBLOBTOCLOB:
			case PRIORITY:
			case PRIVATE:
			case PRIVATE_SGA:
			case PRIVILEGED:
			case PRIVILEGE:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCESS:
			case PROFILE:
			case PROGRAM:
			case PROJECT:
			case PROPAGATE:
			case PROPERTY:
			case PROTECTED:
			case PROTECTION:
			case PROTOCOL:
			case PROXY:
			case PRUNING:
			case PUBLIC:
			case PULL_PRED:
			case PURGE:
			case PUSH_PRED:
			case PUSH_SUBQ:
			case PX_FAULT_TOLERANCE:
			case PX_GRANULE:
			case PX_JOIN_FILTER:
			case QB_NAME:
			case QUARTER:
			case QUARTERS:
			case QUERY_BLOCK:
			case QUERY:
			case QUEUE_CURR:
			case QUEUE:
			case QUEUE_ROWP:
			case QUIESCE:
			case QUORUM:
			case QUOTA:
			case QUOTAGROUP:
			case RAISE:
			case RANDOM_LOCAL:
			case RANDOM:
			case RANGE:
			case RANKM:
			case RAPIDLY:
			case RAW:
			case RAWTOHEX:
			case RAWTONHEX:
			case RBA:
			case RBO_OUTLINE:
			case RDBA:
			case READ:
			case READS:
			case REALM:
			case REAL:
			case REBALANCE:
			case REBUILD:
			case RECORD:
			case RECORDS_PER_BLOCK:
			case RECOVERABLE:
			case RECOVER:
			case RECOVERY:
			case RECYCLEBIN:
			case RECYCLE:
			case REDACTION:
			case REDEFINE:
			case REDO:
			case REDUCED:
			case REDUNDANCY:
			case REF_CASCADE_CURSOR:
			case REFERENCED:
			case REFERENCE:
			case REFERENCES:
			case REFERENCING:
			case REF:
			case REFRESH:
			case REFTOHEX:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REGISTER:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REGULAR:
			case REJECT:
			case REKEY:
			case RELATIONAL:
			case RELOCATE:
			case RELY:
			case REMAINDER:
			case REMOTE:
			case REMOTE_MAPPED:
			case REMOVE:
			case RENAME:
			case REPAIR:
			case REPEAT:
			case REPLACE:
			case REPLICATION:
			case REQUIRED:
			case RESETLOGS:
			case RESET:
			case RESIZE:
			case RESOLVE:
			case RESOLVER:
			case RESPECT:
			case RESTART:
			case RESTORE_AS_INTERVALS:
			case RESTORE:
			case RESTRICT_ALL_REF_CONS:
			case RESTRICTED:
			case RESTRICT_REFERENCES:
			case RESTRICT:
			case RESULT_CACHE:
			case RESULT:
			case RESUMABLE:
			case RESUME:
			case RETENTION:
			case RETRY_ON_ROW_CHANGE:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REWRITE_OR_ERROR:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLESET:
			case ROLES:
			case ROLLBACK:
			case ROLLING:
			case ROLLUP:
			case ROWDEPENDENCIES:
			case ROWID_MAPPING_TABLE:
			case ROWID:
			case ROWIDTOCHAR:
			case ROWIDTONCHAR:
			case ROW_LENGTH:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULE:
			case RULES:
			case RUNNING:
			case SALT:
			case SAMPLE:
			case SAVE_AS_INTERVALS:
			case SAVEPOINT:
			case SAVE:
			case SB4:
			case SCALE_ROWS:
			case SCALE:
			case SCAN_INSTANCES:
			case SCAN:
			case SCHEDULER:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN_ASCENDING:
			case SCN:
			case SCOPE:
			case SCRUB:
			case SD_ALL:
			case SD_INHIBIT:
			case SDO_GEOM_MBR:
			case SDO_GEOMETRY:
			case SD_SHOW:
			case SEARCH:
			case SECOND:
			case SECONDS:
			case SECRET:
			case SECUREFILE_DBA:
			case SECUREFILE:
			case SECURITY:
			case SEED:
			case SEG_BLOCK:
			case SEG_FILE:
			case SEGMENT:
			case SELECTIVITY:
			case SELF:
			case SEMIJOIN_DRIVER:
			case SEMIJOIN:
			case SEMI_TO_INNER:
			case SEQUENCED:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERIAL:
			case SERVERERROR:
			case SERVICE_NAME_CONVERT:
			case SERVICE:
			case SERVICES:
			case SESSION_CACHED_CURSORS:
			case SESSION:
			case SESSIONS_PER_USER:
			case SESSIONTIMEZONE:
			case SESSIONTZNAME:
			case SET:
			case SETS:
			case SETTINGS:
			case SET_TO_JOIN:
			case SEVERE:
			case SHARDSPACE:
			case SHARED_POOL:
			case SHARED:
			case SHARING:
			case SHELFLIFE:
			case SHOW:
			case SHRINK:
			case SHUTDOWN:
			case SIBLINGS:
			case SID:
			case SITE:
			case SIGNAL_COMPONENT:
			case SIGNAL_FUNCTION:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SIMPLE:
			case SINGLE:
			case SINGLETASK:
			case SINH:
			case SIN:
			case SKIP_EXT_OPTIMIZER:
			case SKIP_:
			case SKIP_UNQ_UNUSABLE_IDX:
			case SKIP_UNUSABLE_INDEXES:
			case SMALLFILE:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SORT:
			case SOUNDEX:
			case SOURCE_FILE_DIRECTORY:
			case SOURCE_FILE_NAME_CONVERT:
			case SOURCE:
			case SPACE_KEYWORD:
			case SPECIFICATION:
			case SPFILE:
			case SPLIT:
			case SPREADSHEET:
			case SQLDATA:
			case SQLERROR:
			case SQLLDR:
			case SQL:
			case SQL_MACRO:
			case SQL_TRACE:
			case SQL_TRANSLATION_PROFILE:
			case SQRT:
			case STALE:
			case STANDALONE:
			case STANDARD:
			case STANDARD_HASH:
			case STANDBY_MAX_DATA_DELAY:
			case STANDBYS:
			case STANDBY:
			case STAR:
			case STAR_TRANSFORMATION:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT_QUEUING:
			case STATEMENTS:
			case STATEMENT:
			case STATE:
			case STATIC:
			case STATISTICS:
			case STATS_BINOMIAL_TEST:
			case STATS_CROSSTAB:
			case STATS_F_TEST:
			case STATS_KS_TEST:
			case STATS_MODE:
			case STATS_MW_TEST:
			case STATS_ONE_WAY_ANOVA:
			case STATS_T_TEST_INDEP:
			case STATS_T_TEST_INDEPU:
			case STATS_T_TEST_ONE:
			case STATS_T_TEST_PAIRED:
			case STATS_WSR_TEST:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STOP:
			case STORAGE:
			case STORE:
			case STREAMS:
			case STREAM:
			case STRICT:
			case STRING:
			case STRIPE_COLUMNS:
			case STRIPE_WIDTH:
			case STRIP:
			case STRUCTURE:
			case SUBMULTISET:
			case SUBPARTITION_REL:
			case SUBPARTITIONS:
			case SUBPARTITION:
			case SUBQUERIES:
			case SUBQUERY_PRUNING:
			case SUBSCRIBE:
			case SUBSET:
			case SUBSTITUTABLE:
			case SUBSTR2:
			case SUBSTR4:
			case SUBSTRB:
			case SUBSTRC:
			case SUBTYPE:
			case SUCCESSFUL:
			case SUCCESS:
			case SUMMARY:
			case SUPPLEMENTAL:
			case SUSPEND:
			case SWAP_JOIN_INPUTS:
			case SWITCHOVER:
			case SWITCH:
			case SYNCHRONOUS:
			case SYNC:
			case SYS:
			case SYSASM:
			case SYS_AUDIT:
			case SYSAUX:
			case SYSBACKUP:
			case SYS_CHECKACL:
			case SYS_CHECK_PRIVILEGE:
			case SYS_CONNECT_BY_PATH:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSDBA:
			case SYS_DBURIGEN:
			case SYSDG:
			case SYS_DL_CURSOR:
			case SYS_DM_RXFORM_CHR:
			case SYS_DM_RXFORM_NUM:
			case SYS_DOM_COMPARE:
			case SYS_DST_PRIM2SEC:
			case SYS_DST_SEC2PRIM:
			case SYS_ET_BFILE_TO_RAW:
			case SYS_ET_BLOB_TO_IMAGE:
			case SYS_ET_IMAGE_TO_BLOB:
			case SYS_ET_RAW_TO_BFILE:
			case SYS_EXTPDTXT:
			case SYS_EXTRACT_UTC:
			case SYS_FBT_INSDEL:
			case SYS_FILTER_ACLS:
			case SYS_FNMATCHES:
			case SYS_FNREPLACE:
			case SYS_GET_ACLIDS:
			case SYS_GET_COL_ACLIDS:
			case SYS_GET_PRIVILEGES:
			case SYS_GETTOKENID:
			case SYS_GETXTIVAL:
			case SYS_GUID:
			case SYSGUID:
			case SYSKM:
			case SYS_MAKE_XMLNODEID:
			case SYS_MAKEXML:
			case SYS_MKXMLATTR:
			case SYS_MKXTI:
			case SYSOBJ:
			case SYS_OP_ADT2BIN:
			case SYS_OP_ADTCONS:
			case SYS_OP_ALSCRVAL:
			case SYS_OP_ATG:
			case SYS_OP_BIN2ADT:
			case SYS_OP_BITVEC:
			case SYS_OP_BL2R:
			case SYS_OP_BLOOM_FILTER_LIST:
			case SYS_OP_BLOOM_FILTER:
			case SYS_OP_C2C:
			case SYS_OP_CAST:
			case SYS_OP_CEG:
			case SYS_OP_CL2C:
			case SYS_OP_COMBINED_HASH:
			case SYS_OP_COMP:
			case SYS_OP_CONVERT:
			case SYS_OP_COUNTCHG:
			case SYS_OP_CSCONV:
			case SYS_OP_CSCONVTEST:
			case SYS_OP_CSR:
			case SYS_OP_CSX_PATCH:
			case SYS_OP_CYCLED_SEQ:
			case SYS_OP_DECOMP:
			case SYS_OP_DESCEND:
			case SYS_OP_DISTINCT:
			case SYS_OP_DRA:
			case SYS_OP_DUMP:
			case SYS_OP_DV_CHECK:
			case SYS_OP_ENFORCE_NOT_NULL:
			case SYSOPER:
			case SYS_OP_EXTRACT:
			case SYS_OP_GROUPING:
			case SYS_OP_GUID:
			case SYS_OP_HASH:
			case SYS_OP_IIX:
			case SYS_OP_ITR:
			case SYS_OP_KEY_VECTOR_CREATE:
			case SYS_OP_KEY_VECTOR_FILTER_LIST:
			case SYS_OP_KEY_VECTOR_FILTER:
			case SYS_OP_KEY_VECTOR_SUCCEEDED:
			case SYS_OP_KEY_VECTOR_USE:
			case SYS_OP_LBID:
			case SYS_OP_LOBLOC2BLOB:
			case SYS_OP_LOBLOC2CLOB:
			case SYS_OP_LOBLOC2ID:
			case SYS_OP_LOBLOC2NCLOB:
			case SYS_OP_LOBLOC2TYP:
			case SYS_OP_LSVI:
			case SYS_OP_LVL:
			case SYS_OP_MAKEOID:
			case SYS_OP_MAP_NONNULL:
			case SYS_OP_MSR:
			case SYS_OP_NICOMBINE:
			case SYS_OP_NIEXTRACT:
			case SYS_OP_NII:
			case SYS_OP_NIX:
			case SYS_OP_NOEXPAND:
			case SYS_OP_NTCIMG:
			case SYS_OP_NUMTORAW:
			case SYS_OP_OIDVALUE:
			case SYS_OP_OPNSIZE:
			case SYS_OP_PAR_1:
			case SYS_OP_PARGID_1:
			case SYS_OP_PARGID:
			case SYS_OP_PAR:
			case SYS_OP_PART_ID:
			case SYS_OP_PIVOT:
			case SYS_OP_R2O:
			case SYS_OP_RAWTONUM:
			case SYS_OP_RDTM:
			case SYS_OP_REF:
			case SYS_OP_RMTD:
			case SYS_OP_ROWIDTOOBJ:
			case SYS_OP_RPB:
			case SYS_OPTLOBPRBSC:
			case SYS_OP_TOSETID:
			case SYS_OP_TPR:
			case SYS_OP_TRTB:
			case SYS_OPTXICMP:
			case SYS_OPTXQCASTASNQ:
			case SYS_OP_UNDESCEND:
			case SYS_OP_VECAND:
			case SYS_OP_VECBIT:
			case SYS_OP_VECOR:
			case SYS_OP_VECXOR:
			case SYS_OP_VERSION:
			case SYS_OP_VREF:
			case SYS_OP_VVD:
			case SYS_OP_XMLCONS_FOR_CSX:
			case SYS_OP_XPTHATG:
			case SYS_OP_XPTHIDX:
			case SYS_OP_XPTHOP:
			case SYS_OP_XTXT2SQLT:
			case SYS_OP_ZONE_ID:
			case SYS_ORDERKEY_DEPTH:
			case SYS_ORDERKEY_MAXCHILD:
			case SYS_ORDERKEY_PARENT:
			case SYS_PARALLEL_TXN:
			case SYS_PATHID_IS_ATTR:
			case SYS_PATHID_IS_NMSPC:
			case SYS_PATHID_LASTNAME:
			case SYS_PATHID_LASTNMSPC:
			case SYS_PATH_REVERSE:
			case SYS_PXQEXTRACT:
			case SYS_RAW_TO_XSID:
			case SYS_RID_ORDER:
			case SYS_ROW_DELTA:
			case SYS_SC_2_XMLT:
			case SYS_SYNRCIREDO:
			case SYSTEM_DEFINED:
			case SYSTEM:
			case SYSTIMESTAMP:
			case SYS_TYPEID:
			case SYS_UMAKEXML:
			case SYS_XMLANALYZE:
			case SYS_XMLCONTAINS:
			case SYS_XMLCONV:
			case SYS_XMLEXNSURI:
			case SYS_XMLGEN:
			case SYS_XMLI_LOC_ISNODE:
			case SYS_XMLI_LOC_ISTEXT:
			case SYS_XMLINSTR:
			case SYS_XMLLOCATOR_GETSVAL:
			case SYS_XMLNODEID_GETCID:
			case SYS_XMLNODEID_GETLOCATOR:
			case SYS_XMLNODEID_GETOKEY:
			case SYS_XMLNODEID_GETPATHID:
			case SYS_XMLNODEID_GETPTRID:
			case SYS_XMLNODEID_GETRID:
			case SYS_XMLNODEID_GETSVAL:
			case SYS_XMLNODEID_GETTID:
			case SYS_XMLNODEID:
			case SYS_XMLT_2_SC:
			case SYS_XMLTRANSLATE:
			case SYS_XMLTYPE2SQL:
			case SYS_XQ_ASQLCNV:
			case SYS_XQ_ATOMCNVCHK:
			case SYS_XQBASEURI:
			case SYS_XQCASTABLEERRH:
			case SYS_XQCODEP2STR:
			case SYS_XQCODEPEQ:
			case SYS_XQCON2SEQ:
			case SYS_XQCONCAT:
			case SYS_XQDELETE:
			case SYS_XQDFLTCOLATION:
			case SYS_XQDOC:
			case SYS_XQDOCURI:
			case SYS_XQDURDIV:
			case SYS_XQED4URI:
			case SYS_XQENDSWITH:
			case SYS_XQERRH:
			case SYS_XQERR:
			case SYS_XQESHTMLURI:
			case SYS_XQEXLOBVAL:
			case SYS_XQEXSTWRP:
			case SYS_XQEXTRACT:
			case SYS_XQEXTRREF:
			case SYS_XQEXVAL:
			case SYS_XQFB2STR:
			case SYS_XQFNBOOL:
			case SYS_XQFNCMP:
			case SYS_XQFNDATIM:
			case SYS_XQFNLNAME:
			case SYS_XQFNNM:
			case SYS_XQFNNSURI:
			case SYS_XQFNPREDTRUTH:
			case SYS_XQFNQNM:
			case SYS_XQFNROOT:
			case SYS_XQFORMATNUM:
			case SYS_XQFTCONTAIN:
			case SYS_XQFUNCR:
			case SYS_XQGETCONTENT:
			case SYS_XQINDXOF:
			case SYS_XQINSERT:
			case SYS_XQINSPFX:
			case SYS_XQIRI2URI:
			case SYS_XQLANG:
			case SYS_XQLLNMFRMQNM:
			case SYS_XQMKNODEREF:
			case SYS_XQNILLED:
			case SYS_XQNODENAME:
			case SYS_XQNORMSPACE:
			case SYS_XQNORMUCODE:
			case SYS_XQ_NRNG:
			case SYS_XQNSP4PFX:
			case SYS_XQNSPFRMQNM:
			case SYS_XQPFXFRMQNM:
			case SYS_XQ_PKSQL2XML:
			case SYS_XQPOLYABS:
			case SYS_XQPOLYADD:
			case SYS_XQPOLYCEL:
			case SYS_XQPOLYCSTBL:
			case SYS_XQPOLYCST:
			case SYS_XQPOLYDIV:
			case SYS_XQPOLYFLR:
			case SYS_XQPOLYMOD:
			case SYS_XQPOLYMUL:
			case SYS_XQPOLYRND:
			case SYS_XQPOLYSQRT:
			case SYS_XQPOLYSUB:
			case SYS_XQPOLYUMUS:
			case SYS_XQPOLYUPLS:
			case SYS_XQPOLYVEQ:
			case SYS_XQPOLYVGE:
			case SYS_XQPOLYVGT:
			case SYS_XQPOLYVLE:
			case SYS_XQPOLYVLT:
			case SYS_XQPOLYVNE:
			case SYS_XQREF2VAL:
			case SYS_XQRENAME:
			case SYS_XQREPLACE:
			case SYS_XQRESVURI:
			case SYS_XQRNDHALF2EVN:
			case SYS_XQRSLVQNM:
			case SYS_XQRYENVPGET:
			case SYS_XQRYVARGET:
			case SYS_XQRYWRP:
			case SYS_XQSEQ2CON4XC:
			case SYS_XQSEQ2CON:
			case SYS_XQSEQDEEPEQ:
			case SYS_XQSEQINSB:
			case SYS_XQSEQRM:
			case SYS_XQSEQRVS:
			case SYS_XQSEQSUB:
			case SYS_XQSEQTYPMATCH:
			case SYS_XQSTARTSWITH:
			case SYS_XQSTATBURI:
			case SYS_XQSTR2CODEP:
			case SYS_XQSTRJOIN:
			case SYS_XQSUBSTRAFT:
			case SYS_XQSUBSTRBEF:
			case SYS_XQTOKENIZE:
			case SYS_XQTREATAS:
			case SYS_XQ_UPKXML2SQL:
			case SYS_XQXFORM:
			case SYS_XSID_TO_RAW:
			case SYS_ZMAP_FILTER:
			case SYS_ZMAP_REFRESH:
			case T_LETTER:
			case TABLE_LOOKUP_BY_NL:
			case TABLESPACE_NO:
			case TABLESPACE:
			case TABLES:
			case TABLE_STATS:
			case TABLE:
			case TABNO:
			case TAG:
			case TANH:
			case TAN:
			case TBLORIDXPARTNUM:
			case TEMPFILE:
			case TEMPLATE:
			case TEMPORARY:
			case TEMP_TABLE:
			case TEST:
			case TEXT:
			case THAN:
			case THEN:
			case THE:
			case THREAD:
			case THROUGH:
			case TIER:
			case TIES:
			case TIMEOUT:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMES:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_OFFSET:
			case TIMEZONE_REGION:
			case TIME_ZONE:
			case TIMING:
			case TIV_GB:
			case TIV_SSF:
			case TO_ACLID:
			case TO_BINARY_DOUBLE:
			case TO_BINARY_FLOAT:
			case TO_BLOB:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCHAR:
			case TO_NCLOB:
			case TO_NUMBER:
			case TOPLEVEL:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_TIME:
			case TO_TIME_TZ:
			case TO_YMINTERVAL:
			case TRACE:
			case TRACING:
			case TRACKING:
			case TRAILING:
			case TRANSACTION:
			case TRANSFORM:
			case TRANSFORM_DISTINCT_AGG:
			case TRANSITIONAL:
			case TRANSITION:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGERS:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TRUNC:
			case TRUSTED:
			case TRUST:
			case TUNING:
			case TX:
			case TYPES:
			case TYPE:
			case TZ_OFFSET:
			case UB2:
			case UBA:
			case UCS2:
			case UID:
			case UNARCHIVED:
			case UNBOUNDED:
			case UNBOUND:
			case UNCONDITIONAL:
			case UNDER:
			case UNDO:
			case UNDROP:
			case UNIFORM:
			case UNISTR:
			case UNLIMITED:
			case UNLOAD:
			case UNLOCK:
			case UNMATCHED:
			case UNNEST_INNERJ_DISTINCT_VIEW:
			case UNNEST_NOSEMIJ_NODISTINCTVIEW:
			case UNNEST_SEMIJ_VIEW:
			case UNNEST:
			case UNPACKED:
			case UNPIVOT:
			case UNPLUG:
			case UNPROTECTED:
			case UNQUIESCE:
			case UNRECOVERABLE:
			case UNRESTRICTED:
			case UNSUBSCRIBE:
			case UNTIL:
			case UNUSABLE:
			case UNUSED:
			case UPDATABLE:
			case UPDATED:
			case UPDATEXML:
			case UPD_INDEXES:
			case UPD_JOININDEX:
			case UPGRADE:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USABLE:
			case USAGE:
			case USE_ANTI:
			case USE_CONCAT:
			case USE_CUBE:
			case USE_HASH_AGGREGATION:
			case USE_HASH_GBY_FOR_PUSHDOWN:
			case USE_HASH:
			case USE_HIDDEN_PARTITIONS:
			case USE_INVISIBLE_INDEXES:
			case USE_MERGE_CARTESIAN:
			case USE_MERGE:
			case USE_NL:
			case USE_NL_WITH_INDEX:
			case USE_PRIVATE_OUTLINES:
			case USER_DATA:
			case USER_DEFINED:
			case USERENV:
			case USERGROUP:
			case USER_RECYCLEBIN:
			case USERS:
			case USER_TABLESPACES:
			case USER:
			case USE_SEMI:
			case USE_STORED_OUTLINES:
			case USE_TTT_FOR_GSETS:
			case USE:
			case USE_VECTOR_AGGREGATION:
			case USE_WEAK_NAME_RESL:
			case USING_NO_EXPAND:
			case USING:
			case UTF16BE:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case V1:
			case V2:
			case VALIDATE:
			case VALIDATE_CONVERSION:
			case VALIDATION:
			case VALID_TIME_END:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VAR_POP:
			case VARRAYS:
			case VARRAY:
			case VAR_SAMP:
			case VARYING:
			case VECTOR_READ_TRACE:
			case VECTOR_READ:
			case VECTOR_TRANSFORM_DIMS:
			case VECTOR_TRANSFORM_FACT:
			case VECTOR_TRANSFORM:
			case VERIFIER:
			case VERIFY:
			case VERSIONING:
			case VERSIONS_ENDSCN:
			case VERSIONS_ENDTIME:
			case VERSIONS_OPERATION:
			case VERSIONS_STARTSCN:
			case VERSIONS_STARTTIME:
			case VERSIONS:
			case VERSIONS_XID:
			case VERSION:
			case VIOLATION:
			case VIRTUAL:
			case VISIBILITY:
			case VISIBLE:
			case VOLUME:
			case VSIZE:
			case WAIT:
			case WALLET:
			case WARNING:
			case WEEKS:
			case WEEK:
			case WELLFORMED:
			case WHENEVER:
			case WHEN:
			case WHILE:
			case WHITESPACE:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WITH_PLSQL:
			case WORK:
			case WRAPPED:
			case WRAPPER:
			case WRITE:
			case XDB_FASTPATH_INSERT:
			case X_DYN_PRUNE:
			case XID:
			case XML2OBJECT:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCDATA:
			case XMLCOLATTVAL:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDIFF:
			case XML_DML_RWT_STMT:
			case XMLELEMENT:
			case XMLEXISTS2:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLINDEX_REWRITE_IN_SELECT:
			case XMLINDEX_REWRITE:
			case XMLINDEX_SEL_IDX_TBL:
			case XMLISNODE:
			case XMLISVALID:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPATCH:
			case XMLPI:
			case XMLQUERYVAL:
			case XMLQUERY:
			case XMLROOT:
			case XMLSCHEMA:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTRANSFORMBLOB:
			case XMLTRANSFORM:
			case XMLTYPE:
			case XML:
			case XPATHTABLE:
			case XS_SYS_CONTEXT:
			case XS:
			case YEARS:
			case YEAR:
			case YEAROFWEEK:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONEMAP:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case BLOCKCHAIN:
			case COLLATE:
			case COLLATION:
			case DEFINITION:
			case DUPLICATED:
			case EXTENDED:
			case HASHING:
			case IDLE:
			case IMMUTABLE:
			case ORACLE_DATAPUMP:
			case ORACLE_HDFS:
			case ORACLE_HIVE:
			case ORACLE_LOADER:
			case SHARDED:
			case ISOLATE:
			case ROOT:
			case UNITE:
			case ALGORITHM:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MEMOPTIMIZE:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case PERIOD:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1301);
				identifier();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(1302);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Link_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Link_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_link_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLink_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLink_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitLink_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Link_nameContext link_name() throws RecognitionException {
		Link_nameContext _localctx = new Link_nameContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_link_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1305);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitColumn_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitColumn_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_column_name);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1307);
			identifier();
			setState(1312);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,152,_ctx);
			while ( _alt!=2 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1308);
					match(PERIOD);
					setState(1309);
					id_expression();
					}
					} 
				}
				setState(1314);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,152,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Tableview_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Tableview_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableview_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTableview_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTableview_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTableview_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tableview_nameContext tableview_name() throws RecognitionException {
		Tableview_nameContext _localctx = new Tableview_nameContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_tableview_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1315);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Char_set_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public Char_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_set_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterChar_set_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitChar_set_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitChar_set_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Char_set_nameContext char_set_name() throws RecognitionException {
		Char_set_nameContext _localctx = new Char_set_nameContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_char_set_name);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1317);
			id_expression();
			setState(1322);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,153,_ctx);
			while ( _alt!=2 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1318);
					match(PERIOD);
					setState(1319);
					id_expression();
					}
					} 
				}
				setState(1324);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,153,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_argumentContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_argument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitFunction_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argumentContext function_argument() throws RecognitionException {
		Function_argumentContext _localctx = new Function_argumentContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_function_argument);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1325);
			match(LEFT_PAREN);
			setState(1334);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -283673999966210L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1126037379612685L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -2323857682634637313L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9007199254740993L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -281474976710913L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -65537L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -9288674768322625L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & -281474977235137L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & -1152921504606846977L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1153203254507601937L) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & -281475110928385L) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & -294649859L) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & -9007207844675585L) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & -4611686018427387905L) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & -140737488879617L) != 0) || ((((_la - 960)) & ~0x3f) == 0 && ((1L << (_la - 960)) & -562949953421313L) != 0) || ((((_la - 1024)) & ~0x3f) == 0 && ((1L << (_la - 1024)) & -1L) != 0) || ((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & -144115188075855873L) != 0) || ((((_la - 1152)) & ~0x3f) == 0 && ((1L << (_la - 1152)) & -70379482644481L) != 0) || ((((_la - 1216)) & ~0x3f) == 0 && ((1L << (_la - 1216)) & -274877915649L) != 0) || ((((_la - 1280)) & ~0x3f) == 0 && ((1L << (_la - 1280)) & -4298752257L) != 0) || ((((_la - 1344)) & ~0x3f) == 0 && ((1L << (_la - 1344)) & -1L) != 0) || ((((_la - 1408)) & ~0x3f) == 0 && ((1L << (_la - 1408)) & -144115188075855873L) != 0) || ((((_la - 1472)) & ~0x3f) == 0 && ((1L << (_la - 1472)) & -1073743873L) != 0) || ((((_la - 1536)) & ~0x3f) == 0 && ((1L << (_la - 1536)) & -9007203566485505L) != 0) || ((((_la - 1600)) & ~0x3f) == 0 && ((1L << (_la - 1600)) & -17592186044673L) != 0) || ((((_la - 1664)) & ~0x3f) == 0 && ((1L << (_la - 1664)) & -274877906945L) != 0) || ((((_la - 1728)) & ~0x3f) == 0 && ((1L << (_la - 1728)) & -1L) != 0) || ((((_la - 1792)) & ~0x3f) == 0 && ((1L << (_la - 1792)) & -1L) != 0) || ((((_la - 1856)) & ~0x3f) == 0 && ((1L << (_la - 1856)) & -1L) != 0) || ((((_la - 1920)) & ~0x3f) == 0 && ((1L << (_la - 1920)) & -1L) != 0) || ((((_la - 1984)) & ~0x3f) == 0 && ((1L << (_la - 1984)) & -288230378299195393L) != 0) || ((((_la - 2048)) & ~0x3f) == 0 && ((1L << (_la - 2048)) & -72057606922829825L) != 0) || ((((_la - 2112)) & ~0x3f) == 0 && ((1L << (_la - 2112)) & -2199023255553L) != 0) || ((((_la - 2176)) & ~0x3f) == 0 && ((1L << (_la - 2176)) & -281477158010889L) != 0) || ((((_la - 2240)) & ~0x3f) == 0 && ((1L << (_la - 2240)) & -27021683663569025L) != 0) || ((((_la - 2304)) & ~0x3f) == 0 && ((1L << (_la - 2304)) & 36600612611043327L) != 0)) {
				{
				setState(1326);
				argument();
				setState(1331);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1327);
					match(COMMA);
					setState(1328);
					argument();
					}
					}
					setState(1333);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1336);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ArgumentContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(PlSqlParser.EQUALS_OP, 0); }
		public TerminalNode GREATER_THAN_OP() { return getToken(PlSqlParser.GREATER_THAN_OP, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1342);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				setState(1338);
				identifier();
				setState(1339);
				match(EQUALS_OP);
				setState(1340);
				match(GREATER_THAN_OP);
				}
				break;
			}
			setState(1344);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_specContext extends ParserRuleContext {
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode PERCENT_ROWTYPE() { return getToken(PlSqlParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(PlSqlParser.PERCENT_TYPE, 0); }
		public Type_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitType_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_specContext type_spec() throws RecognitionException {
		Type_specContext _localctx = new Type_specContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_type_spec);
		int _la;
		try {
			setState(1354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1346);
				datatype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1348);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
				case 1:
					{
					setState(1347);
					match(REF);
					}
					break;
				}
				setState(1350);
				type_name();
				setState(1352);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) {
					{
					setState(1351);
					_la = _input.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatatypeContext extends ParserRuleContext {
		public Native_datatype_elementContext native_datatype_element() {
			return getRuleContext(Native_datatype_elementContext.class,0);
		}
		public Precision_partContext precision_part() {
			return getRuleContext(Precision_partContext.class,0);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDatatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDatatype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatatypeContext datatype() throws RecognitionException {
		DatatypeContext _localctx = new DatatypeContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_datatype);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1356);
			native_datatype_element();
			setState(1358);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1357);
				precision_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Precision_partContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public TerminalNode ASTERISK() { return getToken(PlSqlParser.ASTERISK, 0); }
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
		public TerminalNode BYTE() { return getToken(PlSqlParser.BYTE, 0); }
		public Numeric_negativeContext numeric_negative() {
			return getRuleContext(Numeric_negativeContext.class,0);
		}
		public Precision_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPrecision_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPrecision_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitPrecision_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Precision_partContext precision_part() throws RecognitionException {
		Precision_partContext _localctx = new Precision_partContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_precision_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1360);
			match(LEFT_PAREN);
			setState(1363);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				{
				setState(1361);
				numeric();
				}
				break;
			case ASTERISK:
				{
				setState(1362);
				match(ASTERISK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1370);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1365);
				match(COMMA);
				setState(1368);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
					{
					setState(1366);
					numeric();
					}
					break;
				case MINUS_SIGN:
					{
					setState(1367);
					numeric_negative();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(1373);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				setState(1372);
				_la = _input.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1375);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Native_datatype_elementContext extends ParserRuleContext {
		public TerminalNode INT() { return getToken(PlSqlParser.INT, 0); }
		public TerminalNode BYTE() { return getToken(PlSqlParser.BYTE, 0); }
		public TerminalNode SMALLINT() { return getToken(PlSqlParser.SMALLINT, 0); }
		public TerminalNode BIGINT() { return getToken(PlSqlParser.BIGINT, 0); }
		public TerminalNode NUMBER() { return getToken(PlSqlParser.NUMBER, 0); }
		public TerminalNode DECIMAL() { return getToken(PlSqlParser.DECIMAL, 0); }
		public TerminalNode DOUBLE() { return getToken(PlSqlParser.DOUBLE, 0); }
		public TerminalNode FLOAT() { return getToken(PlSqlParser.FLOAT, 0); }
		public TerminalNode VARCHAR() { return getToken(PlSqlParser.VARCHAR, 0); }
		public TerminalNode STRING() { return getToken(PlSqlParser.STRING, 0); }
		public TerminalNode BOOLEAN() { return getToken(PlSqlParser.BOOLEAN, 0); }
		public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public TerminalNode BINARY() { return getToken(PlSqlParser.BINARY, 0); }
		public TerminalNode BLOB() { return getToken(PlSqlParser.BLOB, 0); }
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_native_datatype_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNative_datatype_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNative_datatype_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitNative_datatype_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Native_datatype_elementContext native_datatype_element() throws RecognitionException {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_native_datatype_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1377);
			_la = _input.LA(1);
			if ( !(((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & 274886426625L) != 0) || _la==DATE || _la==DECIMAL || _la==DOUBLE || _la==FLOAT || _la==INT || _la==BIGINT || _la==NUMBER || _la==SMALLINT || _la==STRING || _la==TIMESTAMP || _la==VARCHAR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Bind_variableContext extends ParserRuleContext {
		public List<TerminalNode> BINDVAR() { return getTokens(PlSqlParser.BINDVAR); }
		public TerminalNode BINDVAR(int i) {
			return getToken(PlSqlParser.BINDVAR, i);
		}
		public List<TerminalNode> COLON() { return getTokens(PlSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(PlSqlParser.COLON, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public TerminalNode INDICATOR() { return getToken(PlSqlParser.INDICATOR, 0); }
		public Bind_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bind_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBind_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBind_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitBind_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bind_variableContext bind_variable() throws RecognitionException {
		Bind_variableContext _localctx = new Bind_variableContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_bind_variable);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1382);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINDVAR:
				{
				setState(1379);
				match(BINDVAR);
				}
				break;
			case COLON:
				{
				setState(1380);
				match(COLON);
				setState(1381);
				match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1392);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				setState(1385);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDICATOR) {
					{
					setState(1384);
					match(INDICATOR);
					}
				}

				setState(1390);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINDVAR:
					{
					setState(1387);
					match(BINDVAR);
					}
					break;
				case COLON:
					{
					setState(1388);
					match(COLON);
					setState(1389);
					match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(1398);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,169,_ctx);
			while ( _alt!=2 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1394);
					match(PERIOD);
					setState(1395);
					general_element_part();
					}
					} 
				}
				setState(1400);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,169,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class General_elementContext extends ParserRuleContext {
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public General_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGeneral_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGeneral_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitGeneral_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_elementContext general_element() throws RecognitionException {
		General_elementContext _localctx = new General_elementContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_general_element);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1401);
			general_element_part();
			setState(1406);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,170,_ctx);
			while ( _alt!=2 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1402);
					match(PERIOD);
					setState(1403);
					general_element_part();
					}
					} 
				}
				setState(1408);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,170,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class General_element_partContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public General_element_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGeneral_element_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGeneral_element_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitGeneral_element_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_element_partContext general_element_part() throws RecognitionException {
		General_element_partContext _localctx = new General_element_partContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_general_element_part);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(1409);
				match(INTRODUCER);
				setState(1410);
				char_set_name();
				}
			}

			setState(1413);
			id_expression();
			setState(1418);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,172,_ctx);
			while ( _alt!=2 && _alt!=com.github.ares.org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1414);
					match(PERIOD);
					setState(1415);
					id_expression();
					}
					} 
				}
				setState(1420);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,172,_ctx);
			}
			setState(1423);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
			case 1:
				{
				setState(1421);
				match(AT_SIGN);
				setState(1422);
				link_name();
				}
				break;
			}
			setState(1426);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
			case 1:
				{
				setState(1425);
				function_argument();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_elementContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTable_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_elementContext table_element() throws RecognitionException {
		Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(1428);
				match(INTRODUCER);
				setState(1429);
				char_set_name();
				}
			}

			setState(1432);
			id_expression();
			setState(1437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(1433);
				match(PERIOD);
				setState(1434);
				id_expression();
				}
				}
				setState(1439);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstantContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public List<Bind_variableContext> bind_variable() {
			return getRuleContexts(Bind_variableContext.class);
		}
		public Bind_variableContext bind_variable(int i) {
			return getRuleContext(Bind_variableContext.class,i);
		}
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public List<TerminalNode> DAY() { return getTokens(PlSqlParser.DAY); }
		public TerminalNode DAY(int i) {
			return getToken(PlSqlParser.DAY, i);
		}
		public List<TerminalNode> HOUR() { return getTokens(PlSqlParser.HOUR); }
		public TerminalNode HOUR(int i) {
			return getToken(PlSqlParser.HOUR, i);
		}
		public List<TerminalNode> MINUTE() { return getTokens(PlSqlParser.MINUTE); }
		public TerminalNode MINUTE(int i) {
			return getToken(PlSqlParser.MINUTE, i);
		}
		public List<TerminalNode> SECOND() { return getTokens(PlSqlParser.SECOND); }
		public TerminalNode SECOND(int i) {
			return getToken(PlSqlParser.SECOND, i);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
		public TerminalNode NULL_() { return getToken(PlSqlParser.NULL_, 0); }
		public TerminalNode TRUE() { return getToken(PlSqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PlSqlParser.FALSE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(PlSqlParser.DBTIMEZONE, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(PlSqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_constant);
		int _la;
		try {
			setState(1502);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1440);
				match(TIMESTAMP);
				setState(1443);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,177,_ctx) ) {
				case 1:
					{
					setState(1441);
					quoted_string();
					}
					break;
				case 2:
					{
					setState(1442);
					bind_variable();
					}
					break;
				}
				setState(1449);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
				case 1:
					{
					setState(1445);
					match(AT);
					setState(1446);
					match(TIME);
					setState(1447);
					match(ZONE);
					setState(1448);
					quoted_string();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1451);
				match(INTERVAL);
				setState(1455);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
				case 1:
					{
					setState(1452);
					quoted_string();
					}
					break;
				case 2:
					{
					setState(1453);
					bind_variable();
					}
					break;
				case 3:
					{
					setState(1454);
					general_element_part();
					}
					break;
				}
				setState(1457);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==MONTH || _la==SECOND || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1471);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
				case 1:
					{
					setState(1458);
					match(LEFT_PAREN);
					setState(1461);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(1459);
						match(UNSIGNED_INTEGER);
						}
						break;
					case BINDVAR:
					case COLON:
						{
						setState(1460);
						bind_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1468);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1463);
						match(COMMA);
						setState(1466);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							setState(1464);
							match(UNSIGNED_INTEGER);
							}
							break;
						case BINDVAR:
						case COLON:
							{
							setState(1465);
							bind_variable();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					setState(1470);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(1488);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
				case 1:
					{
					setState(1473);
					match(TO);
					setState(1486);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DAY:
						{
						setState(1474);
						match(DAY);
						}
						break;
					case HOUR:
						{
						setState(1475);
						match(HOUR);
						}
						break;
					case MINUTE:
						{
						setState(1476);
						match(MINUTE);
						}
						break;
					case SECOND:
						{
						setState(1477);
						match(SECOND);
						setState(1484);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,185,_ctx) ) {
						case 1:
							{
							setState(1478);
							match(LEFT_PAREN);
							setState(1481);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								setState(1479);
								match(UNSIGNED_INTEGER);
								}
								break;
							case BINDVAR:
							case COLON:
								{
								setState(1480);
								bind_variable();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(1483);
							match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1490);
				numeric();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1491);
				match(DATE);
				setState(1492);
				quoted_string();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1493);
				quoted_string();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1494);
				match(NULL_);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1495);
				match(TRUE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1496);
				match(FALSE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1497);
				match(DBTIMEZONE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1498);
				match(SESSIONTIMEZONE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1499);
				match(MINVALUE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1500);
				match(MAXVALUE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1501);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumericContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(PlSqlParser.APPROXIMATE_NUM_LIT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNumeric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_numeric);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1504);
			_la = _input.LA(1);
			if ( !(_la==UNSIGNED_INTEGER || _la==APPROXIMATE_NUM_LIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Numeric_negativeContext extends ParserRuleContext {
		public TerminalNode MINUS_SIGN() { return getToken(PlSqlParser.MINUS_SIGN, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Numeric_negativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_negative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNumeric_negative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNumeric_negative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitNumeric_negative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_negativeContext numeric_negative() throws RecognitionException {
		Numeric_negativeContext _localctx = new Numeric_negativeContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_numeric_negative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1506);
			match(MINUS_SIGN);
			setState(1507);
			numeric();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Quoted_stringContext extends ParserRuleContext {
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public TerminalNode NATIONAL_CHAR_STRING_LIT() { return getToken(PlSqlParser.NATIONAL_CHAR_STRING_LIT, 0); }
		public Quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterQuoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitQuoted_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitQuoted_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quoted_stringContext quoted_string() throws RecognitionException {
		Quoted_stringContext _localctx = new Quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_quoted_string);
		try {
			setState(1512);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABS:
			case ABSENT:
			case ACCESS:
			case ACCESSED:
			case ACCOUNT:
			case ACL:
			case ACOS:
			case ACROSS:
			case ACTION:
			case ACTIONS:
			case ACTIVATE:
			case ACTIVE:
			case ACTIVE_COMPONENT:
			case ACTIVE_DATA:
			case ACTIVE_FUNCTION:
			case ACTIVE_TAG:
			case ACTIVITY:
			case ADAPTIVE_PLAN:
			case ADD:
			case ADD_COLUMN:
			case ADD_GROUP:
			case ADD_MONTHS:
			case ADJ_DATE:
			case ADMIN:
			case ADMINISTER:
			case ADMINISTRATOR:
			case ADVANCED:
			case ADVISE:
			case ADVISOR:
			case AFD_DISKSTRING:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALIAS:
			case ALLOCATE:
			case ALLOW:
			case ALL_ROWS:
			case ALTERNATE:
			case ALWAYS:
			case ANALYTIC:
			case ANALYZE:
			case ANCESTOR:
			case ANCILLARY:
			case AND_EQUAL:
			case ANOMALY:
			case ANSI_REARCH:
			case ANTIJOIN:
			case ANYSCHEMA:
			case APPEND:
			case APPENDCHILDXML:
			case APPEND_VALUES:
			case APPLICATION:
			case APPLY:
			case APPROX_COUNT_DISTINCT:
			case ARCHIVAL:
			case ARCHIVE:
			case ARCHIVED:
			case ARCHIVELOG:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASIS:
			case ASSEMBLY:
			case ASSIGN:
			case ASSOCIATE:
			case ASYNC:
			case ASYNCHRONOUS:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AUTHENTICATED:
			case AUTHENTICATION:
			case AUTHID:
			case AUTHORIZATION:
			case AUTOALLOCATE:
			case AUTO:
			case AUTOEXTEND:
			case AUTO_LOGIN:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case AUTO_REOPTIMIZE:
			case AVAILABILITY:
			case AVRO:
			case BACKGROUND:
			case BACKINGFILE:
			case BACKUP:
			case BACKUPS:
			case BASIC:
			case BASICFILE:
			case BATCH:
			case BATCHSIZE:
			case BATCH_TABLE_ACCESS_BY_ROWID:
			case BECOME:
			case BEFORE:
			case BEGIN:
			case BEGINNING:
			case BEGIN_OUTLINE_DATA:
			case BEHALF:
			case BEQUEATH:
			case BFILE:
			case BFILENAME:
			case BIGFILE:
			case BINARY:
			case BINARY_DOUBLE:
			case BINARY_DOUBLE_INFINITY:
			case BINARY_DOUBLE_NAN:
			case BINARY_FLOAT:
			case BINARY_FLOAT_INFINITY:
			case BINARY_FLOAT_NAN:
			case BINARY_INTEGER:
			case BIND_AWARE:
			case BINDING:
			case BIN_TO_NUM:
			case BITAND:
			case BITMAP_AND:
			case BITMAP:
			case BITMAPS:
			case BITMAP_TREE:
			case BITS:
			case BLOB:
			case BLOCK:
			case BLOCK_RANGE:
			case BLOCKS:
			case BLOCKSIZE:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BOUND:
			case BRANCH:
			case BREADTH:
			case BROADCAST:
			case BSON:
			case BUFFER:
			case BUFFER_CACHE:
			case BUFFER_POOL:
			case BUILD:
			case BULK:
			case BYPASS_RECURSIVE_CHECK:
			case BYPASS_UJVC:
			case BYTE:
			case CACHE:
			case CACHE_CB:
			case CACHE_INSTANCES:
			case CACHE_TEMP_TABLE:
			case CACHING:
			case CALCULATED:
			case CALLBACK:
			case CALL:
			case CANCEL:
			case CAPACITY:
			case CAPTION:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CASESENSITIVE:
			case CATEGORY:
			case CDBDEFAULT:
			case CEIL:
			case CELL_FLASH_CACHE:
			case CERTIFICATE:
			case CFILE:
			case CHAINED:
			case CHANGE:
			case CHANGE_DUPKEY_ERROR_INDEX:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHECK_ACL_REWRITE:
			case CHECKPOINT:
			case CHILD:
			case CHOOSE:
			case CHR:
			case CHUNK:
			case CLASS:
			case CLASSIFICATION:
			case CLASSIFIER:
			case CLAUSE:
			case CLEAN:
			case CLEANUP:
			case CLEAR:
			case C_LETTER:
			case CLIENT:
			case CLOB:
			case CLONE:
			case CLOSE_CACHED_OPEN_CURSORS:
			case CLOSE:
			case CLUSTER_BY_ROWID:
			case CLUSTER:
			case CLUSTER_DETAILS:
			case CLUSTER_DISTANCE:
			case CLUSTER_ID:
			case CLUSTERING:
			case CLUSTERING_FACTOR:
			case CLUSTER_PROBABILITY:
			case CLUSTER_SET:
			case COALESCE:
			case COALESCE_SQ:
			case COARSE:
			case CO_AUTH_IND:
			case COLD:
			case COLLECT:
			case COLUMNAR:
			case COLUMN_AUTH_INDICATOR:
			case COLUMN:
			case COLUMNS:
			case COLUMN_STATS:
			case COLUMN_VALUE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMMON:
			case COMMON_DATA:
			case COMPACT:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPLIANCE:
			case COMPONENT:
			case COMPONENTS:
			case COMPOSE:
			case COMPOSITE:
			case COMPOSITE_LIMIT:
			case COMPOUND:
			case COMPUTE:
			case CONCAT:
			case CON_DBID_TO_ID:
			case CONDITIONAL:
			case CONDITION:
			case CONFIRM:
			case CONFORMING:
			case CON_GUID_TO_ID:
			case CON_ID:
			case CON_NAME_TO_ID:
			case CONNECT_BY_CB_WHR_ONLY:
			case CONNECT_BY_COMBINE_SW:
			case CONNECT_BY_COST_BASED:
			case CONNECT_BY_ELIM_DUPS:
			case CONNECT_BY_FILTERING:
			case CONNECT_BY_ISCYCLE:
			case CONNECT_BY_ISLEAF:
			case CONNECT_BY_ROOT:
			case CONNECT_TIME:
			case CONSIDER:
			case CONSISTENT:
			case CONSTANT:
			case CONST:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINER:
			case CONTAINERS:
			case CONTAINERS_DEFAULT:
			case CONTAINER_DATA:
			case CONTAINER_MAP:
			case CONTENT:
			case CONTENTS:
			case CONTEXT:
			case CONTINUE:
			case CONTROLFILE:
			case CON_UID_TO_ID:
			case CONVERT:
			case CONVERSION:
			case COOKIE:
			case COPY:
			case CORR_K:
			case CORR_S:
			case CORRUPTION:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COST_XML_QUERY_REWRITE:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CPU_COSTING:
			case CPU_PER_CALL:
			case CPU_PER_SESSION:
			case CRASH:
			case CREATE_FILE_DEST:
			case CREATE_STORED_OUTLINES:
			case CREATION:
			case CREDENTIAL:
			case CRITICAL:
			case CROSS:
			case CROSSEDITION:
			case CSCONVERT:
			case CUBE_AJ:
			case CUBE:
			case CUBE_GB:
			case CUBE_SJ:
			case CUME_DISTM:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURRENTV:
			case CURSOR:
			case CURSOR_SHARING_EXACT:
			case CURSOR_SPECIFIC_SEGMENT:
			case CUSTOMDATUM:
			case CV:
			case CYCLE:
			case DANGLING:
			case DATABASE:
			case DATA:
			case DATAFILE:
			case DATAFILES:
			case DATAMOVEMENT:
			case DATAOBJNO:
			case DATAOBJ_TO_MAT_PARTITION:
			case DATAOBJ_TO_PARTITION:
			case DATAPUMP:
			case DATA_SECURITY_REWRITE_LIMIT:
			case DATE_MODE:
			case DAY:
			case DAYOFWEEK:
			case DAYS:
			case DBA:
			case DBA_RECYCLEBIN:
			case DBMS_STATS:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DB_UNIQUE_NAME:
			case DB_VERSION:
			case DDL:
			case DEALLOCATE:
			case DEBUG:
			case DEBUGGER:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECORRELATE:
			case DECR:
			case DECREMENT:
			case DECRYPT:
			case DEDUPLICATE:
			case DEFAULTS:
			case DEFAULT_COLLATION:
			case DEFAULT_CREDENTIAL:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINED:
			case DEFINE:
			case DEFINER:
			case DEGREE:
			case DELAY:
			case DELEGATE:
			case DELETE_ALL:
			case DELETE:
			case DELETEXML:
			case DEMAND:
			case DENSE_RANKM:
			case DEPENDENT:
			case DEPTH:
			case DEQUEUE:
			case DEREF:
			case DEREF_NO_REWRITE:
			case DESCRIPTION:
			case DESTROY:
			case DETACHED:
			case DETERMINES:
			case DETERMINISTIC:
			case DICTIONARY:
			case DIMENSION:
			case DIMENSIONS:
			case DIRECT_LOAD:
			case DIRECTORY:
			case DIRECT_PATH:
			case DISABLE_ALL:
			case DISABLE:
			case DISABLE_PARALLEL_DML:
			case DISABLE_PRESET:
			case DISABLE_RPKE:
			case DISALLOW:
			case DISASSOCIATE:
			case DISCARD:
			case DISCONNECT:
			case DISK:
			case DISKGROUP:
			case DISKS:
			case DISMOUNT:
			case DISTINGUISHED:
			case DISTRIBUTED:
			case DISTRIBUTE:
			case DML:
			case DML_UPDATE:
			case DOCFIDELITY:
			case DOCUMENT:
			case DOMAIN_INDEX_FILTER:
			case DOMAIN_INDEX_NO_SORT:
			case DOMAIN_INDEX_SORT:
			case DOY:
			case DOUBLE:
			case DOWNGRADE:
			case DRIVING_SITE:
			case DROP_COLUMN:
			case DROP_GROUP:
			case DSINTERVAL_UNCONSTRAINED:
			case DST_UPGRADE_INSERT_CONV:
			case DUMP:
			case DUPLICATE:
			case DV:
			case DYNAMIC:
			case DYNAMIC_SAMPLING:
			case DYNAMIC_SAMPLING_EST_CDN:
			case E_LETTER:
			case EACH:
			case EDITIONABLE:
			case EDITION:
			case EDITIONING:
			case EDITIONS:
			case ELEMENT:
			case ELIM_GROUPBY:
			case ELIMINATE_JOIN:
			case ELIMINATE_OBY:
			case ELIMINATE_OUTER_JOIN:
			case EM:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE_ALL:
			case ENABLE:
			case ENABLE_PARALLEL_DML:
			case ENABLE_PRESET:
			case ENCODING:
			case ENCRYPT:
			case ENCRYPTION:
			case END_OUTLINE_DATA:
			case ENFORCED:
			case ENFORCE:
			case ENQUEUE:
			case ENTERPRISE:
			case ENTITYESCAPING:
			case ENTRY:
			case EQUIPART:
			case ERR:
			case ERROR_ARGUMENT:
			case ERROR:
			case ERROR_ON_OVERLAP_TIME:
			case ERRORS:
			case ESCAPE:
			case ESTIMATE:
			case EVAL:
			case EVALNAME:
			case EVALUATE:
			case EVALUATION:
			case EVENTS:
			case EVERY:
			case EXCEPT:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCHANGE:
			case EXCLUDE:
			case EXCLUDING:
			case EXECUTE:
			case EXEMPT:
			case EXISTING:
			case EXISTS:
			case EXISTSNODE:
			case EXIT:
			case EXPAND_GSET_TO_UNION:
			case EXPAND_TABLE:
			case EXP:
			case EXPIRE:
			case EXPLAIN:
			case EXPLOSION:
			case EXPORT:
			case EXPR_CORR_CHECK:
			case EXPRESS:
			case EXTENDS:
			case EXTENT:
			case EXTENTS:
			case EXTERNAL:
			case EXTERNALLY:
			case EXTRACTCLOBXML:
			case EXTRACT:
			case EXTRACTVALUE:
			case EXTRA:
			case FACILITY:
			case FACT:
			case FACTOR:
			case FACTORIZE_JOIN:
			case FAILED:
			case FAILED_LOGIN_ATTEMPTS:
			case FAILGROUP:
			case FAILOVER:
			case FAILURE:
			case FALSE:
			case FAMILY:
			case FAR:
			case FAST:
			case FASTSTART:
			case FBTSCAN:
			case FEATURE:
			case FEATURE_DETAILS:
			case FEATURE_ID:
			case FEATURE_SET:
			case FEATURE_VALUE:
			case FETCH:
			case FILE:
			case FILE_NAME_CONVERT:
			case FILEGROUP:
			case FILESTORE:
			case FILESYSTEM_LIKE_LOGGING:
			case FILTER:
			case FINAL:
			case FINE:
			case FINISH:
			case FIRST:
			case FIRSTM:
			case FIRST_ROWS:
			case FIRST_VALUE:
			case FIXED_VIEW_DATA:
			case FLAGGER:
			case FLASHBACK:
			case FLASH_CACHE:
			case FLOAT:
			case FLOB:
			case FLEX:
			case FLOOR:
			case FLUSH:
			case FOLDER:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FORCE_XML_QUERY_REWRITE:
			case FOREIGN:
			case FOREVER:
			case FORMAT:
			case FORWARD:
			case FRAGMENT_NUMBER:
			case FREELIST:
			case FREELISTS:
			case FREEPOOLS:
			case FRESH:
			case FROM_TZ:
			case FULL:
			case FULL_OUTER_JOIN_TO_OUTER:
			case FUNCTION:
			case FUNCTIONS:
			case FTP:
			case G_LETTER:
			case GATHER_OPTIMIZER_STATISTICS:
			case GATHER_PLAN_STATISTICS:
			case GBY_CONC_ROLLUP:
			case GBY_PUSHDOWN:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GLOBALLY:
			case GLOBAL_NAME:
			case GLOBAL_TOPIC_ENABLED:
			case GROUP_BY:
			case GROUP_ID:
			case GROUPING:
			case GROUPING_ID:
			case GROUPS:
			case GUARANTEED:
			case GUARANTEE:
			case GUARD:
			case HALF_YEARS:
			case HASH_AJ:
			case HASH:
			case HASHKEYS:
			case HASH_SJ:
			case HEADER:
			case HEAP:
			case HELP:
			case HEXTORAW:
			case HEXTOREF:
			case HIDDEN_KEYWORD:
			case HIDE:
			case HIER_ORDER:
			case HIERARCHICAL:
			case HIERARCHY:
			case HIGH:
			case HINTSET_BEGIN:
			case HINTSET_END:
			case HOT:
			case HOUR:
			case HOURS:
			case HTTP:
			case HWM_BROKERED:
			case HYBRID:
			case H_LETTER:
			case IDENTIFIER:
			case IDENTITY:
			case IDGENERATORS:
			case ID:
			case IDLE_TIME:
			case IF:
			case IGNORE:
			case IGNORE_OPTIM_EMBEDDED_HINTS:
			case IGNORE_ROW_ON_DUPKEY_INDEX:
			case IGNORE_WHERE_CLAUSE:
			case ILM:
			case IMMEDIATE:
			case IMPACT:
			case IMPORT:
			case INACTIVE:
			case INACTIVE_ACCOUNT_TIME:
			case INCLUDE:
			case INCLUDE_VERSION:
			case INCLUDING:
			case INCREMENTAL:
			case INCREMENT:
			case INCR:
			case INDENT:
			case INDEX_ASC:
			case INDEX_COMBINE:
			case INDEX_DESC:
			case INDEXED:
			case INDEXES:
			case INDEX_FFS:
			case INDEX_FILTER:
			case INDEXING:
			case INDEX_JOIN:
			case INDEX_ROWS:
			case INDEX_RRS:
			case INDEX_RS_ASC:
			case INDEX_RS_DESC:
			case INDEX_RS:
			case INDEX_SCAN:
			case INDEX_SKIP_SCAN:
			case INDEX_SS_ASC:
			case INDEX_SS_DESC:
			case INDEX_SS:
			case INDEX_STATS:
			case INDEXTYPE:
			case INDEXTYPES:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INFORMATIONAL:
			case INHERIT:
			case INITCAP:
			case INITIAL:
			case INITIALIZED:
			case INITIALLY:
			case INITRANS:
			case INLINE:
			case INLINE_XMLTYPE_NT:
			case INMEMORY:
			case IN_MEMORY_METADATA:
			case INMEMORY_PRUNING:
			case INNER:
			case INOUT:
			case INPLACE:
			case INSERTCHILDXMLAFTER:
			case INSERTCHILDXMLBEFORE:
			case INSERTCHILDXML:
			case INSERTXMLAFTER:
			case INSERTXMLBEFORE:
			case INSTANCE:
			case INSTANCES:
			case INSTANTIABLE:
			case INSTANTLY:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTEGER:
			case INTERLEAVED:
			case INTERMEDIATE:
			case INTERNAL_CONVERT:
			case INTERNAL_USE:
			case INTERPRETED:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case INVISIBLE:
			case IN_XQUERY:
			case IS_LEAF:
			case ISOLATION:
			case ISOLATION_LEVEL:
			case ITERATE:
			case ITERATION_NUMBER:
			case JAVA:
			case JOB:
			case JOIN:
			case JSON_ARRAYAGG:
			case JSON_ARRAY:
			case JSON_EQUAL:
			case JSON_EXISTS2:
			case JSON_EXISTS:
			case JSONGET:
			case JSON:
			case JSON_OBJECTAGG:
			case JSON_OBJECT:
			case JSONPARSE:
			case JSON_QUERY:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_TEXTCONTAINS2:
			case JSON_TEXTCONTAINS:
			case JSON_TRANSFORM:
			case JSON_VALUE:
			case K_LETTER:
			case KEEP_DUPLICATES:
			case KEEP:
			case KERBEROS:
			case KEY:
			case KEY_LENGTH:
			case KEYSIZE:
			case KEYS:
			case KEYSTORE:
			case KILL:
			case LABEL:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LATERAL:
			case LAX:
			case LAYER:
			case LDAP_REGISTRATION_ENABLED:
			case LDAP_REGISTRATION:
			case LDAP_REG_SYNC_INTERVAL:
			case LEAF:
			case LEAD_CDB:
			case LEAD_CDB_URI:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LESS:
			case LEVEL:
			case LEVEL_NAME:
			case LEVELS:
			case LIBRARY:
			case LIFECYCLE:
			case LIFE:
			case LIFETIME:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_EXPAND:
			case LIMIT:
			case LINEAR:
			case LINK:
			case LIST:
			case LN:
			case LNNVL:
			case LOAD:
			case LOB:
			case LOBNVL:
			case LOBS:
			case LOCAL_INDEXES:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCATOR:
			case LOCKDOWN:
			case LOCKED:
			case LOCKING:
			case LOGFILE:
			case LOGFILES:
			case LOGGING:
			case LOGICAL:
			case LOGICAL_READS_PER_CALL:
			case LOGICAL_READS_PER_SESSION:
			case LOG:
			case LOGMINING:
			case LOGOFF:
			case LOGON:
			case LOG_READ_ONLY_VIOLATIONS:
			case LONG:
			case LOOP:
			case LOST:
			case LOWER:
			case LOW:
			case LPAD:
			case LTRIM:
			case M_LETTER:
			case MAIN:
			case MAKE_REF:
			case MANAGED:
			case MANAGE:
			case MANAGEMENT:
			case MANAGER:
			case MANDATORY:
			case MANUAL:
			case MAP:
			case MAPPING:
			case MASTER:
			case MATCHED:
			case MATCHES:
			case MATCH:
			case MATCH_NUMBER:
			case MATCH_RECOGNIZE:
			case MATERIALIZED:
			case MATERIALIZE:
			case MAXARCHLOGS:
			case MAXDATAFILES:
			case MAXEXTENTS:
			case MAXIMIZE:
			case MAXINSTANCES:
			case MAXLOGFILES:
			case MAXLOGHISTORY:
			case MAXLOGMEMBERS:
			case MAX_SHARED_TEMP_SIZE:
			case MAXSIZE:
			case MAXTRANS:
			case MAXVALUE:
			case MEASURE:
			case MEASURES:
			case MEDIUM:
			case MEMBER:
			case MEMBER_CAPTION:
			case MEMBER_DESCRIPTION:
			case MEMBER_NAME:
			case MEMBER_UNIQUE_NAME:
			case MEMCOMPRESS:
			case MEMORY:
			case MERGEACTIONS:
			case MERGE_AJ:
			case MERGE_CONST_ON:
			case MERGE:
			case MERGE_SJ:
			case METADATA:
			case METHOD:
			case MIGRATE:
			case MIGRATION:
			case MINEXTENTS:
			case MINIMIZE:
			case MINIMUM:
			case MINING:
			case MINUS_NULL:
			case MINUTE:
			case MINUTES:
			case MINVALUE:
			case MIRRORCOLD:
			case MIRRORHOT:
			case MIRROR:
			case MISSING:
			case MISMATCH:
			case MLSLABEL:
			case MODEL_COMPILE_SUBQUERY:
			case MODEL_DONTVERIFY_UNIQUENESS:
			case MODEL_DYNAMIC_SUBQUERY:
			case MODEL_MIN_ANALYSIS:
			case MODEL:
			case MODEL_NB:
			case MODEL_NO_ANALYSIS:
			case MODEL_PBY:
			case MODEL_PUSH_REF:
			case MODEL_SV:
			case MODIFICATION:
			case MODIFY_COLUMN_TYPE:
			case MODIFY:
			case MOD:
			case MODULE:
			case MONITORING:
			case MONITOR:
			case MONTH:
			case MONTHS_BETWEEN:
			case MONTHS:
			case MOUNT:
			case MOUNTPATH:
			case MOUNTPOINT:
			case MOVEMENT:
			case MOVE:
			case MULTIDIMENSIONAL:
			case MULTISET:
			case MV_MERGE:
			case NAMED:
			case NAME:
			case NAMESPACE:
			case NAN:
			case NANVL:
			case NATIONAL:
			case NATIVE_FULL_OUTER_JOIN:
			case NATIVE:
			case NATURAL:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NEEDED:
			case NEG:
			case NESTED:
			case NESTED_TABLE_FAST_INSERT:
			case NESTED_TABLE_GET_REFS:
			case NESTED_TABLE_ID:
			case NESTED_TABLE_SET_REFS:
			case NESTED_TABLE_SET_SETID:
			case NETWORK:
			case NEVER:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NEXT:
			case NL_AJ:
			case NLJ_BATCHING:
			case NLJ_INDEX_FILTER:
			case NLJ_INDEX_SCAN:
			case NLJ_PREFETCH:
			case NLS_CALENDAR:
			case NLS_CHARACTERSET:
			case NLS_CHARSET_DECL_LEN:
			case NLS_CHARSET_ID:
			case NLS_CHARSET_NAME:
			case NLS_COMP:
			case NLS_CURRENCY:
			case NLS_DATE_FORMAT:
			case NLS_DATE_LANGUAGE:
			case NLS_INITCAP:
			case NLS_ISO_CURRENCY:
			case NL_SJ:
			case NLS_LANG:
			case NLS_LANGUAGE:
			case NLS_LENGTH_SEMANTICS:
			case NLS_LOWER:
			case NLS_NCHAR_CONV_EXCP:
			case NLS_NUMERIC_CHARACTERS:
			case NLS_SORT:
			case NLSSORT:
			case NLS_SPECIAL_CHARS:
			case NLS_TERRITORY:
			case NLS_UPPER:
			case NO_ACCESS:
			case NO_ADAPTIVE_PLAN:
			case NO_ANSI_REARCH:
			case NOAPPEND:
			case NOARCHIVELOG:
			case NOAUDIT:
			case NO_AUTO_REOPTIMIZE:
			case NO_BASETABLE_MULTIMV_REWRITE:
			case NO_BATCH_TABLE_ACCESS_BY_ROWID:
			case NO_BIND_AWARE:
			case NO_BUFFER:
			case NOCACHE:
			case NO_CARTESIAN:
			case NO_CHECK_ACL_REWRITE:
			case NO_CLUSTER_BY_ROWID:
			case NO_CLUSTERING:
			case NO_COALESCE_SQ:
			case NO_COMMON_DATA:
			case NO_CONNECT_BY_CB_WHR_ONLY:
			case NO_CONNECT_BY_COMBINE_SW:
			case NO_CONNECT_BY_COST_BASED:
			case NO_CONNECT_BY_ELIM_DUPS:
			case NO_CONNECT_BY_FILTERING:
			case NOCOPY:
			case NO_COST_XML_QUERY_REWRITE:
			case NO_CPU_COSTING:
			case NOCPU_COSTING:
			case NOCYCLE:
			case NO_DATA_SECURITY_REWRITE:
			case NO_DECORRELATE:
			case NODELAY:
			case NO_DOMAIN_INDEX_FILTER:
			case NO_DST_UPGRADE_INSERT_CONV:
			case NO_ELIM_GROUPBY:
			case NO_ELIMINATE_JOIN:
			case NO_ELIMINATE_OBY:
			case NO_ELIMINATE_OUTER_JOIN:
			case NOENTITYESCAPING:
			case NO_EXPAND_GSET_TO_UNION:
			case NO_EXPAND:
			case NO_EXPAND_TABLE:
			case NO_FACT:
			case NO_FACTORIZE_JOIN:
			case NO_FILTERING:
			case NOFORCE:
			case NO_FULL_OUTER_JOIN_TO_OUTER:
			case NO_GATHER_OPTIMIZER_STATISTICS:
			case NO_GBY_PUSHDOWN:
			case NOGUARANTEE:
			case NO_INDEX_FFS:
			case NO_INDEX:
			case NO_INDEX_SS:
			case NO_INMEMORY:
			case NO_INMEMORY_PRUNING:
			case NOKEEP:
			case NO_LOAD:
			case NOLOCAL:
			case NOLOGGING:
			case NOMAPPING:
			case NOMAXVALUE:
			case NO_MERGE:
			case NOMINIMIZE:
			case NOMINVALUE:
			case NO_MODEL_PUSH_REF:
			case NO_MONITORING:
			case NOMONITORING:
			case NO_MONITOR:
			case NO_MULTIMV_REWRITE:
			case NO_NATIVE_FULL_OUTER_JOIN:
			case NONBLOCKING:
			case NONEDITIONABLE:
			case NONE:
			case NO_NLJ_BATCHING:
			case NO_NLJ_PREFETCH:
			case NO:
			case NONSCHEMA:
			case NO_OBJECT_LINK:
			case NOORDER:
			case NO_ORDER_ROLLUPS:
			case NO_OUTER_JOIN_TO_ANTI:
			case NO_OUTER_JOIN_TO_INNER:
			case NOOVERRIDE:
			case NO_PARALLEL_INDEX:
			case NOPARALLEL_INDEX:
			case NO_PARALLEL:
			case NOPARALLEL:
			case NO_PARTIAL_COMMIT:
			case NO_PARTIAL_JOIN:
			case NO_PARTIAL_ROLLUP_PUSHDOWN:
			case NOPARTITION:
			case NO_PLACE_DISTINCT:
			case NO_PLACE_GROUP_BY:
			case NO_PQ_CONCURRENT_UNION:
			case NO_PQ_MAP:
			case NOPROMPT:
			case NO_PQ_REPLICATE:
			case NO_PQ_SKEW:
			case NO_PRUNE_GSETS:
			case NO_PULL_PRED:
			case NO_PUSH_PRED:
			case NO_PUSH_SUBQ:
			case NO_PX_FAULT_TOLERANCE:
			case NO_PX_JOIN_FILTER:
			case NO_QKN_BUFF:
			case NO_QUERY_TRANSFORMATION:
			case NO_REF_CASCADE:
			case NORELOCATE:
			case NORELY:
			case NOREPAIR:
			case NOREPLAY:
			case NORESETLOGS:
			case NO_RESULT_CACHE:
			case NOREVERSE:
			case NO_REWRITE:
			case NOREWRITE:
			case NORMAL:
			case NO_ROOT_SW_FOR_LOCAL:
			case NOROWDEPENDENCIES:
			case NOSCHEMACHECK:
			case NOSEGMENT:
			case NO_SEMIJOIN:
			case NO_SEMI_TO_INNER:
			case NO_SET_TO_JOIN:
			case NOSORT:
			case NO_SQL_TRANSLATION:
			case NO_SQL_TUNE:
			case NO_STAR_TRANSFORMATION:
			case NO_STATEMENT_QUEUING:
			case NO_STATS_GSETS:
			case NOSTRICT:
			case NO_SUBQUERY_PRUNING:
			case NO_SUBSTRB_PAD:
			case NO_SWAP_JOIN_INPUTS:
			case NOSWITCH:
			case NO_TABLE_LOOKUP_BY_NL:
			case NO_TEMP_TABLE:
			case NOTHING:
			case NOTIFICATION:
			case NO_TRANSFORM_DISTINCT_AGG:
			case NO_UNNEST:
			case NO_USE_CUBE:
			case NO_USE_HASH_AGGREGATION:
			case NO_USE_HASH_GBY_FOR_PUSHDOWN:
			case NO_USE_HASH:
			case NO_USE_INVISIBLE_INDEXES:
			case NO_USE_MERGE:
			case NO_USE_NL:
			case NO_USE_VECTOR_AGGREGATION:
			case NOVALIDATE:
			case NO_VECTOR_TRANSFORM_DIMS:
			case NO_VECTOR_TRANSFORM_FACT:
			case NO_VECTOR_TRANSFORM:
			case NO_XDB_FASTPATH_INSERT:
			case NO_XML_DML_REWRITE:
			case NO_XMLINDEX_REWRITE_IN_SELECT:
			case NO_XMLINDEX_REWRITE:
			case NO_XML_QUERY_REWRITE:
			case NO_ZONEMAP:
			case NTH_VALUE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUM_INDEX_KEYS:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT2XML:
			case OBJECT:
			case OBJ_ID:
			case OBJNO:
			case OBJNO_REUSE:
			case OCCURENCES:
			case OFFLINE:
			case OFF:
			case OFFSET:
			case OIDINDEX:
			case OID:
			case OLAP:
			case OLD:
			case OLD_PUSH_PRED:
			case OLS:
			case OLTP:
			case OMIT:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPAQUE:
			case OPAQUE_TRANSFORM:
			case OPAQUE_XCANONICAL:
			case OPCODE:
			case OPEN:
			case OPERATIONS:
			case OPERATOR:
			case OPT_ESTIMATE:
			case OPTIMAL:
			case OPTIMIZE:
			case OPTIMIZER_FEATURES_ENABLE:
			case OPTIMIZER_GOAL:
			case OPT_PARAM:
			case ORA_BRANCH:
			case ORA_CHECK_ACL:
			case ORA_CHECK_PRIVILEGE:
			case ORA_CLUSTERING:
			case ORADATA:
			case ORADEBUG:
			case ORA_DST_AFFECTED:
			case ORA_DST_CONVERT:
			case ORA_DST_ERROR:
			case ORA_GET_ACLIDS:
			case ORA_GET_PRIVILEGES:
			case ORA_HASH:
			case ORA_INVOKING_USERID:
			case ORA_INVOKING_USER:
			case ORA_INVOKING_XS_USER_GUID:
			case ORA_INVOKING_XS_USER:
			case ORA_RAWCOMPARE:
			case ORA_RAWCONCAT:
			case ORA_ROWSCN:
			case ORA_ROWSCN_RAW:
			case ORA_ROWVERSION:
			case ORA_TABVERSION:
			case ORA_WRITE_TIME:
			case ORDERED:
			case ORDERED_PREDICATES:
			case ORDINALITY:
			case OR_EXPAND:
			case ORGANIZATION:
			case OR_PREDICATES:
			case OSERROR:
			case OTHER:
			case OUTER_JOIN_TO_ANTI:
			case OUTER_JOIN_TO_INNER:
			case OUTER:
			case OUTLINE_LEAF:
			case OUTLINE:
			case OUT_OF_LINE:
			case OUT:
			case OVERFLOW_NOMOVE:
			case OVERFLOW:
			case OVERLAPS:
			case OVER:
			case OVERRIDING:
			case OWNER:
			case OWNERSHIP:
			case OWN:
			case P_LETTER:
			case PACKAGE:
			case PACKAGES:
			case PARALLEL_ENABLE:
			case PARALLEL_INDEX:
			case PARALLEL:
			case PARAMETERS:
			case PARAM:
			case PARENT:
			case PARENT_LEVEL_NAME:
			case PARENT_UNIQUE_NAME:
			case PARITY:
			case PARTIAL_JOIN:
			case PARTIALLY:
			case PARTIAL:
			case PARTIAL_ROLLUP_PUSHDOWN:
			case PARTITION_HASH:
			case PARTITION_LIST:
			case PARTITION:
			case PARTITION_RANGE:
			case PARTITIONS:
			case PARTNUMINST:
			case PASSING:
			case PASSWORD_GRACE_TIME:
			case PASSWORD_LIFE_TIME:
			case PASSWORD_LOCK_TIME:
			case PASSWORD:
			case PASSWORD_REUSE_MAX:
			case PASSWORD_REUSE_TIME:
			case PASSWORD_ROLLOVER_TIME:
			case PASSWORD_VERIFY_FUNCTION:
			case PAST:
			case PATCH:
			case PATH:
			case PATH_PREFIX:
			case PATHS:
			case PATTERN:
			case PBL_HS_BEGIN:
			case PBL_HS_END:
			case PCTINCREASE:
			case PCTTHRESHOLD:
			case PCTUSED:
			case PCTVERSION:
			case PENDING:
			case PERCENT_KEYWORD:
			case PERCENT_RANKM:
			case PERFORMANCE:
			case PERIOD_KEYWORD:
			case PERMANENT:
			case PERMISSION:
			case PERMUTE:
			case PER:
			case PFILE:
			case PHYSICAL:
			case PIKEY:
			case PIPELINED:
			case PIV_GB:
			case PIVOT:
			case PIV_SSF:
			case PLACE_DISTINCT:
			case PLACE_GROUP_BY:
			case PLAN:
			case PLSCOPE_SETTINGS:
			case PLS_INTEGER:
			case PLSQL_CCFLAGS:
			case PLSQL_CODE_TYPE:
			case PLSQL_DEBUG:
			case PLSQL_OPTIMIZE_LEVEL:
			case PLSQL_WARNINGS:
			case PLUGGABLE:
			case PMEM:
			case POINT:
			case POLICY:
			case POOL_16K:
			case POOL_2K:
			case POOL_32K:
			case POOL_4K:
			case POOL_8K:
			case POSITIVEN:
			case POSITIVE:
			case POST_TRANSACTION:
			case POWERMULTISET_BY_CARDINALITY:
			case POWERMULTISET:
			case POWER:
			case PQ_CONCURRENT_UNION:
			case PQ_DISTRIBUTE:
			case PQ_DISTRIBUTE_WINDOW:
			case PQ_FILTER:
			case PQ_MAP:
			case PQ_NOMAP:
			case PQ_REPLICATE:
			case PQ_SKEW:
			case PRAGMA:
			case PREBUILT:
			case PRECEDES:
			case PRECEDING:
			case PRECISION:
			case PRECOMPUTE_SUBQUERY:
			case PREDICATE_REORDERS:
			case PRELOAD:
			case PREPARE:
			case PRESENTNNV:
			case PRESENT:
			case PRESENTV:
			case PRESERVE_OID:
			case PRESERVE:
			case PRETTY:
			case PREVIOUS:
			case PREV:
			case PRIMARY:
			case PRINTBLOBTOCLOB:
			case PRIORITY:
			case PRIVATE:
			case PRIVATE_SGA:
			case PRIVILEGED:
			case PRIVILEGE:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCESS:
			case PROFILE:
			case PROGRAM:
			case PROJECT:
			case PROPAGATE:
			case PROPERTY:
			case PROTECTED:
			case PROTECTION:
			case PROTOCOL:
			case PROXY:
			case PRUNING:
			case PUBLIC:
			case PULL_PRED:
			case PURGE:
			case PUSH_PRED:
			case PUSH_SUBQ:
			case PX_FAULT_TOLERANCE:
			case PX_GRANULE:
			case PX_JOIN_FILTER:
			case QB_NAME:
			case QUARTER:
			case QUARTERS:
			case QUERY_BLOCK:
			case QUERY:
			case QUEUE_CURR:
			case QUEUE:
			case QUEUE_ROWP:
			case QUIESCE:
			case QUORUM:
			case QUOTA:
			case QUOTAGROUP:
			case RAISE:
			case RANDOM_LOCAL:
			case RANDOM:
			case RANGE:
			case RANKM:
			case RAPIDLY:
			case RAW:
			case RAWTOHEX:
			case RAWTONHEX:
			case RBA:
			case RBO_OUTLINE:
			case RDBA:
			case READ:
			case READS:
			case REALM:
			case REAL:
			case REBALANCE:
			case REBUILD:
			case RECORD:
			case RECORDS_PER_BLOCK:
			case RECOVERABLE:
			case RECOVER:
			case RECOVERY:
			case RECYCLEBIN:
			case RECYCLE:
			case REDACTION:
			case REDEFINE:
			case REDO:
			case REDUCED:
			case REDUNDANCY:
			case REF_CASCADE_CURSOR:
			case REFERENCED:
			case REFERENCE:
			case REFERENCES:
			case REFERENCING:
			case REF:
			case REFRESH:
			case REFTOHEX:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REGISTER:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REGULAR:
			case REJECT:
			case REKEY:
			case RELATIONAL:
			case RELOCATE:
			case RELY:
			case REMAINDER:
			case REMOTE:
			case REMOTE_MAPPED:
			case REMOVE:
			case RENAME:
			case REPAIR:
			case REPEAT:
			case REPLACE:
			case REPLICATION:
			case REQUIRED:
			case RESETLOGS:
			case RESET:
			case RESIZE:
			case RESOLVE:
			case RESOLVER:
			case RESPECT:
			case RESTART:
			case RESTORE_AS_INTERVALS:
			case RESTORE:
			case RESTRICT_ALL_REF_CONS:
			case RESTRICTED:
			case RESTRICT_REFERENCES:
			case RESTRICT:
			case RESULT_CACHE:
			case RESULT:
			case RESUMABLE:
			case RESUME:
			case RETENTION:
			case RETRY_ON_ROW_CHANGE:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REWRITE_OR_ERROR:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLESET:
			case ROLES:
			case ROLLBACK:
			case ROLLING:
			case ROLLUP:
			case ROWDEPENDENCIES:
			case ROWID_MAPPING_TABLE:
			case ROWID:
			case ROWIDTOCHAR:
			case ROWIDTONCHAR:
			case ROW_LENGTH:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULE:
			case RULES:
			case RUNNING:
			case SALT:
			case SAMPLE:
			case SAVE_AS_INTERVALS:
			case SAVEPOINT:
			case SAVE:
			case SB4:
			case SCALE_ROWS:
			case SCALE:
			case SCAN_INSTANCES:
			case SCAN:
			case SCHEDULER:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN_ASCENDING:
			case SCN:
			case SCOPE:
			case SCRUB:
			case SD_ALL:
			case SD_INHIBIT:
			case SDO_GEOM_MBR:
			case SDO_GEOMETRY:
			case SD_SHOW:
			case SEARCH:
			case SECOND:
			case SECONDS:
			case SECRET:
			case SECUREFILE_DBA:
			case SECUREFILE:
			case SECURITY:
			case SEED:
			case SEG_BLOCK:
			case SEG_FILE:
			case SEGMENT:
			case SELECTIVITY:
			case SELF:
			case SEMIJOIN_DRIVER:
			case SEMIJOIN:
			case SEMI_TO_INNER:
			case SEQUENCED:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERIAL:
			case SERVERERROR:
			case SERVICE_NAME_CONVERT:
			case SERVICE:
			case SERVICES:
			case SESSION_CACHED_CURSORS:
			case SESSION:
			case SESSIONS_PER_USER:
			case SESSIONTIMEZONE:
			case SESSIONTZNAME:
			case SET:
			case SETS:
			case SETTINGS:
			case SET_TO_JOIN:
			case SEVERE:
			case SHARDSPACE:
			case SHARED_POOL:
			case SHARED:
			case SHARING:
			case SHELFLIFE:
			case SHOW:
			case SHRINK:
			case SHUTDOWN:
			case SIBLINGS:
			case SID:
			case SITE:
			case SIGNAL_COMPONENT:
			case SIGNAL_FUNCTION:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SIMPLE:
			case SINGLE:
			case SINGLETASK:
			case SINH:
			case SIN:
			case SKIP_EXT_OPTIMIZER:
			case SKIP_:
			case SKIP_UNQ_UNUSABLE_IDX:
			case SKIP_UNUSABLE_INDEXES:
			case SMALLFILE:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SORT:
			case SOUNDEX:
			case SOURCE_FILE_DIRECTORY:
			case SOURCE_FILE_NAME_CONVERT:
			case SOURCE:
			case SPACE_KEYWORD:
			case SPECIFICATION:
			case SPFILE:
			case SPLIT:
			case SPREADSHEET:
			case SQLDATA:
			case SQLERROR:
			case SQLLDR:
			case SQL:
			case SQL_MACRO:
			case SQL_TRACE:
			case SQL_TRANSLATION_PROFILE:
			case SQRT:
			case STALE:
			case STANDALONE:
			case STANDARD:
			case STANDARD_HASH:
			case STANDBY_MAX_DATA_DELAY:
			case STANDBYS:
			case STANDBY:
			case STAR:
			case STAR_TRANSFORMATION:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT_QUEUING:
			case STATEMENTS:
			case STATEMENT:
			case STATE:
			case STATIC:
			case STATISTICS:
			case STATS_BINOMIAL_TEST:
			case STATS_CROSSTAB:
			case STATS_F_TEST:
			case STATS_KS_TEST:
			case STATS_MODE:
			case STATS_MW_TEST:
			case STATS_ONE_WAY_ANOVA:
			case STATS_T_TEST_INDEP:
			case STATS_T_TEST_INDEPU:
			case STATS_T_TEST_ONE:
			case STATS_T_TEST_PAIRED:
			case STATS_WSR_TEST:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STOP:
			case STORAGE:
			case STORE:
			case STREAMS:
			case STREAM:
			case STRICT:
			case STRING:
			case STRIPE_COLUMNS:
			case STRIPE_WIDTH:
			case STRIP:
			case STRUCTURE:
			case SUBMULTISET:
			case SUBPARTITION_REL:
			case SUBPARTITIONS:
			case SUBPARTITION:
			case SUBQUERIES:
			case SUBQUERY_PRUNING:
			case SUBSCRIBE:
			case SUBSET:
			case SUBSTITUTABLE:
			case SUBSTR2:
			case SUBSTR4:
			case SUBSTRB:
			case SUBSTRC:
			case SUBTYPE:
			case SUCCESSFUL:
			case SUCCESS:
			case SUMMARY:
			case SUPPLEMENTAL:
			case SUSPEND:
			case SWAP_JOIN_INPUTS:
			case SWITCHOVER:
			case SWITCH:
			case SYNCHRONOUS:
			case SYNC:
			case SYS:
			case SYSASM:
			case SYS_AUDIT:
			case SYSAUX:
			case SYSBACKUP:
			case SYS_CHECKACL:
			case SYS_CHECK_PRIVILEGE:
			case SYS_CONNECT_BY_PATH:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSDBA:
			case SYS_DBURIGEN:
			case SYSDG:
			case SYS_DL_CURSOR:
			case SYS_DM_RXFORM_CHR:
			case SYS_DM_RXFORM_NUM:
			case SYS_DOM_COMPARE:
			case SYS_DST_PRIM2SEC:
			case SYS_DST_SEC2PRIM:
			case SYS_ET_BFILE_TO_RAW:
			case SYS_ET_BLOB_TO_IMAGE:
			case SYS_ET_IMAGE_TO_BLOB:
			case SYS_ET_RAW_TO_BFILE:
			case SYS_EXTPDTXT:
			case SYS_EXTRACT_UTC:
			case SYS_FBT_INSDEL:
			case SYS_FILTER_ACLS:
			case SYS_FNMATCHES:
			case SYS_FNREPLACE:
			case SYS_GET_ACLIDS:
			case SYS_GET_COL_ACLIDS:
			case SYS_GET_PRIVILEGES:
			case SYS_GETTOKENID:
			case SYS_GETXTIVAL:
			case SYS_GUID:
			case SYSGUID:
			case SYSKM:
			case SYS_MAKE_XMLNODEID:
			case SYS_MAKEXML:
			case SYS_MKXMLATTR:
			case SYS_MKXTI:
			case SYSOBJ:
			case SYS_OP_ADT2BIN:
			case SYS_OP_ADTCONS:
			case SYS_OP_ALSCRVAL:
			case SYS_OP_ATG:
			case SYS_OP_BIN2ADT:
			case SYS_OP_BITVEC:
			case SYS_OP_BL2R:
			case SYS_OP_BLOOM_FILTER_LIST:
			case SYS_OP_BLOOM_FILTER:
			case SYS_OP_C2C:
			case SYS_OP_CAST:
			case SYS_OP_CEG:
			case SYS_OP_CL2C:
			case SYS_OP_COMBINED_HASH:
			case SYS_OP_COMP:
			case SYS_OP_CONVERT:
			case SYS_OP_COUNTCHG:
			case SYS_OP_CSCONV:
			case SYS_OP_CSCONVTEST:
			case SYS_OP_CSR:
			case SYS_OP_CSX_PATCH:
			case SYS_OP_CYCLED_SEQ:
			case SYS_OP_DECOMP:
			case SYS_OP_DESCEND:
			case SYS_OP_DISTINCT:
			case SYS_OP_DRA:
			case SYS_OP_DUMP:
			case SYS_OP_DV_CHECK:
			case SYS_OP_ENFORCE_NOT_NULL:
			case SYSOPER:
			case SYS_OP_EXTRACT:
			case SYS_OP_GROUPING:
			case SYS_OP_GUID:
			case SYS_OP_HASH:
			case SYS_OP_IIX:
			case SYS_OP_ITR:
			case SYS_OP_KEY_VECTOR_CREATE:
			case SYS_OP_KEY_VECTOR_FILTER_LIST:
			case SYS_OP_KEY_VECTOR_FILTER:
			case SYS_OP_KEY_VECTOR_SUCCEEDED:
			case SYS_OP_KEY_VECTOR_USE:
			case SYS_OP_LBID:
			case SYS_OP_LOBLOC2BLOB:
			case SYS_OP_LOBLOC2CLOB:
			case SYS_OP_LOBLOC2ID:
			case SYS_OP_LOBLOC2NCLOB:
			case SYS_OP_LOBLOC2TYP:
			case SYS_OP_LSVI:
			case SYS_OP_LVL:
			case SYS_OP_MAKEOID:
			case SYS_OP_MAP_NONNULL:
			case SYS_OP_MSR:
			case SYS_OP_NICOMBINE:
			case SYS_OP_NIEXTRACT:
			case SYS_OP_NII:
			case SYS_OP_NIX:
			case SYS_OP_NOEXPAND:
			case SYS_OP_NTCIMG:
			case SYS_OP_NUMTORAW:
			case SYS_OP_OIDVALUE:
			case SYS_OP_OPNSIZE:
			case SYS_OP_PAR_1:
			case SYS_OP_PARGID_1:
			case SYS_OP_PARGID:
			case SYS_OP_PAR:
			case SYS_OP_PART_ID:
			case SYS_OP_PIVOT:
			case SYS_OP_R2O:
			case SYS_OP_RAWTONUM:
			case SYS_OP_RDTM:
			case SYS_OP_REF:
			case SYS_OP_RMTD:
			case SYS_OP_ROWIDTOOBJ:
			case SYS_OP_RPB:
			case SYS_OPTLOBPRBSC:
			case SYS_OP_TOSETID:
			case SYS_OP_TPR:
			case SYS_OP_TRTB:
			case SYS_OPTXICMP:
			case SYS_OPTXQCASTASNQ:
			case SYS_OP_UNDESCEND:
			case SYS_OP_VECAND:
			case SYS_OP_VECBIT:
			case SYS_OP_VECOR:
			case SYS_OP_VECXOR:
			case SYS_OP_VERSION:
			case SYS_OP_VREF:
			case SYS_OP_VVD:
			case SYS_OP_XMLCONS_FOR_CSX:
			case SYS_OP_XPTHATG:
			case SYS_OP_XPTHIDX:
			case SYS_OP_XPTHOP:
			case SYS_OP_XTXT2SQLT:
			case SYS_OP_ZONE_ID:
			case SYS_ORDERKEY_DEPTH:
			case SYS_ORDERKEY_MAXCHILD:
			case SYS_ORDERKEY_PARENT:
			case SYS_PARALLEL_TXN:
			case SYS_PATHID_IS_ATTR:
			case SYS_PATHID_IS_NMSPC:
			case SYS_PATHID_LASTNAME:
			case SYS_PATHID_LASTNMSPC:
			case SYS_PATH_REVERSE:
			case SYS_PXQEXTRACT:
			case SYS_RAW_TO_XSID:
			case SYS_RID_ORDER:
			case SYS_ROW_DELTA:
			case SYS_SC_2_XMLT:
			case SYS_SYNRCIREDO:
			case SYSTEM_DEFINED:
			case SYSTEM:
			case SYSTIMESTAMP:
			case SYS_TYPEID:
			case SYS_UMAKEXML:
			case SYS_XMLANALYZE:
			case SYS_XMLCONTAINS:
			case SYS_XMLCONV:
			case SYS_XMLEXNSURI:
			case SYS_XMLGEN:
			case SYS_XMLI_LOC_ISNODE:
			case SYS_XMLI_LOC_ISTEXT:
			case SYS_XMLINSTR:
			case SYS_XMLLOCATOR_GETSVAL:
			case SYS_XMLNODEID_GETCID:
			case SYS_XMLNODEID_GETLOCATOR:
			case SYS_XMLNODEID_GETOKEY:
			case SYS_XMLNODEID_GETPATHID:
			case SYS_XMLNODEID_GETPTRID:
			case SYS_XMLNODEID_GETRID:
			case SYS_XMLNODEID_GETSVAL:
			case SYS_XMLNODEID_GETTID:
			case SYS_XMLNODEID:
			case SYS_XMLT_2_SC:
			case SYS_XMLTRANSLATE:
			case SYS_XMLTYPE2SQL:
			case SYS_XQ_ASQLCNV:
			case SYS_XQ_ATOMCNVCHK:
			case SYS_XQBASEURI:
			case SYS_XQCASTABLEERRH:
			case SYS_XQCODEP2STR:
			case SYS_XQCODEPEQ:
			case SYS_XQCON2SEQ:
			case SYS_XQCONCAT:
			case SYS_XQDELETE:
			case SYS_XQDFLTCOLATION:
			case SYS_XQDOC:
			case SYS_XQDOCURI:
			case SYS_XQDURDIV:
			case SYS_XQED4URI:
			case SYS_XQENDSWITH:
			case SYS_XQERRH:
			case SYS_XQERR:
			case SYS_XQESHTMLURI:
			case SYS_XQEXLOBVAL:
			case SYS_XQEXSTWRP:
			case SYS_XQEXTRACT:
			case SYS_XQEXTRREF:
			case SYS_XQEXVAL:
			case SYS_XQFB2STR:
			case SYS_XQFNBOOL:
			case SYS_XQFNCMP:
			case SYS_XQFNDATIM:
			case SYS_XQFNLNAME:
			case SYS_XQFNNM:
			case SYS_XQFNNSURI:
			case SYS_XQFNPREDTRUTH:
			case SYS_XQFNQNM:
			case SYS_XQFNROOT:
			case SYS_XQFORMATNUM:
			case SYS_XQFTCONTAIN:
			case SYS_XQFUNCR:
			case SYS_XQGETCONTENT:
			case SYS_XQINDXOF:
			case SYS_XQINSERT:
			case SYS_XQINSPFX:
			case SYS_XQIRI2URI:
			case SYS_XQLANG:
			case SYS_XQLLNMFRMQNM:
			case SYS_XQMKNODEREF:
			case SYS_XQNILLED:
			case SYS_XQNODENAME:
			case SYS_XQNORMSPACE:
			case SYS_XQNORMUCODE:
			case SYS_XQ_NRNG:
			case SYS_XQNSP4PFX:
			case SYS_XQNSPFRMQNM:
			case SYS_XQPFXFRMQNM:
			case SYS_XQ_PKSQL2XML:
			case SYS_XQPOLYABS:
			case SYS_XQPOLYADD:
			case SYS_XQPOLYCEL:
			case SYS_XQPOLYCSTBL:
			case SYS_XQPOLYCST:
			case SYS_XQPOLYDIV:
			case SYS_XQPOLYFLR:
			case SYS_XQPOLYMOD:
			case SYS_XQPOLYMUL:
			case SYS_XQPOLYRND:
			case SYS_XQPOLYSQRT:
			case SYS_XQPOLYSUB:
			case SYS_XQPOLYUMUS:
			case SYS_XQPOLYUPLS:
			case SYS_XQPOLYVEQ:
			case SYS_XQPOLYVGE:
			case SYS_XQPOLYVGT:
			case SYS_XQPOLYVLE:
			case SYS_XQPOLYVLT:
			case SYS_XQPOLYVNE:
			case SYS_XQREF2VAL:
			case SYS_XQRENAME:
			case SYS_XQREPLACE:
			case SYS_XQRESVURI:
			case SYS_XQRNDHALF2EVN:
			case SYS_XQRSLVQNM:
			case SYS_XQRYENVPGET:
			case SYS_XQRYVARGET:
			case SYS_XQRYWRP:
			case SYS_XQSEQ2CON4XC:
			case SYS_XQSEQ2CON:
			case SYS_XQSEQDEEPEQ:
			case SYS_XQSEQINSB:
			case SYS_XQSEQRM:
			case SYS_XQSEQRVS:
			case SYS_XQSEQSUB:
			case SYS_XQSEQTYPMATCH:
			case SYS_XQSTARTSWITH:
			case SYS_XQSTATBURI:
			case SYS_XQSTR2CODEP:
			case SYS_XQSTRJOIN:
			case SYS_XQSUBSTRAFT:
			case SYS_XQSUBSTRBEF:
			case SYS_XQTOKENIZE:
			case SYS_XQTREATAS:
			case SYS_XQ_UPKXML2SQL:
			case SYS_XQXFORM:
			case SYS_XSID_TO_RAW:
			case SYS_ZMAP_FILTER:
			case SYS_ZMAP_REFRESH:
			case T_LETTER:
			case TABLE_LOOKUP_BY_NL:
			case TABLESPACE_NO:
			case TABLESPACE:
			case TABLES:
			case TABLE_STATS:
			case TABLE:
			case TABNO:
			case TAG:
			case TANH:
			case TAN:
			case TBLORIDXPARTNUM:
			case TEMPFILE:
			case TEMPLATE:
			case TEMPORARY:
			case TEMP_TABLE:
			case TEST:
			case TEXT:
			case THAN:
			case THEN:
			case THE:
			case THREAD:
			case THROUGH:
			case TIER:
			case TIES:
			case TIMEOUT:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMES:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_OFFSET:
			case TIMEZONE_REGION:
			case TIME_ZONE:
			case TIMING:
			case TIV_GB:
			case TIV_SSF:
			case TO_ACLID:
			case TO_BINARY_DOUBLE:
			case TO_BINARY_FLOAT:
			case TO_BLOB:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCHAR:
			case TO_NCLOB:
			case TO_NUMBER:
			case TOPLEVEL:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_TIME:
			case TO_TIME_TZ:
			case TO_YMINTERVAL:
			case TRACE:
			case TRACING:
			case TRACKING:
			case TRAILING:
			case TRANSACTION:
			case TRANSFORM:
			case TRANSFORM_DISTINCT_AGG:
			case TRANSITIONAL:
			case TRANSITION:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGERS:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TRUNC:
			case TRUSTED:
			case TRUST:
			case TUNING:
			case TX:
			case TYPES:
			case TYPE:
			case TZ_OFFSET:
			case UB2:
			case UBA:
			case UCS2:
			case UID:
			case UNARCHIVED:
			case UNBOUNDED:
			case UNBOUND:
			case UNCONDITIONAL:
			case UNDER:
			case UNDO:
			case UNDROP:
			case UNIFORM:
			case UNISTR:
			case UNLIMITED:
			case UNLOAD:
			case UNLOCK:
			case UNMATCHED:
			case UNNEST_INNERJ_DISTINCT_VIEW:
			case UNNEST_NOSEMIJ_NODISTINCTVIEW:
			case UNNEST_SEMIJ_VIEW:
			case UNNEST:
			case UNPACKED:
			case UNPIVOT:
			case UNPLUG:
			case UNPROTECTED:
			case UNQUIESCE:
			case UNRECOVERABLE:
			case UNRESTRICTED:
			case UNSUBSCRIBE:
			case UNTIL:
			case UNUSABLE:
			case UNUSED:
			case UPDATABLE:
			case UPDATED:
			case UPDATEXML:
			case UPD_INDEXES:
			case UPD_JOININDEX:
			case UPGRADE:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USABLE:
			case USAGE:
			case USE_ANTI:
			case USE_CONCAT:
			case USE_CUBE:
			case USE_HASH_AGGREGATION:
			case USE_HASH_GBY_FOR_PUSHDOWN:
			case USE_HASH:
			case USE_HIDDEN_PARTITIONS:
			case USE_INVISIBLE_INDEXES:
			case USE_MERGE_CARTESIAN:
			case USE_MERGE:
			case USE_NL:
			case USE_NL_WITH_INDEX:
			case USE_PRIVATE_OUTLINES:
			case USER_DATA:
			case USER_DEFINED:
			case USERENV:
			case USERGROUP:
			case USER_RECYCLEBIN:
			case USERS:
			case USER_TABLESPACES:
			case USER:
			case USE_SEMI:
			case USE_STORED_OUTLINES:
			case USE_TTT_FOR_GSETS:
			case USE:
			case USE_VECTOR_AGGREGATION:
			case USE_WEAK_NAME_RESL:
			case USING_NO_EXPAND:
			case USING:
			case UTF16BE:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case V1:
			case V2:
			case VALIDATE:
			case VALIDATE_CONVERSION:
			case VALIDATION:
			case VALID_TIME_END:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VAR_POP:
			case VARRAYS:
			case VARRAY:
			case VAR_SAMP:
			case VARYING:
			case VECTOR_READ_TRACE:
			case VECTOR_READ:
			case VECTOR_TRANSFORM_DIMS:
			case VECTOR_TRANSFORM_FACT:
			case VECTOR_TRANSFORM:
			case VERIFIER:
			case VERIFY:
			case VERSIONING:
			case VERSIONS_ENDSCN:
			case VERSIONS_ENDTIME:
			case VERSIONS_OPERATION:
			case VERSIONS_STARTSCN:
			case VERSIONS_STARTTIME:
			case VERSIONS:
			case VERSIONS_XID:
			case VERSION:
			case VIOLATION:
			case VIRTUAL:
			case VISIBILITY:
			case VISIBLE:
			case VOLUME:
			case VSIZE:
			case WAIT:
			case WALLET:
			case WARNING:
			case WEEKS:
			case WEEK:
			case WELLFORMED:
			case WHENEVER:
			case WHEN:
			case WHILE:
			case WHITESPACE:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WITH_PLSQL:
			case WORK:
			case WRAPPED:
			case WRAPPER:
			case WRITE:
			case XDB_FASTPATH_INSERT:
			case X_DYN_PRUNE:
			case XID:
			case XML2OBJECT:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCDATA:
			case XMLCOLATTVAL:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDIFF:
			case XML_DML_RWT_STMT:
			case XMLELEMENT:
			case XMLEXISTS2:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLINDEX_REWRITE_IN_SELECT:
			case XMLINDEX_REWRITE:
			case XMLINDEX_SEL_IDX_TBL:
			case XMLISNODE:
			case XMLISVALID:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPATCH:
			case XMLPI:
			case XMLQUERYVAL:
			case XMLQUERY:
			case XMLROOT:
			case XMLSCHEMA:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTRANSFORMBLOB:
			case XMLTRANSFORM:
			case XMLTYPE:
			case XML:
			case XPATHTABLE:
			case XS_SYS_CONTEXT:
			case XS:
			case YEARS:
			case YEAR:
			case YEAROFWEEK:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONEMAP:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case BLOCKCHAIN:
			case COLLATE:
			case COLLATION:
			case DEFINITION:
			case DUPLICATED:
			case EXTENDED:
			case HASHING:
			case IDLE:
			case IMMUTABLE:
			case ORACLE_DATAPUMP:
			case ORACLE_HDFS:
			case ORACLE_HIVE:
			case ORACLE_LOADER:
			case SHARDED:
			case ISOLATE:
			case ROOT:
			case UNITE:
			case ALGORITHM:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MEMOPTIMIZE:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case PERIOD:
			case DELIMITED_ID:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1509);
				variable_name();
				}
				break;
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1510);
				match(CHAR_STRING);
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1511);
				match(NATIONAL_CHAR_STRING_LIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_identifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(1514);
				match(INTRODUCER);
				setState(1515);
				char_set_name();
				}
			}

			setState(1518);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Id_expressionContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode DELIMITED_ID() { return getToken(PlSqlParser.DELIMITED_ID, 0); }
		public Id_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterId_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitId_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitId_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Id_expressionContext id_expression() throws RecognitionException {
		Id_expressionContext _localctx = new Id_expressionContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_id_expression);
		try {
			setState(1522);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABS:
			case ABSENT:
			case ACCESS:
			case ACCESSED:
			case ACCOUNT:
			case ACL:
			case ACOS:
			case ACROSS:
			case ACTION:
			case ACTIONS:
			case ACTIVATE:
			case ACTIVE:
			case ACTIVE_COMPONENT:
			case ACTIVE_DATA:
			case ACTIVE_FUNCTION:
			case ACTIVE_TAG:
			case ACTIVITY:
			case ADAPTIVE_PLAN:
			case ADD:
			case ADD_COLUMN:
			case ADD_GROUP:
			case ADD_MONTHS:
			case ADJ_DATE:
			case ADMIN:
			case ADMINISTER:
			case ADMINISTRATOR:
			case ADVANCED:
			case ADVISE:
			case ADVISOR:
			case AFD_DISKSTRING:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALIAS:
			case ALLOCATE:
			case ALLOW:
			case ALL_ROWS:
			case ALTERNATE:
			case ALWAYS:
			case ANALYTIC:
			case ANALYZE:
			case ANCESTOR:
			case ANCILLARY:
			case AND_EQUAL:
			case ANOMALY:
			case ANSI_REARCH:
			case ANTIJOIN:
			case ANYSCHEMA:
			case APPEND:
			case APPENDCHILDXML:
			case APPEND_VALUES:
			case APPLICATION:
			case APPLY:
			case APPROX_COUNT_DISTINCT:
			case ARCHIVAL:
			case ARCHIVE:
			case ARCHIVED:
			case ARCHIVELOG:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASIS:
			case ASSEMBLY:
			case ASSIGN:
			case ASSOCIATE:
			case ASYNC:
			case ASYNCHRONOUS:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AUTHENTICATED:
			case AUTHENTICATION:
			case AUTHID:
			case AUTHORIZATION:
			case AUTOALLOCATE:
			case AUTO:
			case AUTOEXTEND:
			case AUTO_LOGIN:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case AUTO_REOPTIMIZE:
			case AVAILABILITY:
			case AVRO:
			case BACKGROUND:
			case BACKINGFILE:
			case BACKUP:
			case BACKUPS:
			case BASIC:
			case BASICFILE:
			case BATCH:
			case BATCHSIZE:
			case BATCH_TABLE_ACCESS_BY_ROWID:
			case BECOME:
			case BEFORE:
			case BEGIN:
			case BEGINNING:
			case BEGIN_OUTLINE_DATA:
			case BEHALF:
			case BEQUEATH:
			case BFILE:
			case BFILENAME:
			case BIGFILE:
			case BINARY:
			case BINARY_DOUBLE:
			case BINARY_DOUBLE_INFINITY:
			case BINARY_DOUBLE_NAN:
			case BINARY_FLOAT:
			case BINARY_FLOAT_INFINITY:
			case BINARY_FLOAT_NAN:
			case BINARY_INTEGER:
			case BIND_AWARE:
			case BINDING:
			case BIN_TO_NUM:
			case BITAND:
			case BITMAP_AND:
			case BITMAP:
			case BITMAPS:
			case BITMAP_TREE:
			case BITS:
			case BLOB:
			case BLOCK:
			case BLOCK_RANGE:
			case BLOCKS:
			case BLOCKSIZE:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BOUND:
			case BRANCH:
			case BREADTH:
			case BROADCAST:
			case BSON:
			case BUFFER:
			case BUFFER_CACHE:
			case BUFFER_POOL:
			case BUILD:
			case BULK:
			case BYPASS_RECURSIVE_CHECK:
			case BYPASS_UJVC:
			case BYTE:
			case CACHE:
			case CACHE_CB:
			case CACHE_INSTANCES:
			case CACHE_TEMP_TABLE:
			case CACHING:
			case CALCULATED:
			case CALLBACK:
			case CALL:
			case CANCEL:
			case CAPACITY:
			case CAPTION:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CASESENSITIVE:
			case CATEGORY:
			case CDBDEFAULT:
			case CEIL:
			case CELL_FLASH_CACHE:
			case CERTIFICATE:
			case CFILE:
			case CHAINED:
			case CHANGE:
			case CHANGE_DUPKEY_ERROR_INDEX:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHECK_ACL_REWRITE:
			case CHECKPOINT:
			case CHILD:
			case CHOOSE:
			case CHR:
			case CHUNK:
			case CLASS:
			case CLASSIFICATION:
			case CLASSIFIER:
			case CLAUSE:
			case CLEAN:
			case CLEANUP:
			case CLEAR:
			case C_LETTER:
			case CLIENT:
			case CLOB:
			case CLONE:
			case CLOSE_CACHED_OPEN_CURSORS:
			case CLOSE:
			case CLUSTER_BY_ROWID:
			case CLUSTER:
			case CLUSTER_DETAILS:
			case CLUSTER_DISTANCE:
			case CLUSTER_ID:
			case CLUSTERING:
			case CLUSTERING_FACTOR:
			case CLUSTER_PROBABILITY:
			case CLUSTER_SET:
			case COALESCE:
			case COALESCE_SQ:
			case COARSE:
			case CO_AUTH_IND:
			case COLD:
			case COLLECT:
			case COLUMNAR:
			case COLUMN_AUTH_INDICATOR:
			case COLUMN:
			case COLUMNS:
			case COLUMN_STATS:
			case COLUMN_VALUE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMMON:
			case COMMON_DATA:
			case COMPACT:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPLIANCE:
			case COMPONENT:
			case COMPONENTS:
			case COMPOSE:
			case COMPOSITE:
			case COMPOSITE_LIMIT:
			case COMPOUND:
			case COMPUTE:
			case CONCAT:
			case CON_DBID_TO_ID:
			case CONDITIONAL:
			case CONDITION:
			case CONFIRM:
			case CONFORMING:
			case CON_GUID_TO_ID:
			case CON_ID:
			case CON_NAME_TO_ID:
			case CONNECT_BY_CB_WHR_ONLY:
			case CONNECT_BY_COMBINE_SW:
			case CONNECT_BY_COST_BASED:
			case CONNECT_BY_ELIM_DUPS:
			case CONNECT_BY_FILTERING:
			case CONNECT_BY_ISCYCLE:
			case CONNECT_BY_ISLEAF:
			case CONNECT_BY_ROOT:
			case CONNECT_TIME:
			case CONSIDER:
			case CONSISTENT:
			case CONSTANT:
			case CONST:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINER:
			case CONTAINERS:
			case CONTAINERS_DEFAULT:
			case CONTAINER_DATA:
			case CONTAINER_MAP:
			case CONTENT:
			case CONTENTS:
			case CONTEXT:
			case CONTINUE:
			case CONTROLFILE:
			case CON_UID_TO_ID:
			case CONVERT:
			case CONVERSION:
			case COOKIE:
			case COPY:
			case CORR_K:
			case CORR_S:
			case CORRUPTION:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COST_XML_QUERY_REWRITE:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CPU_COSTING:
			case CPU_PER_CALL:
			case CPU_PER_SESSION:
			case CRASH:
			case CREATE_FILE_DEST:
			case CREATE_STORED_OUTLINES:
			case CREATION:
			case CREDENTIAL:
			case CRITICAL:
			case CROSS:
			case CROSSEDITION:
			case CSCONVERT:
			case CUBE_AJ:
			case CUBE:
			case CUBE_GB:
			case CUBE_SJ:
			case CUME_DISTM:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURRENTV:
			case CURSOR:
			case CURSOR_SHARING_EXACT:
			case CURSOR_SPECIFIC_SEGMENT:
			case CUSTOMDATUM:
			case CV:
			case CYCLE:
			case DANGLING:
			case DATABASE:
			case DATA:
			case DATAFILE:
			case DATAFILES:
			case DATAMOVEMENT:
			case DATAOBJNO:
			case DATAOBJ_TO_MAT_PARTITION:
			case DATAOBJ_TO_PARTITION:
			case DATAPUMP:
			case DATA_SECURITY_REWRITE_LIMIT:
			case DATE_MODE:
			case DAY:
			case DAYOFWEEK:
			case DAYS:
			case DBA:
			case DBA_RECYCLEBIN:
			case DBMS_STATS:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DB_UNIQUE_NAME:
			case DB_VERSION:
			case DDL:
			case DEALLOCATE:
			case DEBUG:
			case DEBUGGER:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECORRELATE:
			case DECR:
			case DECREMENT:
			case DECRYPT:
			case DEDUPLICATE:
			case DEFAULTS:
			case DEFAULT_COLLATION:
			case DEFAULT_CREDENTIAL:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINED:
			case DEFINE:
			case DEFINER:
			case DEGREE:
			case DELAY:
			case DELEGATE:
			case DELETE_ALL:
			case DELETE:
			case DELETEXML:
			case DEMAND:
			case DENSE_RANKM:
			case DEPENDENT:
			case DEPTH:
			case DEQUEUE:
			case DEREF:
			case DEREF_NO_REWRITE:
			case DESCRIPTION:
			case DESTROY:
			case DETACHED:
			case DETERMINES:
			case DETERMINISTIC:
			case DICTIONARY:
			case DIMENSION:
			case DIMENSIONS:
			case DIRECT_LOAD:
			case DIRECTORY:
			case DIRECT_PATH:
			case DISABLE_ALL:
			case DISABLE:
			case DISABLE_PARALLEL_DML:
			case DISABLE_PRESET:
			case DISABLE_RPKE:
			case DISALLOW:
			case DISASSOCIATE:
			case DISCARD:
			case DISCONNECT:
			case DISK:
			case DISKGROUP:
			case DISKS:
			case DISMOUNT:
			case DISTINGUISHED:
			case DISTRIBUTED:
			case DISTRIBUTE:
			case DML:
			case DML_UPDATE:
			case DOCFIDELITY:
			case DOCUMENT:
			case DOMAIN_INDEX_FILTER:
			case DOMAIN_INDEX_NO_SORT:
			case DOMAIN_INDEX_SORT:
			case DOY:
			case DOUBLE:
			case DOWNGRADE:
			case DRIVING_SITE:
			case DROP_COLUMN:
			case DROP_GROUP:
			case DSINTERVAL_UNCONSTRAINED:
			case DST_UPGRADE_INSERT_CONV:
			case DUMP:
			case DUPLICATE:
			case DV:
			case DYNAMIC:
			case DYNAMIC_SAMPLING:
			case DYNAMIC_SAMPLING_EST_CDN:
			case E_LETTER:
			case EACH:
			case EDITIONABLE:
			case EDITION:
			case EDITIONING:
			case EDITIONS:
			case ELEMENT:
			case ELIM_GROUPBY:
			case ELIMINATE_JOIN:
			case ELIMINATE_OBY:
			case ELIMINATE_OUTER_JOIN:
			case EM:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE_ALL:
			case ENABLE:
			case ENABLE_PARALLEL_DML:
			case ENABLE_PRESET:
			case ENCODING:
			case ENCRYPT:
			case ENCRYPTION:
			case END_OUTLINE_DATA:
			case ENFORCED:
			case ENFORCE:
			case ENQUEUE:
			case ENTERPRISE:
			case ENTITYESCAPING:
			case ENTRY:
			case EQUIPART:
			case ERR:
			case ERROR_ARGUMENT:
			case ERROR:
			case ERROR_ON_OVERLAP_TIME:
			case ERRORS:
			case ESCAPE:
			case ESTIMATE:
			case EVAL:
			case EVALNAME:
			case EVALUATE:
			case EVALUATION:
			case EVENTS:
			case EVERY:
			case EXCEPT:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCHANGE:
			case EXCLUDE:
			case EXCLUDING:
			case EXECUTE:
			case EXEMPT:
			case EXISTING:
			case EXISTS:
			case EXISTSNODE:
			case EXIT:
			case EXPAND_GSET_TO_UNION:
			case EXPAND_TABLE:
			case EXP:
			case EXPIRE:
			case EXPLAIN:
			case EXPLOSION:
			case EXPORT:
			case EXPR_CORR_CHECK:
			case EXPRESS:
			case EXTENDS:
			case EXTENT:
			case EXTENTS:
			case EXTERNAL:
			case EXTERNALLY:
			case EXTRACTCLOBXML:
			case EXTRACT:
			case EXTRACTVALUE:
			case EXTRA:
			case FACILITY:
			case FACT:
			case FACTOR:
			case FACTORIZE_JOIN:
			case FAILED:
			case FAILED_LOGIN_ATTEMPTS:
			case FAILGROUP:
			case FAILOVER:
			case FAILURE:
			case FALSE:
			case FAMILY:
			case FAR:
			case FAST:
			case FASTSTART:
			case FBTSCAN:
			case FEATURE:
			case FEATURE_DETAILS:
			case FEATURE_ID:
			case FEATURE_SET:
			case FEATURE_VALUE:
			case FETCH:
			case FILE:
			case FILE_NAME_CONVERT:
			case FILEGROUP:
			case FILESTORE:
			case FILESYSTEM_LIKE_LOGGING:
			case FILTER:
			case FINAL:
			case FINE:
			case FINISH:
			case FIRST:
			case FIRSTM:
			case FIRST_ROWS:
			case FIRST_VALUE:
			case FIXED_VIEW_DATA:
			case FLAGGER:
			case FLASHBACK:
			case FLASH_CACHE:
			case FLOAT:
			case FLOB:
			case FLEX:
			case FLOOR:
			case FLUSH:
			case FOLDER:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FORCE_XML_QUERY_REWRITE:
			case FOREIGN:
			case FOREVER:
			case FORMAT:
			case FORWARD:
			case FRAGMENT_NUMBER:
			case FREELIST:
			case FREELISTS:
			case FREEPOOLS:
			case FRESH:
			case FROM_TZ:
			case FULL:
			case FULL_OUTER_JOIN_TO_OUTER:
			case FUNCTION:
			case FUNCTIONS:
			case FTP:
			case G_LETTER:
			case GATHER_OPTIMIZER_STATISTICS:
			case GATHER_PLAN_STATISTICS:
			case GBY_CONC_ROLLUP:
			case GBY_PUSHDOWN:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GLOBALLY:
			case GLOBAL_NAME:
			case GLOBAL_TOPIC_ENABLED:
			case GROUP_BY:
			case GROUP_ID:
			case GROUPING:
			case GROUPING_ID:
			case GROUPS:
			case GUARANTEED:
			case GUARANTEE:
			case GUARD:
			case HALF_YEARS:
			case HASH_AJ:
			case HASH:
			case HASHKEYS:
			case HASH_SJ:
			case HEADER:
			case HEAP:
			case HELP:
			case HEXTORAW:
			case HEXTOREF:
			case HIDDEN_KEYWORD:
			case HIDE:
			case HIER_ORDER:
			case HIERARCHICAL:
			case HIERARCHY:
			case HIGH:
			case HINTSET_BEGIN:
			case HINTSET_END:
			case HOT:
			case HOUR:
			case HOURS:
			case HTTP:
			case HWM_BROKERED:
			case HYBRID:
			case H_LETTER:
			case IDENTIFIER:
			case IDENTITY:
			case IDGENERATORS:
			case ID:
			case IDLE_TIME:
			case IF:
			case IGNORE:
			case IGNORE_OPTIM_EMBEDDED_HINTS:
			case IGNORE_ROW_ON_DUPKEY_INDEX:
			case IGNORE_WHERE_CLAUSE:
			case ILM:
			case IMMEDIATE:
			case IMPACT:
			case IMPORT:
			case INACTIVE:
			case INACTIVE_ACCOUNT_TIME:
			case INCLUDE:
			case INCLUDE_VERSION:
			case INCLUDING:
			case INCREMENTAL:
			case INCREMENT:
			case INCR:
			case INDENT:
			case INDEX_ASC:
			case INDEX_COMBINE:
			case INDEX_DESC:
			case INDEXED:
			case INDEXES:
			case INDEX_FFS:
			case INDEX_FILTER:
			case INDEXING:
			case INDEX_JOIN:
			case INDEX_ROWS:
			case INDEX_RRS:
			case INDEX_RS_ASC:
			case INDEX_RS_DESC:
			case INDEX_RS:
			case INDEX_SCAN:
			case INDEX_SKIP_SCAN:
			case INDEX_SS_ASC:
			case INDEX_SS_DESC:
			case INDEX_SS:
			case INDEX_STATS:
			case INDEXTYPE:
			case INDEXTYPES:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INFORMATIONAL:
			case INHERIT:
			case INITCAP:
			case INITIAL:
			case INITIALIZED:
			case INITIALLY:
			case INITRANS:
			case INLINE:
			case INLINE_XMLTYPE_NT:
			case INMEMORY:
			case IN_MEMORY_METADATA:
			case INMEMORY_PRUNING:
			case INNER:
			case INOUT:
			case INPLACE:
			case INSERTCHILDXMLAFTER:
			case INSERTCHILDXMLBEFORE:
			case INSERTCHILDXML:
			case INSERTXMLAFTER:
			case INSERTXMLBEFORE:
			case INSTANCE:
			case INSTANCES:
			case INSTANTIABLE:
			case INSTANTLY:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTEGER:
			case INTERLEAVED:
			case INTERMEDIATE:
			case INTERNAL_CONVERT:
			case INTERNAL_USE:
			case INTERPRETED:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case INVISIBLE:
			case IN_XQUERY:
			case IS_LEAF:
			case ISOLATION:
			case ISOLATION_LEVEL:
			case ITERATE:
			case ITERATION_NUMBER:
			case JAVA:
			case JOB:
			case JOIN:
			case JSON_ARRAYAGG:
			case JSON_ARRAY:
			case JSON_EQUAL:
			case JSON_EXISTS2:
			case JSON_EXISTS:
			case JSONGET:
			case JSON:
			case JSON_OBJECTAGG:
			case JSON_OBJECT:
			case JSONPARSE:
			case JSON_QUERY:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_TEXTCONTAINS2:
			case JSON_TEXTCONTAINS:
			case JSON_TRANSFORM:
			case JSON_VALUE:
			case K_LETTER:
			case KEEP_DUPLICATES:
			case KEEP:
			case KERBEROS:
			case KEY:
			case KEY_LENGTH:
			case KEYSIZE:
			case KEYS:
			case KEYSTORE:
			case KILL:
			case LABEL:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LATERAL:
			case LAX:
			case LAYER:
			case LDAP_REGISTRATION_ENABLED:
			case LDAP_REGISTRATION:
			case LDAP_REG_SYNC_INTERVAL:
			case LEAF:
			case LEAD_CDB:
			case LEAD_CDB_URI:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LESS:
			case LEVEL:
			case LEVEL_NAME:
			case LEVELS:
			case LIBRARY:
			case LIFECYCLE:
			case LIFE:
			case LIFETIME:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_EXPAND:
			case LIMIT:
			case LINEAR:
			case LINK:
			case LIST:
			case LN:
			case LNNVL:
			case LOAD:
			case LOB:
			case LOBNVL:
			case LOBS:
			case LOCAL_INDEXES:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCATOR:
			case LOCKDOWN:
			case LOCKED:
			case LOCKING:
			case LOGFILE:
			case LOGFILES:
			case LOGGING:
			case LOGICAL:
			case LOGICAL_READS_PER_CALL:
			case LOGICAL_READS_PER_SESSION:
			case LOG:
			case LOGMINING:
			case LOGOFF:
			case LOGON:
			case LOG_READ_ONLY_VIOLATIONS:
			case LONG:
			case LOOP:
			case LOST:
			case LOWER:
			case LOW:
			case LPAD:
			case LTRIM:
			case M_LETTER:
			case MAIN:
			case MAKE_REF:
			case MANAGED:
			case MANAGE:
			case MANAGEMENT:
			case MANAGER:
			case MANDATORY:
			case MANUAL:
			case MAP:
			case MAPPING:
			case MASTER:
			case MATCHED:
			case MATCHES:
			case MATCH:
			case MATCH_NUMBER:
			case MATCH_RECOGNIZE:
			case MATERIALIZED:
			case MATERIALIZE:
			case MAXARCHLOGS:
			case MAXDATAFILES:
			case MAXEXTENTS:
			case MAXIMIZE:
			case MAXINSTANCES:
			case MAXLOGFILES:
			case MAXLOGHISTORY:
			case MAXLOGMEMBERS:
			case MAX_SHARED_TEMP_SIZE:
			case MAXSIZE:
			case MAXTRANS:
			case MAXVALUE:
			case MEASURE:
			case MEASURES:
			case MEDIUM:
			case MEMBER:
			case MEMBER_CAPTION:
			case MEMBER_DESCRIPTION:
			case MEMBER_NAME:
			case MEMBER_UNIQUE_NAME:
			case MEMCOMPRESS:
			case MEMORY:
			case MERGEACTIONS:
			case MERGE_AJ:
			case MERGE_CONST_ON:
			case MERGE:
			case MERGE_SJ:
			case METADATA:
			case METHOD:
			case MIGRATE:
			case MIGRATION:
			case MINEXTENTS:
			case MINIMIZE:
			case MINIMUM:
			case MINING:
			case MINUS_NULL:
			case MINUTE:
			case MINUTES:
			case MINVALUE:
			case MIRRORCOLD:
			case MIRRORHOT:
			case MIRROR:
			case MISSING:
			case MISMATCH:
			case MLSLABEL:
			case MODEL_COMPILE_SUBQUERY:
			case MODEL_DONTVERIFY_UNIQUENESS:
			case MODEL_DYNAMIC_SUBQUERY:
			case MODEL_MIN_ANALYSIS:
			case MODEL:
			case MODEL_NB:
			case MODEL_NO_ANALYSIS:
			case MODEL_PBY:
			case MODEL_PUSH_REF:
			case MODEL_SV:
			case MODIFICATION:
			case MODIFY_COLUMN_TYPE:
			case MODIFY:
			case MOD:
			case MODULE:
			case MONITORING:
			case MONITOR:
			case MONTH:
			case MONTHS_BETWEEN:
			case MONTHS:
			case MOUNT:
			case MOUNTPATH:
			case MOUNTPOINT:
			case MOVEMENT:
			case MOVE:
			case MULTIDIMENSIONAL:
			case MULTISET:
			case MV_MERGE:
			case NAMED:
			case NAME:
			case NAMESPACE:
			case NAN:
			case NANVL:
			case NATIONAL:
			case NATIVE_FULL_OUTER_JOIN:
			case NATIVE:
			case NATURAL:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NEEDED:
			case NEG:
			case NESTED:
			case NESTED_TABLE_FAST_INSERT:
			case NESTED_TABLE_GET_REFS:
			case NESTED_TABLE_ID:
			case NESTED_TABLE_SET_REFS:
			case NESTED_TABLE_SET_SETID:
			case NETWORK:
			case NEVER:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NEXT:
			case NL_AJ:
			case NLJ_BATCHING:
			case NLJ_INDEX_FILTER:
			case NLJ_INDEX_SCAN:
			case NLJ_PREFETCH:
			case NLS_CALENDAR:
			case NLS_CHARACTERSET:
			case NLS_CHARSET_DECL_LEN:
			case NLS_CHARSET_ID:
			case NLS_CHARSET_NAME:
			case NLS_COMP:
			case NLS_CURRENCY:
			case NLS_DATE_FORMAT:
			case NLS_DATE_LANGUAGE:
			case NLS_INITCAP:
			case NLS_ISO_CURRENCY:
			case NL_SJ:
			case NLS_LANG:
			case NLS_LANGUAGE:
			case NLS_LENGTH_SEMANTICS:
			case NLS_LOWER:
			case NLS_NCHAR_CONV_EXCP:
			case NLS_NUMERIC_CHARACTERS:
			case NLS_SORT:
			case NLSSORT:
			case NLS_SPECIAL_CHARS:
			case NLS_TERRITORY:
			case NLS_UPPER:
			case NO_ACCESS:
			case NO_ADAPTIVE_PLAN:
			case NO_ANSI_REARCH:
			case NOAPPEND:
			case NOARCHIVELOG:
			case NOAUDIT:
			case NO_AUTO_REOPTIMIZE:
			case NO_BASETABLE_MULTIMV_REWRITE:
			case NO_BATCH_TABLE_ACCESS_BY_ROWID:
			case NO_BIND_AWARE:
			case NO_BUFFER:
			case NOCACHE:
			case NO_CARTESIAN:
			case NO_CHECK_ACL_REWRITE:
			case NO_CLUSTER_BY_ROWID:
			case NO_CLUSTERING:
			case NO_COALESCE_SQ:
			case NO_COMMON_DATA:
			case NO_CONNECT_BY_CB_WHR_ONLY:
			case NO_CONNECT_BY_COMBINE_SW:
			case NO_CONNECT_BY_COST_BASED:
			case NO_CONNECT_BY_ELIM_DUPS:
			case NO_CONNECT_BY_FILTERING:
			case NOCOPY:
			case NO_COST_XML_QUERY_REWRITE:
			case NO_CPU_COSTING:
			case NOCPU_COSTING:
			case NOCYCLE:
			case NO_DATA_SECURITY_REWRITE:
			case NO_DECORRELATE:
			case NODELAY:
			case NO_DOMAIN_INDEX_FILTER:
			case NO_DST_UPGRADE_INSERT_CONV:
			case NO_ELIM_GROUPBY:
			case NO_ELIMINATE_JOIN:
			case NO_ELIMINATE_OBY:
			case NO_ELIMINATE_OUTER_JOIN:
			case NOENTITYESCAPING:
			case NO_EXPAND_GSET_TO_UNION:
			case NO_EXPAND:
			case NO_EXPAND_TABLE:
			case NO_FACT:
			case NO_FACTORIZE_JOIN:
			case NO_FILTERING:
			case NOFORCE:
			case NO_FULL_OUTER_JOIN_TO_OUTER:
			case NO_GATHER_OPTIMIZER_STATISTICS:
			case NO_GBY_PUSHDOWN:
			case NOGUARANTEE:
			case NO_INDEX_FFS:
			case NO_INDEX:
			case NO_INDEX_SS:
			case NO_INMEMORY:
			case NO_INMEMORY_PRUNING:
			case NOKEEP:
			case NO_LOAD:
			case NOLOCAL:
			case NOLOGGING:
			case NOMAPPING:
			case NOMAXVALUE:
			case NO_MERGE:
			case NOMINIMIZE:
			case NOMINVALUE:
			case NO_MODEL_PUSH_REF:
			case NO_MONITORING:
			case NOMONITORING:
			case NO_MONITOR:
			case NO_MULTIMV_REWRITE:
			case NO_NATIVE_FULL_OUTER_JOIN:
			case NONBLOCKING:
			case NONEDITIONABLE:
			case NONE:
			case NO_NLJ_BATCHING:
			case NO_NLJ_PREFETCH:
			case NO:
			case NONSCHEMA:
			case NO_OBJECT_LINK:
			case NOORDER:
			case NO_ORDER_ROLLUPS:
			case NO_OUTER_JOIN_TO_ANTI:
			case NO_OUTER_JOIN_TO_INNER:
			case NOOVERRIDE:
			case NO_PARALLEL_INDEX:
			case NOPARALLEL_INDEX:
			case NO_PARALLEL:
			case NOPARALLEL:
			case NO_PARTIAL_COMMIT:
			case NO_PARTIAL_JOIN:
			case NO_PARTIAL_ROLLUP_PUSHDOWN:
			case NOPARTITION:
			case NO_PLACE_DISTINCT:
			case NO_PLACE_GROUP_BY:
			case NO_PQ_CONCURRENT_UNION:
			case NO_PQ_MAP:
			case NOPROMPT:
			case NO_PQ_REPLICATE:
			case NO_PQ_SKEW:
			case NO_PRUNE_GSETS:
			case NO_PULL_PRED:
			case NO_PUSH_PRED:
			case NO_PUSH_SUBQ:
			case NO_PX_FAULT_TOLERANCE:
			case NO_PX_JOIN_FILTER:
			case NO_QKN_BUFF:
			case NO_QUERY_TRANSFORMATION:
			case NO_REF_CASCADE:
			case NORELOCATE:
			case NORELY:
			case NOREPAIR:
			case NOREPLAY:
			case NORESETLOGS:
			case NO_RESULT_CACHE:
			case NOREVERSE:
			case NO_REWRITE:
			case NOREWRITE:
			case NORMAL:
			case NO_ROOT_SW_FOR_LOCAL:
			case NOROWDEPENDENCIES:
			case NOSCHEMACHECK:
			case NOSEGMENT:
			case NO_SEMIJOIN:
			case NO_SEMI_TO_INNER:
			case NO_SET_TO_JOIN:
			case NOSORT:
			case NO_SQL_TRANSLATION:
			case NO_SQL_TUNE:
			case NO_STAR_TRANSFORMATION:
			case NO_STATEMENT_QUEUING:
			case NO_STATS_GSETS:
			case NOSTRICT:
			case NO_SUBQUERY_PRUNING:
			case NO_SUBSTRB_PAD:
			case NO_SWAP_JOIN_INPUTS:
			case NOSWITCH:
			case NO_TABLE_LOOKUP_BY_NL:
			case NO_TEMP_TABLE:
			case NOTHING:
			case NOTIFICATION:
			case NO_TRANSFORM_DISTINCT_AGG:
			case NO_UNNEST:
			case NO_USE_CUBE:
			case NO_USE_HASH_AGGREGATION:
			case NO_USE_HASH_GBY_FOR_PUSHDOWN:
			case NO_USE_HASH:
			case NO_USE_INVISIBLE_INDEXES:
			case NO_USE_MERGE:
			case NO_USE_NL:
			case NO_USE_VECTOR_AGGREGATION:
			case NOVALIDATE:
			case NO_VECTOR_TRANSFORM_DIMS:
			case NO_VECTOR_TRANSFORM_FACT:
			case NO_VECTOR_TRANSFORM:
			case NO_XDB_FASTPATH_INSERT:
			case NO_XML_DML_REWRITE:
			case NO_XMLINDEX_REWRITE_IN_SELECT:
			case NO_XMLINDEX_REWRITE:
			case NO_XML_QUERY_REWRITE:
			case NO_ZONEMAP:
			case NTH_VALUE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUM_INDEX_KEYS:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT2XML:
			case OBJECT:
			case OBJ_ID:
			case OBJNO:
			case OBJNO_REUSE:
			case OCCURENCES:
			case OFFLINE:
			case OFF:
			case OFFSET:
			case OIDINDEX:
			case OID:
			case OLAP:
			case OLD:
			case OLD_PUSH_PRED:
			case OLS:
			case OLTP:
			case OMIT:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPAQUE:
			case OPAQUE_TRANSFORM:
			case OPAQUE_XCANONICAL:
			case OPCODE:
			case OPEN:
			case OPERATIONS:
			case OPERATOR:
			case OPT_ESTIMATE:
			case OPTIMAL:
			case OPTIMIZE:
			case OPTIMIZER_FEATURES_ENABLE:
			case OPTIMIZER_GOAL:
			case OPT_PARAM:
			case ORA_BRANCH:
			case ORA_CHECK_ACL:
			case ORA_CHECK_PRIVILEGE:
			case ORA_CLUSTERING:
			case ORADATA:
			case ORADEBUG:
			case ORA_DST_AFFECTED:
			case ORA_DST_CONVERT:
			case ORA_DST_ERROR:
			case ORA_GET_ACLIDS:
			case ORA_GET_PRIVILEGES:
			case ORA_HASH:
			case ORA_INVOKING_USERID:
			case ORA_INVOKING_USER:
			case ORA_INVOKING_XS_USER_GUID:
			case ORA_INVOKING_XS_USER:
			case ORA_RAWCOMPARE:
			case ORA_RAWCONCAT:
			case ORA_ROWSCN:
			case ORA_ROWSCN_RAW:
			case ORA_ROWVERSION:
			case ORA_TABVERSION:
			case ORA_WRITE_TIME:
			case ORDERED:
			case ORDERED_PREDICATES:
			case ORDINALITY:
			case OR_EXPAND:
			case ORGANIZATION:
			case OR_PREDICATES:
			case OSERROR:
			case OTHER:
			case OUTER_JOIN_TO_ANTI:
			case OUTER_JOIN_TO_INNER:
			case OUTER:
			case OUTLINE_LEAF:
			case OUTLINE:
			case OUT_OF_LINE:
			case OUT:
			case OVERFLOW_NOMOVE:
			case OVERFLOW:
			case OVERLAPS:
			case OVER:
			case OVERRIDING:
			case OWNER:
			case OWNERSHIP:
			case OWN:
			case P_LETTER:
			case PACKAGE:
			case PACKAGES:
			case PARALLEL_ENABLE:
			case PARALLEL_INDEX:
			case PARALLEL:
			case PARAMETERS:
			case PARAM:
			case PARENT:
			case PARENT_LEVEL_NAME:
			case PARENT_UNIQUE_NAME:
			case PARITY:
			case PARTIAL_JOIN:
			case PARTIALLY:
			case PARTIAL:
			case PARTIAL_ROLLUP_PUSHDOWN:
			case PARTITION_HASH:
			case PARTITION_LIST:
			case PARTITION:
			case PARTITION_RANGE:
			case PARTITIONS:
			case PARTNUMINST:
			case PASSING:
			case PASSWORD_GRACE_TIME:
			case PASSWORD_LIFE_TIME:
			case PASSWORD_LOCK_TIME:
			case PASSWORD:
			case PASSWORD_REUSE_MAX:
			case PASSWORD_REUSE_TIME:
			case PASSWORD_ROLLOVER_TIME:
			case PASSWORD_VERIFY_FUNCTION:
			case PAST:
			case PATCH:
			case PATH:
			case PATH_PREFIX:
			case PATHS:
			case PATTERN:
			case PBL_HS_BEGIN:
			case PBL_HS_END:
			case PCTINCREASE:
			case PCTTHRESHOLD:
			case PCTUSED:
			case PCTVERSION:
			case PENDING:
			case PERCENT_KEYWORD:
			case PERCENT_RANKM:
			case PERFORMANCE:
			case PERIOD_KEYWORD:
			case PERMANENT:
			case PERMISSION:
			case PERMUTE:
			case PER:
			case PFILE:
			case PHYSICAL:
			case PIKEY:
			case PIPELINED:
			case PIV_GB:
			case PIVOT:
			case PIV_SSF:
			case PLACE_DISTINCT:
			case PLACE_GROUP_BY:
			case PLAN:
			case PLSCOPE_SETTINGS:
			case PLS_INTEGER:
			case PLSQL_CCFLAGS:
			case PLSQL_CODE_TYPE:
			case PLSQL_DEBUG:
			case PLSQL_OPTIMIZE_LEVEL:
			case PLSQL_WARNINGS:
			case PLUGGABLE:
			case PMEM:
			case POINT:
			case POLICY:
			case POOL_16K:
			case POOL_2K:
			case POOL_32K:
			case POOL_4K:
			case POOL_8K:
			case POSITIVEN:
			case POSITIVE:
			case POST_TRANSACTION:
			case POWERMULTISET_BY_CARDINALITY:
			case POWERMULTISET:
			case POWER:
			case PQ_CONCURRENT_UNION:
			case PQ_DISTRIBUTE:
			case PQ_DISTRIBUTE_WINDOW:
			case PQ_FILTER:
			case PQ_MAP:
			case PQ_NOMAP:
			case PQ_REPLICATE:
			case PQ_SKEW:
			case PRAGMA:
			case PREBUILT:
			case PRECEDES:
			case PRECEDING:
			case PRECISION:
			case PRECOMPUTE_SUBQUERY:
			case PREDICATE_REORDERS:
			case PRELOAD:
			case PREPARE:
			case PRESENTNNV:
			case PRESENT:
			case PRESENTV:
			case PRESERVE_OID:
			case PRESERVE:
			case PRETTY:
			case PREVIOUS:
			case PREV:
			case PRIMARY:
			case PRINTBLOBTOCLOB:
			case PRIORITY:
			case PRIVATE:
			case PRIVATE_SGA:
			case PRIVILEGED:
			case PRIVILEGE:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCESS:
			case PROFILE:
			case PROGRAM:
			case PROJECT:
			case PROPAGATE:
			case PROPERTY:
			case PROTECTED:
			case PROTECTION:
			case PROTOCOL:
			case PROXY:
			case PRUNING:
			case PUBLIC:
			case PULL_PRED:
			case PURGE:
			case PUSH_PRED:
			case PUSH_SUBQ:
			case PX_FAULT_TOLERANCE:
			case PX_GRANULE:
			case PX_JOIN_FILTER:
			case QB_NAME:
			case QUARTER:
			case QUARTERS:
			case QUERY_BLOCK:
			case QUERY:
			case QUEUE_CURR:
			case QUEUE:
			case QUEUE_ROWP:
			case QUIESCE:
			case QUORUM:
			case QUOTA:
			case QUOTAGROUP:
			case RAISE:
			case RANDOM_LOCAL:
			case RANDOM:
			case RANGE:
			case RANKM:
			case RAPIDLY:
			case RAW:
			case RAWTOHEX:
			case RAWTONHEX:
			case RBA:
			case RBO_OUTLINE:
			case RDBA:
			case READ:
			case READS:
			case REALM:
			case REAL:
			case REBALANCE:
			case REBUILD:
			case RECORD:
			case RECORDS_PER_BLOCK:
			case RECOVERABLE:
			case RECOVER:
			case RECOVERY:
			case RECYCLEBIN:
			case RECYCLE:
			case REDACTION:
			case REDEFINE:
			case REDO:
			case REDUCED:
			case REDUNDANCY:
			case REF_CASCADE_CURSOR:
			case REFERENCED:
			case REFERENCE:
			case REFERENCES:
			case REFERENCING:
			case REF:
			case REFRESH:
			case REFTOHEX:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REGISTER:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REGULAR:
			case REJECT:
			case REKEY:
			case RELATIONAL:
			case RELOCATE:
			case RELY:
			case REMAINDER:
			case REMOTE:
			case REMOTE_MAPPED:
			case REMOVE:
			case RENAME:
			case REPAIR:
			case REPEAT:
			case REPLACE:
			case REPLICATION:
			case REQUIRED:
			case RESETLOGS:
			case RESET:
			case RESIZE:
			case RESOLVE:
			case RESOLVER:
			case RESPECT:
			case RESTART:
			case RESTORE_AS_INTERVALS:
			case RESTORE:
			case RESTRICT_ALL_REF_CONS:
			case RESTRICTED:
			case RESTRICT_REFERENCES:
			case RESTRICT:
			case RESULT_CACHE:
			case RESULT:
			case RESUMABLE:
			case RESUME:
			case RETENTION:
			case RETRY_ON_ROW_CHANGE:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REWRITE_OR_ERROR:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLESET:
			case ROLES:
			case ROLLBACK:
			case ROLLING:
			case ROLLUP:
			case ROWDEPENDENCIES:
			case ROWID_MAPPING_TABLE:
			case ROWID:
			case ROWIDTOCHAR:
			case ROWIDTONCHAR:
			case ROW_LENGTH:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULE:
			case RULES:
			case RUNNING:
			case SALT:
			case SAMPLE:
			case SAVE_AS_INTERVALS:
			case SAVEPOINT:
			case SAVE:
			case SB4:
			case SCALE_ROWS:
			case SCALE:
			case SCAN_INSTANCES:
			case SCAN:
			case SCHEDULER:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN_ASCENDING:
			case SCN:
			case SCOPE:
			case SCRUB:
			case SD_ALL:
			case SD_INHIBIT:
			case SDO_GEOM_MBR:
			case SDO_GEOMETRY:
			case SD_SHOW:
			case SEARCH:
			case SECOND:
			case SECONDS:
			case SECRET:
			case SECUREFILE_DBA:
			case SECUREFILE:
			case SECURITY:
			case SEED:
			case SEG_BLOCK:
			case SEG_FILE:
			case SEGMENT:
			case SELECTIVITY:
			case SELF:
			case SEMIJOIN_DRIVER:
			case SEMIJOIN:
			case SEMI_TO_INNER:
			case SEQUENCED:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERIAL:
			case SERVERERROR:
			case SERVICE_NAME_CONVERT:
			case SERVICE:
			case SERVICES:
			case SESSION_CACHED_CURSORS:
			case SESSION:
			case SESSIONS_PER_USER:
			case SESSIONTIMEZONE:
			case SESSIONTZNAME:
			case SET:
			case SETS:
			case SETTINGS:
			case SET_TO_JOIN:
			case SEVERE:
			case SHARDSPACE:
			case SHARED_POOL:
			case SHARED:
			case SHARING:
			case SHELFLIFE:
			case SHOW:
			case SHRINK:
			case SHUTDOWN:
			case SIBLINGS:
			case SID:
			case SITE:
			case SIGNAL_COMPONENT:
			case SIGNAL_FUNCTION:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SIMPLE:
			case SINGLE:
			case SINGLETASK:
			case SINH:
			case SIN:
			case SKIP_EXT_OPTIMIZER:
			case SKIP_:
			case SKIP_UNQ_UNUSABLE_IDX:
			case SKIP_UNUSABLE_INDEXES:
			case SMALLFILE:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SORT:
			case SOUNDEX:
			case SOURCE_FILE_DIRECTORY:
			case SOURCE_FILE_NAME_CONVERT:
			case SOURCE:
			case SPACE_KEYWORD:
			case SPECIFICATION:
			case SPFILE:
			case SPLIT:
			case SPREADSHEET:
			case SQLDATA:
			case SQLERROR:
			case SQLLDR:
			case SQL:
			case SQL_MACRO:
			case SQL_TRACE:
			case SQL_TRANSLATION_PROFILE:
			case SQRT:
			case STALE:
			case STANDALONE:
			case STANDARD:
			case STANDARD_HASH:
			case STANDBY_MAX_DATA_DELAY:
			case STANDBYS:
			case STANDBY:
			case STAR:
			case STAR_TRANSFORMATION:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT_QUEUING:
			case STATEMENTS:
			case STATEMENT:
			case STATE:
			case STATIC:
			case STATISTICS:
			case STATS_BINOMIAL_TEST:
			case STATS_CROSSTAB:
			case STATS_F_TEST:
			case STATS_KS_TEST:
			case STATS_MODE:
			case STATS_MW_TEST:
			case STATS_ONE_WAY_ANOVA:
			case STATS_T_TEST_INDEP:
			case STATS_T_TEST_INDEPU:
			case STATS_T_TEST_ONE:
			case STATS_T_TEST_PAIRED:
			case STATS_WSR_TEST:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STOP:
			case STORAGE:
			case STORE:
			case STREAMS:
			case STREAM:
			case STRICT:
			case STRING:
			case STRIPE_COLUMNS:
			case STRIPE_WIDTH:
			case STRIP:
			case STRUCTURE:
			case SUBMULTISET:
			case SUBPARTITION_REL:
			case SUBPARTITIONS:
			case SUBPARTITION:
			case SUBQUERIES:
			case SUBQUERY_PRUNING:
			case SUBSCRIBE:
			case SUBSET:
			case SUBSTITUTABLE:
			case SUBSTR2:
			case SUBSTR4:
			case SUBSTRB:
			case SUBSTRC:
			case SUBTYPE:
			case SUCCESSFUL:
			case SUCCESS:
			case SUMMARY:
			case SUPPLEMENTAL:
			case SUSPEND:
			case SWAP_JOIN_INPUTS:
			case SWITCHOVER:
			case SWITCH:
			case SYNCHRONOUS:
			case SYNC:
			case SYS:
			case SYSASM:
			case SYS_AUDIT:
			case SYSAUX:
			case SYSBACKUP:
			case SYS_CHECKACL:
			case SYS_CHECK_PRIVILEGE:
			case SYS_CONNECT_BY_PATH:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSDBA:
			case SYS_DBURIGEN:
			case SYSDG:
			case SYS_DL_CURSOR:
			case SYS_DM_RXFORM_CHR:
			case SYS_DM_RXFORM_NUM:
			case SYS_DOM_COMPARE:
			case SYS_DST_PRIM2SEC:
			case SYS_DST_SEC2PRIM:
			case SYS_ET_BFILE_TO_RAW:
			case SYS_ET_BLOB_TO_IMAGE:
			case SYS_ET_IMAGE_TO_BLOB:
			case SYS_ET_RAW_TO_BFILE:
			case SYS_EXTPDTXT:
			case SYS_EXTRACT_UTC:
			case SYS_FBT_INSDEL:
			case SYS_FILTER_ACLS:
			case SYS_FNMATCHES:
			case SYS_FNREPLACE:
			case SYS_GET_ACLIDS:
			case SYS_GET_COL_ACLIDS:
			case SYS_GET_PRIVILEGES:
			case SYS_GETTOKENID:
			case SYS_GETXTIVAL:
			case SYS_GUID:
			case SYSGUID:
			case SYSKM:
			case SYS_MAKE_XMLNODEID:
			case SYS_MAKEXML:
			case SYS_MKXMLATTR:
			case SYS_MKXTI:
			case SYSOBJ:
			case SYS_OP_ADT2BIN:
			case SYS_OP_ADTCONS:
			case SYS_OP_ALSCRVAL:
			case SYS_OP_ATG:
			case SYS_OP_BIN2ADT:
			case SYS_OP_BITVEC:
			case SYS_OP_BL2R:
			case SYS_OP_BLOOM_FILTER_LIST:
			case SYS_OP_BLOOM_FILTER:
			case SYS_OP_C2C:
			case SYS_OP_CAST:
			case SYS_OP_CEG:
			case SYS_OP_CL2C:
			case SYS_OP_COMBINED_HASH:
			case SYS_OP_COMP:
			case SYS_OP_CONVERT:
			case SYS_OP_COUNTCHG:
			case SYS_OP_CSCONV:
			case SYS_OP_CSCONVTEST:
			case SYS_OP_CSR:
			case SYS_OP_CSX_PATCH:
			case SYS_OP_CYCLED_SEQ:
			case SYS_OP_DECOMP:
			case SYS_OP_DESCEND:
			case SYS_OP_DISTINCT:
			case SYS_OP_DRA:
			case SYS_OP_DUMP:
			case SYS_OP_DV_CHECK:
			case SYS_OP_ENFORCE_NOT_NULL:
			case SYSOPER:
			case SYS_OP_EXTRACT:
			case SYS_OP_GROUPING:
			case SYS_OP_GUID:
			case SYS_OP_HASH:
			case SYS_OP_IIX:
			case SYS_OP_ITR:
			case SYS_OP_KEY_VECTOR_CREATE:
			case SYS_OP_KEY_VECTOR_FILTER_LIST:
			case SYS_OP_KEY_VECTOR_FILTER:
			case SYS_OP_KEY_VECTOR_SUCCEEDED:
			case SYS_OP_KEY_VECTOR_USE:
			case SYS_OP_LBID:
			case SYS_OP_LOBLOC2BLOB:
			case SYS_OP_LOBLOC2CLOB:
			case SYS_OP_LOBLOC2ID:
			case SYS_OP_LOBLOC2NCLOB:
			case SYS_OP_LOBLOC2TYP:
			case SYS_OP_LSVI:
			case SYS_OP_LVL:
			case SYS_OP_MAKEOID:
			case SYS_OP_MAP_NONNULL:
			case SYS_OP_MSR:
			case SYS_OP_NICOMBINE:
			case SYS_OP_NIEXTRACT:
			case SYS_OP_NII:
			case SYS_OP_NIX:
			case SYS_OP_NOEXPAND:
			case SYS_OP_NTCIMG:
			case SYS_OP_NUMTORAW:
			case SYS_OP_OIDVALUE:
			case SYS_OP_OPNSIZE:
			case SYS_OP_PAR_1:
			case SYS_OP_PARGID_1:
			case SYS_OP_PARGID:
			case SYS_OP_PAR:
			case SYS_OP_PART_ID:
			case SYS_OP_PIVOT:
			case SYS_OP_R2O:
			case SYS_OP_RAWTONUM:
			case SYS_OP_RDTM:
			case SYS_OP_REF:
			case SYS_OP_RMTD:
			case SYS_OP_ROWIDTOOBJ:
			case SYS_OP_RPB:
			case SYS_OPTLOBPRBSC:
			case SYS_OP_TOSETID:
			case SYS_OP_TPR:
			case SYS_OP_TRTB:
			case SYS_OPTXICMP:
			case SYS_OPTXQCASTASNQ:
			case SYS_OP_UNDESCEND:
			case SYS_OP_VECAND:
			case SYS_OP_VECBIT:
			case SYS_OP_VECOR:
			case SYS_OP_VECXOR:
			case SYS_OP_VERSION:
			case SYS_OP_VREF:
			case SYS_OP_VVD:
			case SYS_OP_XMLCONS_FOR_CSX:
			case SYS_OP_XPTHATG:
			case SYS_OP_XPTHIDX:
			case SYS_OP_XPTHOP:
			case SYS_OP_XTXT2SQLT:
			case SYS_OP_ZONE_ID:
			case SYS_ORDERKEY_DEPTH:
			case SYS_ORDERKEY_MAXCHILD:
			case SYS_ORDERKEY_PARENT:
			case SYS_PARALLEL_TXN:
			case SYS_PATHID_IS_ATTR:
			case SYS_PATHID_IS_NMSPC:
			case SYS_PATHID_LASTNAME:
			case SYS_PATHID_LASTNMSPC:
			case SYS_PATH_REVERSE:
			case SYS_PXQEXTRACT:
			case SYS_RAW_TO_XSID:
			case SYS_RID_ORDER:
			case SYS_ROW_DELTA:
			case SYS_SC_2_XMLT:
			case SYS_SYNRCIREDO:
			case SYSTEM_DEFINED:
			case SYSTEM:
			case SYSTIMESTAMP:
			case SYS_TYPEID:
			case SYS_UMAKEXML:
			case SYS_XMLANALYZE:
			case SYS_XMLCONTAINS:
			case SYS_XMLCONV:
			case SYS_XMLEXNSURI:
			case SYS_XMLGEN:
			case SYS_XMLI_LOC_ISNODE:
			case SYS_XMLI_LOC_ISTEXT:
			case SYS_XMLINSTR:
			case SYS_XMLLOCATOR_GETSVAL:
			case SYS_XMLNODEID_GETCID:
			case SYS_XMLNODEID_GETLOCATOR:
			case SYS_XMLNODEID_GETOKEY:
			case SYS_XMLNODEID_GETPATHID:
			case SYS_XMLNODEID_GETPTRID:
			case SYS_XMLNODEID_GETRID:
			case SYS_XMLNODEID_GETSVAL:
			case SYS_XMLNODEID_GETTID:
			case SYS_XMLNODEID:
			case SYS_XMLT_2_SC:
			case SYS_XMLTRANSLATE:
			case SYS_XMLTYPE2SQL:
			case SYS_XQ_ASQLCNV:
			case SYS_XQ_ATOMCNVCHK:
			case SYS_XQBASEURI:
			case SYS_XQCASTABLEERRH:
			case SYS_XQCODEP2STR:
			case SYS_XQCODEPEQ:
			case SYS_XQCON2SEQ:
			case SYS_XQCONCAT:
			case SYS_XQDELETE:
			case SYS_XQDFLTCOLATION:
			case SYS_XQDOC:
			case SYS_XQDOCURI:
			case SYS_XQDURDIV:
			case SYS_XQED4URI:
			case SYS_XQENDSWITH:
			case SYS_XQERRH:
			case SYS_XQERR:
			case SYS_XQESHTMLURI:
			case SYS_XQEXLOBVAL:
			case SYS_XQEXSTWRP:
			case SYS_XQEXTRACT:
			case SYS_XQEXTRREF:
			case SYS_XQEXVAL:
			case SYS_XQFB2STR:
			case SYS_XQFNBOOL:
			case SYS_XQFNCMP:
			case SYS_XQFNDATIM:
			case SYS_XQFNLNAME:
			case SYS_XQFNNM:
			case SYS_XQFNNSURI:
			case SYS_XQFNPREDTRUTH:
			case SYS_XQFNQNM:
			case SYS_XQFNROOT:
			case SYS_XQFORMATNUM:
			case SYS_XQFTCONTAIN:
			case SYS_XQFUNCR:
			case SYS_XQGETCONTENT:
			case SYS_XQINDXOF:
			case SYS_XQINSERT:
			case SYS_XQINSPFX:
			case SYS_XQIRI2URI:
			case SYS_XQLANG:
			case SYS_XQLLNMFRMQNM:
			case SYS_XQMKNODEREF:
			case SYS_XQNILLED:
			case SYS_XQNODENAME:
			case SYS_XQNORMSPACE:
			case SYS_XQNORMUCODE:
			case SYS_XQ_NRNG:
			case SYS_XQNSP4PFX:
			case SYS_XQNSPFRMQNM:
			case SYS_XQPFXFRMQNM:
			case SYS_XQ_PKSQL2XML:
			case SYS_XQPOLYABS:
			case SYS_XQPOLYADD:
			case SYS_XQPOLYCEL:
			case SYS_XQPOLYCSTBL:
			case SYS_XQPOLYCST:
			case SYS_XQPOLYDIV:
			case SYS_XQPOLYFLR:
			case SYS_XQPOLYMOD:
			case SYS_XQPOLYMUL:
			case SYS_XQPOLYRND:
			case SYS_XQPOLYSQRT:
			case SYS_XQPOLYSUB:
			case SYS_XQPOLYUMUS:
			case SYS_XQPOLYUPLS:
			case SYS_XQPOLYVEQ:
			case SYS_XQPOLYVGE:
			case SYS_XQPOLYVGT:
			case SYS_XQPOLYVLE:
			case SYS_XQPOLYVLT:
			case SYS_XQPOLYVNE:
			case SYS_XQREF2VAL:
			case SYS_XQRENAME:
			case SYS_XQREPLACE:
			case SYS_XQRESVURI:
			case SYS_XQRNDHALF2EVN:
			case SYS_XQRSLVQNM:
			case SYS_XQRYENVPGET:
			case SYS_XQRYVARGET:
			case SYS_XQRYWRP:
			case SYS_XQSEQ2CON4XC:
			case SYS_XQSEQ2CON:
			case SYS_XQSEQDEEPEQ:
			case SYS_XQSEQINSB:
			case SYS_XQSEQRM:
			case SYS_XQSEQRVS:
			case SYS_XQSEQSUB:
			case SYS_XQSEQTYPMATCH:
			case SYS_XQSTARTSWITH:
			case SYS_XQSTATBURI:
			case SYS_XQSTR2CODEP:
			case SYS_XQSTRJOIN:
			case SYS_XQSUBSTRAFT:
			case SYS_XQSUBSTRBEF:
			case SYS_XQTOKENIZE:
			case SYS_XQTREATAS:
			case SYS_XQ_UPKXML2SQL:
			case SYS_XQXFORM:
			case SYS_XSID_TO_RAW:
			case SYS_ZMAP_FILTER:
			case SYS_ZMAP_REFRESH:
			case T_LETTER:
			case TABLE_LOOKUP_BY_NL:
			case TABLESPACE_NO:
			case TABLESPACE:
			case TABLES:
			case TABLE_STATS:
			case TABLE:
			case TABNO:
			case TAG:
			case TANH:
			case TAN:
			case TBLORIDXPARTNUM:
			case TEMPFILE:
			case TEMPLATE:
			case TEMPORARY:
			case TEMP_TABLE:
			case TEST:
			case TEXT:
			case THAN:
			case THEN:
			case THE:
			case THREAD:
			case THROUGH:
			case TIER:
			case TIES:
			case TIMEOUT:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMES:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_OFFSET:
			case TIMEZONE_REGION:
			case TIME_ZONE:
			case TIMING:
			case TIV_GB:
			case TIV_SSF:
			case TO_ACLID:
			case TO_BINARY_DOUBLE:
			case TO_BINARY_FLOAT:
			case TO_BLOB:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCHAR:
			case TO_NCLOB:
			case TO_NUMBER:
			case TOPLEVEL:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_TIME:
			case TO_TIME_TZ:
			case TO_YMINTERVAL:
			case TRACE:
			case TRACING:
			case TRACKING:
			case TRAILING:
			case TRANSACTION:
			case TRANSFORM:
			case TRANSFORM_DISTINCT_AGG:
			case TRANSITIONAL:
			case TRANSITION:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGERS:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TRUNC:
			case TRUSTED:
			case TRUST:
			case TUNING:
			case TX:
			case TYPES:
			case TYPE:
			case TZ_OFFSET:
			case UB2:
			case UBA:
			case UCS2:
			case UID:
			case UNARCHIVED:
			case UNBOUNDED:
			case UNBOUND:
			case UNCONDITIONAL:
			case UNDER:
			case UNDO:
			case UNDROP:
			case UNIFORM:
			case UNISTR:
			case UNLIMITED:
			case UNLOAD:
			case UNLOCK:
			case UNMATCHED:
			case UNNEST_INNERJ_DISTINCT_VIEW:
			case UNNEST_NOSEMIJ_NODISTINCTVIEW:
			case UNNEST_SEMIJ_VIEW:
			case UNNEST:
			case UNPACKED:
			case UNPIVOT:
			case UNPLUG:
			case UNPROTECTED:
			case UNQUIESCE:
			case UNRECOVERABLE:
			case UNRESTRICTED:
			case UNSUBSCRIBE:
			case UNTIL:
			case UNUSABLE:
			case UNUSED:
			case UPDATABLE:
			case UPDATED:
			case UPDATEXML:
			case UPD_INDEXES:
			case UPD_JOININDEX:
			case UPGRADE:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USABLE:
			case USAGE:
			case USE_ANTI:
			case USE_CONCAT:
			case USE_CUBE:
			case USE_HASH_AGGREGATION:
			case USE_HASH_GBY_FOR_PUSHDOWN:
			case USE_HASH:
			case USE_HIDDEN_PARTITIONS:
			case USE_INVISIBLE_INDEXES:
			case USE_MERGE_CARTESIAN:
			case USE_MERGE:
			case USE_NL:
			case USE_NL_WITH_INDEX:
			case USE_PRIVATE_OUTLINES:
			case USER_DATA:
			case USER_DEFINED:
			case USERENV:
			case USERGROUP:
			case USER_RECYCLEBIN:
			case USERS:
			case USER_TABLESPACES:
			case USER:
			case USE_SEMI:
			case USE_STORED_OUTLINES:
			case USE_TTT_FOR_GSETS:
			case USE:
			case USE_VECTOR_AGGREGATION:
			case USE_WEAK_NAME_RESL:
			case USING_NO_EXPAND:
			case USING:
			case UTF16BE:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case V1:
			case V2:
			case VALIDATE:
			case VALIDATE_CONVERSION:
			case VALIDATION:
			case VALID_TIME_END:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VAR_POP:
			case VARRAYS:
			case VARRAY:
			case VAR_SAMP:
			case VARYING:
			case VECTOR_READ_TRACE:
			case VECTOR_READ:
			case VECTOR_TRANSFORM_DIMS:
			case VECTOR_TRANSFORM_FACT:
			case VECTOR_TRANSFORM:
			case VERIFIER:
			case VERIFY:
			case VERSIONING:
			case VERSIONS_ENDSCN:
			case VERSIONS_ENDTIME:
			case VERSIONS_OPERATION:
			case VERSIONS_STARTSCN:
			case VERSIONS_STARTTIME:
			case VERSIONS:
			case VERSIONS_XID:
			case VERSION:
			case VIOLATION:
			case VIRTUAL:
			case VISIBILITY:
			case VISIBLE:
			case VOLUME:
			case VSIZE:
			case WAIT:
			case WALLET:
			case WARNING:
			case WEEKS:
			case WEEK:
			case WELLFORMED:
			case WHENEVER:
			case WHEN:
			case WHILE:
			case WHITESPACE:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WITH_PLSQL:
			case WORK:
			case WRAPPED:
			case WRAPPER:
			case WRITE:
			case XDB_FASTPATH_INSERT:
			case X_DYN_PRUNE:
			case XID:
			case XML2OBJECT:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCDATA:
			case XMLCOLATTVAL:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDIFF:
			case XML_DML_RWT_STMT:
			case XMLELEMENT:
			case XMLEXISTS2:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLINDEX_REWRITE_IN_SELECT:
			case XMLINDEX_REWRITE:
			case XMLINDEX_SEL_IDX_TBL:
			case XMLISNODE:
			case XMLISVALID:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPATCH:
			case XMLPI:
			case XMLQUERYVAL:
			case XMLQUERY:
			case XMLROOT:
			case XMLSCHEMA:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTRANSFORMBLOB:
			case XMLTRANSFORM:
			case XMLTYPE:
			case XML:
			case XPATHTABLE:
			case XS_SYS_CONTEXT:
			case XS:
			case YEARS:
			case YEAR:
			case YEAROFWEEK:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONEMAP:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case BLOCKCHAIN:
			case COLLATE:
			case COLLATION:
			case DEFINITION:
			case DUPLICATED:
			case EXTENDED:
			case HASHING:
			case IDLE:
			case IMMUTABLE:
			case ORACLE_DATAPUMP:
			case ORACLE_HDFS:
			case ORACLE_HIVE:
			case ORACLE_LOADER:
			case SHARDED:
			case ISOLATE:
			case ROOT:
			case UNITE:
			case ALGORITHM:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MEMOPTIMIZE:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case PERIOD:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1520);
				regular_id();
				}
				break;
			case DELIMITED_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1521);
				match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Outer_join_signContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(PlSqlParser.PLUS_SIGN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Outer_join_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOuter_join_sign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOuter_join_sign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitOuter_join_sign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Outer_join_signContext outer_join_sign() throws RecognitionException {
		Outer_join_signContext _localctx = new Outer_join_signContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_outer_join_sign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1524);
			match(LEFT_PAREN);
			setState(1525);
			match(PLUS_SIGN);
			setState(1526);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Regular_idContext extends ParserRuleContext {
		public Non_reserved_keywords_pre12cContext non_reserved_keywords_pre12c() {
			return getRuleContext(Non_reserved_keywords_pre12cContext.class,0);
		}
		public Non_reserved_keywords_in_12cContext non_reserved_keywords_in_12c() {
			return getRuleContext(Non_reserved_keywords_in_12cContext.class,0);
		}
		public TerminalNode REGULAR_ID() { return getToken(PlSqlParser.REGULAR_ID, 0); }
		public TerminalNode ABSENT() { return getToken(PlSqlParser.ABSENT, 0); }
		public TerminalNode A_LETTER() { return getToken(PlSqlParser.A_LETTER, 0); }
		public TerminalNode AGENT() { return getToken(PlSqlParser.AGENT, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlSqlParser.AGGREGATE, 0); }
		public TerminalNode ANALYZE() { return getToken(PlSqlParser.ANALYZE, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode BACKINGFILE() { return getToken(PlSqlParser.BACKINGFILE, 0); }
		public TerminalNode BATCH() { return getToken(PlSqlParser.BATCH, 0); }
		public TerminalNode BINARY_INTEGER() { return getToken(PlSqlParser.BINARY_INTEGER, 0); }
		public TerminalNode BOOLEAN() { return getToken(PlSqlParser.BOOLEAN, 0); }
		public TerminalNode C_LETTER() { return getToken(PlSqlParser.C_LETTER, 0); }
		public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
		public TerminalNode CLUSTER() { return getToken(PlSqlParser.CLUSTER, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(PlSqlParser.CUSTOMDATUM, 0); }
		public TerminalNode CASESENSITIVE() { return getToken(PlSqlParser.CASESENSITIVE, 0); }
		public TerminalNode DECIMAL() { return getToken(PlSqlParser.DECIMAL, 0); }
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(PlSqlParser.DETERMINISTIC, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode E_LETTER() { return getToken(PlSqlParser.E_LETTER, 0); }
		public TerminalNode ERR() { return getToken(PlSqlParser.ERR, 0); }
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(PlSqlParser.EXCEPTION_INIT, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public TerminalNode EXISTS() { return getToken(PlSqlParser.EXISTS, 0); }
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public TerminalNode FILESTORE() { return getToken(PlSqlParser.FILESTORE, 0); }
		public TerminalNode FLOAT() { return getToken(PlSqlParser.FLOAT, 0); }
		public TerminalNode FORALL() { return getToken(PlSqlParser.FORALL, 0); }
		public TerminalNode G_LETTER() { return getToken(PlSqlParser.G_LETTER, 0); }
		public TerminalNode INDICES() { return getToken(PlSqlParser.INDICES, 0); }
		public TerminalNode INOUT() { return getToken(PlSqlParser.INOUT, 0); }
		public TerminalNode INTEGER() { return getToken(PlSqlParser.INTEGER, 0); }
		public TerminalNode JSON_TRANSFORM() { return getToken(PlSqlParser.JSON_TRANSFORM, 0); }
		public TerminalNode K_LETTER() { return getToken(PlSqlParser.K_LETTER, 0); }
		public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
		public TerminalNode LONG() { return getToken(PlSqlParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(PlSqlParser.LOOP, 0); }
		public TerminalNode MOUNTPOINT() { return getToken(PlSqlParser.MOUNTPOINT, 0); }
		public TerminalNode M_LETTER() { return getToken(PlSqlParser.M_LETTER, 0); }
		public TerminalNode MISSING() { return getToken(PlSqlParser.MISSING, 0); }
		public TerminalNode MISMATCH() { return getToken(PlSqlParser.MISMATCH, 0); }
		public TerminalNode NUMBER() { return getToken(PlSqlParser.NUMBER, 0); }
		public TerminalNode ORADATA() { return getToken(PlSqlParser.ORADATA, 0); }
		public TerminalNode OSERROR() { return getToken(PlSqlParser.OSERROR, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public TerminalNode OVERRIDING() { return getToken(PlSqlParser.OVERRIDING, 0); }
		public TerminalNode P_LETTER() { return getToken(PlSqlParser.P_LETTER, 0); }
		public TerminalNode PARALLEL_ENABLE() { return getToken(PlSqlParser.PARALLEL_ENABLE, 0); }
		public TerminalNode PIPELINED() { return getToken(PlSqlParser.PIPELINED, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(PlSqlParser.PLS_INTEGER, 0); }
		public TerminalNode PMEM() { return getToken(PlSqlParser.PMEM, 0); }
		public TerminalNode POSITIVE() { return getToken(PlSqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(PlSqlParser.POSITIVEN, 0); }
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public TerminalNode PUBLIC() { return getToken(PlSqlParser.PUBLIC, 0); }
		public TerminalNode RAISE() { return getToken(PlSqlParser.RAISE, 0); }
		public TerminalNode RAW() { return getToken(PlSqlParser.RAW, 0); }
		public TerminalNode RECORD() { return getToken(PlSqlParser.RECORD, 0); }
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public TerminalNode SDO_GEOMETRY() { return getToken(PlSqlParser.SDO_GEOMETRY, 0); }
		public TerminalNode SELF() { return getToken(PlSqlParser.SELF, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(PlSqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode SHARDSPACE() { return getToken(PlSqlParser.SHARDSPACE, 0); }
		public TerminalNode SIGNTYPE() { return getToken(PlSqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(PlSqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode SMALLINT() { return getToken(PlSqlParser.SMALLINT, 0); }
		public TerminalNode SQLDATA() { return getToken(PlSqlParser.SQLDATA, 0); }
		public TerminalNode SQLERROR() { return getToken(PlSqlParser.SQLERROR, 0); }
		public TerminalNode SUBTYPE() { return getToken(PlSqlParser.SUBTYPE, 0); }
		public TerminalNode T_LETTER() { return getToken(PlSqlParser.T_LETTER, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode VARCHAR() { return getToken(PlSqlParser.VARCHAR, 0); }
		public TerminalNode VARCHAR2() { return getToken(PlSqlParser.VARCHAR2, 0); }
		public TerminalNode VARIABLE() { return getToken(PlSqlParser.VARIABLE, 0); }
		public TerminalNode WARNING() { return getToken(PlSqlParser.WARNING, 0); }
		public TerminalNode WHILE() { return getToken(PlSqlParser.WHILE, 0); }
		public TerminalNode XMLAGG() { return getToken(PlSqlParser.XMLAGG, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode REGR_() { return getToken(PlSqlParser.REGR_, 0); }
		public TerminalNode VAR_() { return getToken(PlSqlParser.VAR_, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public TerminalNode COVAR_() { return getToken(PlSqlParser.COVAR_, 0); }
		public Regular_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRegular_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRegular_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRegular_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Regular_idContext regular_id() throws RecognitionException {
		Regular_idContext _localctx = new Regular_idContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_regular_id);
		try {
			setState(1622);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1528);
				non_reserved_keywords_pre12c();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1529);
				non_reserved_keywords_in_12c();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1530);
				match(REGULAR_ID);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1531);
				match(ABSENT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1532);
				match(A_LETTER);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1533);
				match(AGENT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1534);
				match(AGGREGATE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1535);
				match(ANALYZE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1536);
				match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1537);
				match(BACKINGFILE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1538);
				match(BATCH);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1539);
				match(BINARY_INTEGER);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1540);
				match(BOOLEAN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1541);
				match(C_LETTER);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1542);
				match(CHAR);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1543);
				match(CLUSTER);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1544);
				match(CONSTRUCTOR);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1545);
				match(CUSTOMDATUM);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1546);
				match(CASESENSITIVE);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1547);
				match(DECIMAL);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1548);
				match(DELETE);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1549);
				match(DETERMINISTIC);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1550);
				match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1551);
				match(E_LETTER);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1552);
				match(ERR);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1553);
				match(EXCEPTION);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1554);
				match(EXCEPTION_INIT);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1555);
				match(EXCEPTIONS);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1556);
				match(EXISTS);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1557);
				match(EXIT);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1558);
				match(FILESTORE);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1559);
				match(FLOAT);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1560);
				match(FORALL);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1561);
				match(G_LETTER);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1562);
				match(INDICES);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1563);
				match(INOUT);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1564);
				match(INTEGER);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1565);
				match(JSON_TRANSFORM);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1566);
				match(K_LETTER);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1567);
				match(LANGUAGE);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1568);
				match(LONG);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1569);
				match(LOOP);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1570);
				match(MOUNTPOINT);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1571);
				match(M_LETTER);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(1572);
				match(MISSING);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(1573);
				match(MISMATCH);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(1574);
				match(NUMBER);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(1575);
				match(ORADATA);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(1576);
				match(OSERROR);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(1577);
				match(OUT);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(1578);
				match(OVERRIDING);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(1579);
				match(P_LETTER);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(1580);
				match(PARALLEL_ENABLE);
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(1581);
				match(PIPELINED);
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(1582);
				match(PLS_INTEGER);
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(1583);
				match(PMEM);
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(1584);
				match(POSITIVE);
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(1585);
				match(POSITIVEN);
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(1586);
				match(PRAGMA);
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(1587);
				match(PUBLIC);
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(1588);
				match(RAISE);
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(1589);
				match(RAW);
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(1590);
				match(RECORD);
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(1591);
				match(REF);
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(1592);
				match(RENAME);
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(1593);
				match(RESTRICT_REFERENCES);
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(1594);
				match(RESULT);
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(1595);
				match(SDO_GEOMETRY);
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(1596);
				match(SELF);
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(1597);
				match(SERIALLY_REUSABLE);
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(1598);
				match(SET);
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(1599);
				match(SHARDSPACE);
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(1600);
				match(SIGNTYPE);
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(1601);
				match(SIMPLE_INTEGER);
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(1602);
				match(SMALLINT);
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(1603);
				match(SQLDATA);
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(1604);
				match(SQLERROR);
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(1605);
				match(SUBTYPE);
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(1606);
				match(T_LETTER);
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(1607);
				match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(1608);
				match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(1609);
				match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(1610);
				match(TRIGGER);
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(1611);
				match(VARCHAR);
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(1612);
				match(VARCHAR2);
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(1613);
				match(VARIABLE);
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(1614);
				match(WARNING);
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(1615);
				match(WHILE);
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(1616);
				match(XMLAGG);
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(1617);
				match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(1618);
				match(REGR_);
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(1619);
				match(VAR_);
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(1620);
				match(VALUE);
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(1621);
				match(COVAR_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Non_reserved_keywords_in_12cContext extends ParserRuleContext {
		public TerminalNode ACL() { return getToken(PlSqlParser.ACL, 0); }
		public TerminalNode ACROSS() { return getToken(PlSqlParser.ACROSS, 0); }
		public TerminalNode ACTION() { return getToken(PlSqlParser.ACTION, 0); }
		public TerminalNode ACTIONS() { return getToken(PlSqlParser.ACTIONS, 0); }
		public TerminalNode ACTIVE() { return getToken(PlSqlParser.ACTIVE, 0); }
		public TerminalNode ACTIVE_DATA() { return getToken(PlSqlParser.ACTIVE_DATA, 0); }
		public TerminalNode ACTIVITY() { return getToken(PlSqlParser.ACTIVITY, 0); }
		public TerminalNode ADAPTIVE_PLAN() { return getToken(PlSqlParser.ADAPTIVE_PLAN, 0); }
		public TerminalNode ADVANCED() { return getToken(PlSqlParser.ADVANCED, 0); }
		public TerminalNode AFD_DISKSTRING() { return getToken(PlSqlParser.AFD_DISKSTRING, 0); }
		public TerminalNode ALTERNATE() { return getToken(PlSqlParser.ALTERNATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(PlSqlParser.ALGORITHM, 0); }
		public TerminalNode ANALYTIC() { return getToken(PlSqlParser.ANALYTIC, 0); }
		public TerminalNode ANCESTOR() { return getToken(PlSqlParser.ANCESTOR, 0); }
		public TerminalNode ANOMALY() { return getToken(PlSqlParser.ANOMALY, 0); }
		public TerminalNode ANSI_REARCH() { return getToken(PlSqlParser.ANSI_REARCH, 0); }
		public TerminalNode APPLICATION() { return getToken(PlSqlParser.APPLICATION, 0); }
		public TerminalNode APPROX_COUNT_DISTINCT() { return getToken(PlSqlParser.APPROX_COUNT_DISTINCT, 0); }
		public TerminalNode ARCHIVAL() { return getToken(PlSqlParser.ARCHIVAL, 0); }
		public TerminalNode ARCHIVED() { return getToken(PlSqlParser.ARCHIVED, 0); }
		public TerminalNode ASIS() { return getToken(PlSqlParser.ASIS, 0); }
		public TerminalNode ASSIGN() { return getToken(PlSqlParser.ASSIGN, 0); }
		public TerminalNode AUTO_LOGIN() { return getToken(PlSqlParser.AUTO_LOGIN, 0); }
		public TerminalNode AUTO_REOPTIMIZE() { return getToken(PlSqlParser.AUTO_REOPTIMIZE, 0); }
		public TerminalNode AVRO() { return getToken(PlSqlParser.AVRO, 0); }
		public TerminalNode BACKGROUND() { return getToken(PlSqlParser.BACKGROUND, 0); }
		public TerminalNode BACKUPS() { return getToken(PlSqlParser.BACKUPS, 0); }
		public TerminalNode BATCHSIZE() { return getToken(PlSqlParser.BATCHSIZE, 0); }
		public TerminalNode BATCH_TABLE_ACCESS_BY_ROWID() { return getToken(PlSqlParser.BATCH_TABLE_ACCESS_BY_ROWID, 0); }
		public TerminalNode BEGINNING() { return getToken(PlSqlParser.BEGINNING, 0); }
		public TerminalNode BEQUEATH() { return getToken(PlSqlParser.BEQUEATH, 0); }
		public TerminalNode BITMAP_AND() { return getToken(PlSqlParser.BITMAP_AND, 0); }
		public TerminalNode BLOCKCHAIN() { return getToken(PlSqlParser.BLOCKCHAIN, 0); }
		public TerminalNode BSON() { return getToken(PlSqlParser.BSON, 0); }
		public TerminalNode CACHING() { return getToken(PlSqlParser.CACHING, 0); }
		public TerminalNode CALCULATED() { return getToken(PlSqlParser.CALCULATED, 0); }
		public TerminalNode CALLBACK() { return getToken(PlSqlParser.CALLBACK, 0); }
		public TerminalNode CAPACITY() { return getToken(PlSqlParser.CAPACITY, 0); }
		public TerminalNode CAPTION() { return getToken(PlSqlParser.CAPTION, 0); }
		public TerminalNode CDBDEFAULT() { return getToken(PlSqlParser.CDBDEFAULT, 0); }
		public TerminalNode CLASSIFICATION() { return getToken(PlSqlParser.CLASSIFICATION, 0); }
		public TerminalNode CLASSIFIER() { return getToken(PlSqlParser.CLASSIFIER, 0); }
		public TerminalNode CLAUSE() { return getToken(PlSqlParser.CLAUSE, 0); }
		public TerminalNode CLEAN() { return getToken(PlSqlParser.CLEAN, 0); }
		public TerminalNode CLEANUP() { return getToken(PlSqlParser.CLEANUP, 0); }
		public TerminalNode CLIENT() { return getToken(PlSqlParser.CLIENT, 0); }
		public TerminalNode CLUSTERING() { return getToken(PlSqlParser.CLUSTERING, 0); }
		public TerminalNode CLUSTER_DETAILS() { return getToken(PlSqlParser.CLUSTER_DETAILS, 0); }
		public TerminalNode CLUSTER_DISTANCE() { return getToken(PlSqlParser.CLUSTER_DISTANCE, 0); }
		public TerminalNode COLLATE() { return getToken(PlSqlParser.COLLATE, 0); }
		public TerminalNode COLLATION() { return getToken(PlSqlParser.COLLATION, 0); }
		public TerminalNode COMMON() { return getToken(PlSqlParser.COMMON, 0); }
		public TerminalNode COMMON_DATA() { return getToken(PlSqlParser.COMMON_DATA, 0); }
		public TerminalNode COMPONENT() { return getToken(PlSqlParser.COMPONENT, 0); }
		public TerminalNode COMPONENTS() { return getToken(PlSqlParser.COMPONENTS, 0); }
		public TerminalNode CONDITION() { return getToken(PlSqlParser.CONDITION, 0); }
		public TerminalNode CONDITIONAL() { return getToken(PlSqlParser.CONDITIONAL, 0); }
		public TerminalNode CONTAINERS() { return getToken(PlSqlParser.CONTAINERS, 0); }
		public TerminalNode CONTAINERS_DEFAULT() { return getToken(PlSqlParser.CONTAINERS_DEFAULT, 0); }
		public TerminalNode CONTAINER_DATA() { return getToken(PlSqlParser.CONTAINER_DATA, 0); }
		public TerminalNode CONTAINER_MAP() { return getToken(PlSqlParser.CONTAINER_MAP, 0); }
		public TerminalNode CONVERSION() { return getToken(PlSqlParser.CONVERSION, 0); }
		public TerminalNode CON_DBID_TO_ID() { return getToken(PlSqlParser.CON_DBID_TO_ID, 0); }
		public TerminalNode CON_GUID_TO_ID() { return getToken(PlSqlParser.CON_GUID_TO_ID, 0); }
		public TerminalNode CON_ID() { return getToken(PlSqlParser.CON_ID, 0); }
		public TerminalNode CON_NAME_TO_ID() { return getToken(PlSqlParser.CON_NAME_TO_ID, 0); }
		public TerminalNode CON_UID_TO_ID() { return getToken(PlSqlParser.CON_UID_TO_ID, 0); }
		public TerminalNode COOKIE() { return getToken(PlSqlParser.COOKIE, 0); }
		public TerminalNode COPY() { return getToken(PlSqlParser.COPY, 0); }
		public TerminalNode CREATE_FILE_DEST() { return getToken(PlSqlParser.CREATE_FILE_DEST, 0); }
		public TerminalNode CREDENTIAL() { return getToken(PlSqlParser.CREDENTIAL, 0); }
		public TerminalNode CRITICAL() { return getToken(PlSqlParser.CRITICAL, 0); }
		public TerminalNode CUBE_AJ() { return getToken(PlSqlParser.CUBE_AJ, 0); }
		public TerminalNode CUBE_SJ() { return getToken(PlSqlParser.CUBE_SJ, 0); }
		public TerminalNode DATAMOVEMENT() { return getToken(PlSqlParser.DATAMOVEMENT, 0); }
		public TerminalNode DATAOBJ_TO_MAT_PARTITION() { return getToken(PlSqlParser.DATAOBJ_TO_MAT_PARTITION, 0); }
		public TerminalNode DATAPUMP() { return getToken(PlSqlParser.DATAPUMP, 0); }
		public TerminalNode DATA_SECURITY_REWRITE_LIMIT() { return getToken(PlSqlParser.DATA_SECURITY_REWRITE_LIMIT, 0); }
		public TerminalNode DAYS() { return getToken(PlSqlParser.DAYS, 0); }
		public TerminalNode DB_UNIQUE_NAME() { return getToken(PlSqlParser.DB_UNIQUE_NAME, 0); }
		public TerminalNode DECORRELATE() { return getToken(PlSqlParser.DECORRELATE, 0); }
		public TerminalNode DEFAULT_CREDENTIAL() { return getToken(PlSqlParser.DEFAULT_CREDENTIAL, 0); }
		public TerminalNode DEFAULT_COLLATION() { return getToken(PlSqlParser.DEFAULT_COLLATION, 0); }
		public TerminalNode DEFINE() { return getToken(PlSqlParser.DEFINE, 0); }
		public TerminalNode DEFINITION() { return getToken(PlSqlParser.DEFINITION, 0); }
		public TerminalNode DELEGATE() { return getToken(PlSqlParser.DELEGATE, 0); }
		public TerminalNode DELETE_ALL() { return getToken(PlSqlParser.DELETE_ALL, 0); }
		public TerminalNode DESCRIPTION() { return getToken(PlSqlParser.DESCRIPTION, 0); }
		public TerminalNode DESTROY() { return getToken(PlSqlParser.DESTROY, 0); }
		public TerminalNode DIMENSIONS() { return getToken(PlSqlParser.DIMENSIONS, 0); }
		public TerminalNode DISABLE_ALL() { return getToken(PlSqlParser.DISABLE_ALL, 0); }
		public TerminalNode DISABLE_PARALLEL_DML() { return getToken(PlSqlParser.DISABLE_PARALLEL_DML, 0); }
		public TerminalNode DISCARD() { return getToken(PlSqlParser.DISCARD, 0); }
		public TerminalNode DISTRIBUTE() { return getToken(PlSqlParser.DISTRIBUTE, 0); }
		public TerminalNode DUPLICATE() { return getToken(PlSqlParser.DUPLICATE, 0); }
		public TerminalNode DUPLICATED() { return getToken(PlSqlParser.DUPLICATED, 0); }
		public TerminalNode DV() { return getToken(PlSqlParser.DV, 0); }
		public TerminalNode EDITIONABLE() { return getToken(PlSqlParser.EDITIONABLE, 0); }
		public TerminalNode ELIM_GROUPBY() { return getToken(PlSqlParser.ELIM_GROUPBY, 0); }
		public TerminalNode EM() { return getToken(PlSqlParser.EM, 0); }
		public TerminalNode ENABLE_ALL() { return getToken(PlSqlParser.ENABLE_ALL, 0); }
		public TerminalNode ENABLE_PARALLEL_DML() { return getToken(PlSqlParser.ENABLE_PARALLEL_DML, 0); }
		public TerminalNode EQUIPART() { return getToken(PlSqlParser.EQUIPART, 0); }
		public TerminalNode EVAL() { return getToken(PlSqlParser.EVAL, 0); }
		public TerminalNode EVALUATE() { return getToken(PlSqlParser.EVALUATE, 0); }
		public TerminalNode EXISTING() { return getToken(PlSqlParser.EXISTING, 0); }
		public TerminalNode EXPRESS() { return getToken(PlSqlParser.EXPRESS, 0); }
		public TerminalNode EXTENDED() { return getToken(PlSqlParser.EXTENDED, 0); }
		public TerminalNode EXTRACTCLOBXML() { return getToken(PlSqlParser.EXTRACTCLOBXML, 0); }
		public TerminalNode FACTOR() { return getToken(PlSqlParser.FACTOR, 0); }
		public TerminalNode FAILOVER() { return getToken(PlSqlParser.FAILOVER, 0); }
		public TerminalNode FAILURE() { return getToken(PlSqlParser.FAILURE, 0); }
		public TerminalNode FAMILY() { return getToken(PlSqlParser.FAMILY, 0); }
		public TerminalNode FAR() { return getToken(PlSqlParser.FAR, 0); }
		public TerminalNode FASTSTART() { return getToken(PlSqlParser.FASTSTART, 0); }
		public TerminalNode FEATURE() { return getToken(PlSqlParser.FEATURE, 0); }
		public TerminalNode FEATURE_DETAILS() { return getToken(PlSqlParser.FEATURE_DETAILS, 0); }
		public TerminalNode FETCH() { return getToken(PlSqlParser.FETCH, 0); }
		public TerminalNode FILE_NAME_CONVERT() { return getToken(PlSqlParser.FILE_NAME_CONVERT, 0); }
		public TerminalNode FILEGROUP() { return getToken(PlSqlParser.FILEGROUP, 0); }
		public TerminalNode FIXED_VIEW_DATA() { return getToken(PlSqlParser.FIXED_VIEW_DATA, 0); }
		public TerminalNode FLEX() { return getToken(PlSqlParser.FLEX, 0); }
		public TerminalNode FORMAT() { return getToken(PlSqlParser.FORMAT, 0); }
		public TerminalNode FTP() { return getToken(PlSqlParser.FTP, 0); }
		public TerminalNode GATHER_OPTIMIZER_STATISTICS() { return getToken(PlSqlParser.GATHER_OPTIMIZER_STATISTICS, 0); }
		public TerminalNode GET() { return getToken(PlSqlParser.GET, 0); }
		public TerminalNode HALF_YEARS() { return getToken(PlSqlParser.HALF_YEARS, 0); }
		public TerminalNode HASHING() { return getToken(PlSqlParser.HASHING, 0); }
		public TerminalNode HIER_ORDER() { return getToken(PlSqlParser.HIER_ORDER, 0); }
		public TerminalNode HIERARCHICAL() { return getToken(PlSqlParser.HIERARCHICAL, 0); }
		public TerminalNode HOURS() { return getToken(PlSqlParser.HOURS, 0); }
		public TerminalNode HTTP() { return getToken(PlSqlParser.HTTP, 0); }
		public TerminalNode H_LETTER() { return getToken(PlSqlParser.H_LETTER, 0); }
		public TerminalNode IDLE() { return getToken(PlSqlParser.IDLE, 0); }
		public TerminalNode ILM() { return getToken(PlSqlParser.ILM, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PlSqlParser.IMMUTABLE, 0); }
		public TerminalNode INACTIVE() { return getToken(PlSqlParser.INACTIVE, 0); }
		public TerminalNode INACTIVE_ACCOUNT_TIME() { return getToken(PlSqlParser.INACTIVE_ACCOUNT_TIME, 0); }
		public TerminalNode INDEXING() { return getToken(PlSqlParser.INDEXING, 0); }
		public TerminalNode INHERIT() { return getToken(PlSqlParser.INHERIT, 0); }
		public TerminalNode INMEMORY() { return getToken(PlSqlParser.INMEMORY, 0); }
		public TerminalNode INMEMORY_PRUNING() { return getToken(PlSqlParser.INMEMORY_PRUNING, 0); }
		public TerminalNode INPLACE() { return getToken(PlSqlParser.INPLACE, 0); }
		public TerminalNode INTERLEAVED() { return getToken(PlSqlParser.INTERLEAVED, 0); }
		public TerminalNode ISOLATE() { return getToken(PlSqlParser.ISOLATE, 0); }
		public TerminalNode IS_LEAF() { return getToken(PlSqlParser.IS_LEAF, 0); }
		public TerminalNode JSON() { return getToken(PlSqlParser.JSON, 0); }
		public TerminalNode JSONGET() { return getToken(PlSqlParser.JSONGET, 0); }
		public TerminalNode JSONPARSE() { return getToken(PlSqlParser.JSONPARSE, 0); }
		public TerminalNode JSON_ARRAY() { return getToken(PlSqlParser.JSON_ARRAY, 0); }
		public TerminalNode JSON_ARRAYAGG() { return getToken(PlSqlParser.JSON_ARRAYAGG, 0); }
		public TerminalNode JSON_EQUAL() { return getToken(PlSqlParser.JSON_EQUAL, 0); }
		public TerminalNode JSON_EXISTS() { return getToken(PlSqlParser.JSON_EXISTS, 0); }
		public TerminalNode JSON_EXISTS2() { return getToken(PlSqlParser.JSON_EXISTS2, 0); }
		public TerminalNode JSON_OBJECT() { return getToken(PlSqlParser.JSON_OBJECT, 0); }
		public TerminalNode JSON_OBJECTAGG() { return getToken(PlSqlParser.JSON_OBJECTAGG, 0); }
		public TerminalNode JSON_QUERY() { return getToken(PlSqlParser.JSON_QUERY, 0); }
		public TerminalNode JSON_SERIALIZE() { return getToken(PlSqlParser.JSON_SERIALIZE, 0); }
		public TerminalNode JSON_TABLE() { return getToken(PlSqlParser.JSON_TABLE, 0); }
		public TerminalNode JSON_TEXTCONTAINS() { return getToken(PlSqlParser.JSON_TEXTCONTAINS, 0); }
		public TerminalNode JSON_TEXTCONTAINS2() { return getToken(PlSqlParser.JSON_TEXTCONTAINS2, 0); }
		public TerminalNode JSON_VALUE() { return getToken(PlSqlParser.JSON_VALUE, 0); }
		public TerminalNode KEYSTORE() { return getToken(PlSqlParser.KEYSTORE, 0); }
		public TerminalNode LABEL() { return getToken(PlSqlParser.LABEL, 0); }
		public TerminalNode LAX() { return getToken(PlSqlParser.LAX, 0); }
		public TerminalNode LEAD_CDB() { return getToken(PlSqlParser.LEAD_CDB, 0); }
		public TerminalNode LEAD_CDB_URI() { return getToken(PlSqlParser.LEAD_CDB_URI, 0); }
		public TerminalNode LEVEL_NAME() { return getToken(PlSqlParser.LEVEL_NAME, 0); }
		public TerminalNode LIFECYCLE() { return getToken(PlSqlParser.LIFECYCLE, 0); }
		public TerminalNode LINEAR() { return getToken(PlSqlParser.LINEAR, 0); }
		public TerminalNode LOCKDOWN() { return getToken(PlSqlParser.LOCKDOWN, 0); }
		public TerminalNode LOCKING() { return getToken(PlSqlParser.LOCKING, 0); }
		public TerminalNode LOGMINING() { return getToken(PlSqlParser.LOGMINING, 0); }
		public TerminalNode LOST() { return getToken(PlSqlParser.LOST, 0); }
		public TerminalNode MANDATORY() { return getToken(PlSqlParser.MANDATORY, 0); }
		public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
		public TerminalNode MATCH() { return getToken(PlSqlParser.MATCH, 0); }
		public TerminalNode MATCHES() { return getToken(PlSqlParser.MATCHES, 0); }
		public TerminalNode MATCH_NUMBER() { return getToken(PlSqlParser.MATCH_NUMBER, 0); }
		public TerminalNode MATCH_RECOGNIZE() { return getToken(PlSqlParser.MATCH_RECOGNIZE, 0); }
		public TerminalNode MAX_SHARED_TEMP_SIZE() { return getToken(PlSqlParser.MAX_SHARED_TEMP_SIZE, 0); }
		public TerminalNode MEMCOMPRESS() { return getToken(PlSqlParser.MEMCOMPRESS, 0); }
		public TerminalNode METADATA() { return getToken(PlSqlParser.METADATA, 0); }
		public TerminalNode MEMBER_CAPTION() { return getToken(PlSqlParser.MEMBER_CAPTION, 0); }
		public TerminalNode MEMBER_DESCRIPTION() { return getToken(PlSqlParser.MEMBER_DESCRIPTION, 0); }
		public TerminalNode MEMBER_NAME() { return getToken(PlSqlParser.MEMBER_NAME, 0); }
		public TerminalNode MEMBER_UNIQUE_NAME() { return getToken(PlSqlParser.MEMBER_UNIQUE_NAME, 0); }
		public TerminalNode MEMOPTIMIZE() { return getToken(PlSqlParser.MEMOPTIMIZE, 0); }
		public TerminalNode MINUTES() { return getToken(PlSqlParser.MINUTES, 0); }
		public TerminalNode MODEL_NB() { return getToken(PlSqlParser.MODEL_NB, 0); }
		public TerminalNode MODEL_SV() { return getToken(PlSqlParser.MODEL_SV, 0); }
		public TerminalNode MODIFICATION() { return getToken(PlSqlParser.MODIFICATION, 0); }
		public TerminalNode MODULE() { return getToken(PlSqlParser.MODULE, 0); }
		public TerminalNode MONTHS() { return getToken(PlSqlParser.MONTHS, 0); }
		public TerminalNode MULTIDIMENSIONAL() { return getToken(PlSqlParser.MULTIDIMENSIONAL, 0); }
		public TerminalNode NEG() { return getToken(PlSqlParser.NEG, 0); }
		public TerminalNode NOCOPY() { return getToken(PlSqlParser.NOCOPY, 0); }
		public TerminalNode NOKEEP() { return getToken(PlSqlParser.NOKEEP, 0); }
		public TerminalNode NONEDITIONABLE() { return getToken(PlSqlParser.NONEDITIONABLE, 0); }
		public TerminalNode NOPARTITION() { return getToken(PlSqlParser.NOPARTITION, 0); }
		public TerminalNode NORELOCATE() { return getToken(PlSqlParser.NORELOCATE, 0); }
		public TerminalNode NOREPLAY() { return getToken(PlSqlParser.NOREPLAY, 0); }
		public TerminalNode NO_ADAPTIVE_PLAN() { return getToken(PlSqlParser.NO_ADAPTIVE_PLAN, 0); }
		public TerminalNode NO_ANSI_REARCH() { return getToken(PlSqlParser.NO_ANSI_REARCH, 0); }
		public TerminalNode NO_AUTO_REOPTIMIZE() { return getToken(PlSqlParser.NO_AUTO_REOPTIMIZE, 0); }
		public TerminalNode NO_BATCH_TABLE_ACCESS_BY_ROWID() { return getToken(PlSqlParser.NO_BATCH_TABLE_ACCESS_BY_ROWID, 0); }
		public TerminalNode NO_CLUSTERING() { return getToken(PlSqlParser.NO_CLUSTERING, 0); }
		public TerminalNode NO_COMMON_DATA() { return getToken(PlSqlParser.NO_COMMON_DATA, 0); }
		public TerminalNode NO_DATA_SECURITY_REWRITE() { return getToken(PlSqlParser.NO_DATA_SECURITY_REWRITE, 0); }
		public TerminalNode NO_DECORRELATE() { return getToken(PlSqlParser.NO_DECORRELATE, 0); }
		public TerminalNode NO_ELIM_GROUPBY() { return getToken(PlSqlParser.NO_ELIM_GROUPBY, 0); }
		public TerminalNode NO_GATHER_OPTIMIZER_STATISTICS() { return getToken(PlSqlParser.NO_GATHER_OPTIMIZER_STATISTICS, 0); }
		public TerminalNode NO_INMEMORY() { return getToken(PlSqlParser.NO_INMEMORY, 0); }
		public TerminalNode NO_INMEMORY_PRUNING() { return getToken(PlSqlParser.NO_INMEMORY_PRUNING, 0); }
		public TerminalNode NO_OBJECT_LINK() { return getToken(PlSqlParser.NO_OBJECT_LINK, 0); }
		public TerminalNode NO_PARTIAL_JOIN() { return getToken(PlSqlParser.NO_PARTIAL_JOIN, 0); }
		public TerminalNode NO_PARTIAL_ROLLUP_PUSHDOWN() { return getToken(PlSqlParser.NO_PARTIAL_ROLLUP_PUSHDOWN, 0); }
		public TerminalNode NO_PQ_CONCURRENT_UNION() { return getToken(PlSqlParser.NO_PQ_CONCURRENT_UNION, 0); }
		public TerminalNode NO_PQ_REPLICATE() { return getToken(PlSqlParser.NO_PQ_REPLICATE, 0); }
		public TerminalNode NO_PQ_SKEW() { return getToken(PlSqlParser.NO_PQ_SKEW, 0); }
		public TerminalNode NOPROMPT() { return getToken(PlSqlParser.NOPROMPT, 0); }
		public TerminalNode NO_PX_FAULT_TOLERANCE() { return getToken(PlSqlParser.NO_PX_FAULT_TOLERANCE, 0); }
		public TerminalNode NO_ROOT_SW_FOR_LOCAL() { return getToken(PlSqlParser.NO_ROOT_SW_FOR_LOCAL, 0); }
		public TerminalNode NO_SQL_TRANSLATION() { return getToken(PlSqlParser.NO_SQL_TRANSLATION, 0); }
		public TerminalNode NO_USE_CUBE() { return getToken(PlSqlParser.NO_USE_CUBE, 0); }
		public TerminalNode NO_USE_VECTOR_AGGREGATION() { return getToken(PlSqlParser.NO_USE_VECTOR_AGGREGATION, 0); }
		public TerminalNode NO_VECTOR_TRANSFORM() { return getToken(PlSqlParser.NO_VECTOR_TRANSFORM, 0); }
		public TerminalNode NO_VECTOR_TRANSFORM_DIMS() { return getToken(PlSqlParser.NO_VECTOR_TRANSFORM_DIMS, 0); }
		public TerminalNode NO_VECTOR_TRANSFORM_FACT() { return getToken(PlSqlParser.NO_VECTOR_TRANSFORM_FACT, 0); }
		public TerminalNode NO_ZONEMAP() { return getToken(PlSqlParser.NO_ZONEMAP, 0); }
		public TerminalNode OBJ_ID() { return getToken(PlSqlParser.OBJ_ID, 0); }
		public TerminalNode OFFSET() { return getToken(PlSqlParser.OFFSET, 0); }
		public TerminalNode OLS() { return getToken(PlSqlParser.OLS, 0); }
		public TerminalNode OMIT() { return getToken(PlSqlParser.OMIT, 0); }
		public TerminalNode ONE() { return getToken(PlSqlParser.ONE, 0); }
		public TerminalNode ORACLE_DATAPUMP() { return getToken(PlSqlParser.ORACLE_DATAPUMP, 0); }
		public TerminalNode ORACLE_HDFS() { return getToken(PlSqlParser.ORACLE_HDFS, 0); }
		public TerminalNode ORACLE_HIVE() { return getToken(PlSqlParser.ORACLE_HIVE, 0); }
		public TerminalNode ORACLE_LOADER() { return getToken(PlSqlParser.ORACLE_LOADER, 0); }
		public TerminalNode ORA_CHECK_ACL() { return getToken(PlSqlParser.ORA_CHECK_ACL, 0); }
		public TerminalNode ORA_CHECK_PRIVILEGE() { return getToken(PlSqlParser.ORA_CHECK_PRIVILEGE, 0); }
		public TerminalNode ORA_CLUSTERING() { return getToken(PlSqlParser.ORA_CLUSTERING, 0); }
		public TerminalNode ORA_INVOKING_USER() { return getToken(PlSqlParser.ORA_INVOKING_USER, 0); }
		public TerminalNode ORA_INVOKING_USERID() { return getToken(PlSqlParser.ORA_INVOKING_USERID, 0); }
		public TerminalNode ORA_INVOKING_XS_USER() { return getToken(PlSqlParser.ORA_INVOKING_XS_USER, 0); }
		public TerminalNode ORA_INVOKING_XS_USER_GUID() { return getToken(PlSqlParser.ORA_INVOKING_XS_USER_GUID, 0); }
		public TerminalNode ORA_RAWCOMPARE() { return getToken(PlSqlParser.ORA_RAWCOMPARE, 0); }
		public TerminalNode ORA_RAWCONCAT() { return getToken(PlSqlParser.ORA_RAWCONCAT, 0); }
		public TerminalNode ORA_WRITE_TIME() { return getToken(PlSqlParser.ORA_WRITE_TIME, 0); }
		public TerminalNode PARENT_LEVEL_NAME() { return getToken(PlSqlParser.PARENT_LEVEL_NAME, 0); }
		public TerminalNode PARENT_UNIQUE_NAME() { return getToken(PlSqlParser.PARENT_UNIQUE_NAME, 0); }
		public TerminalNode PASSWORD_ROLLOVER_TIME() { return getToken(PlSqlParser.PASSWORD_ROLLOVER_TIME, 0); }
		public TerminalNode PARTIAL() { return getToken(PlSqlParser.PARTIAL, 0); }
		public TerminalNode PARTIAL_JOIN() { return getToken(PlSqlParser.PARTIAL_JOIN, 0); }
		public TerminalNode PARTIAL_ROLLUP_PUSHDOWN() { return getToken(PlSqlParser.PARTIAL_ROLLUP_PUSHDOWN, 0); }
		public TerminalNode PAST() { return getToken(PlSqlParser.PAST, 0); }
		public TerminalNode PATCH() { return getToken(PlSqlParser.PATCH, 0); }
		public TerminalNode PATH_PREFIX() { return getToken(PlSqlParser.PATH_PREFIX, 0); }
		public TerminalNode PATTERN() { return getToken(PlSqlParser.PATTERN, 0); }
		public TerminalNode PER() { return getToken(PlSqlParser.PER, 0); }
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public TerminalNode PERIOD_KEYWORD() { return getToken(PlSqlParser.PERIOD_KEYWORD, 0); }
		public TerminalNode PERMUTE() { return getToken(PlSqlParser.PERMUTE, 0); }
		public TerminalNode PLUGGABLE() { return getToken(PlSqlParser.PLUGGABLE, 0); }
		public TerminalNode POOL_16K() { return getToken(PlSqlParser.POOL_16K, 0); }
		public TerminalNode POOL_2K() { return getToken(PlSqlParser.POOL_2K, 0); }
		public TerminalNode POOL_32K() { return getToken(PlSqlParser.POOL_32K, 0); }
		public TerminalNode POOL_4K() { return getToken(PlSqlParser.POOL_4K, 0); }
		public TerminalNode POOL_8K() { return getToken(PlSqlParser.POOL_8K, 0); }
		public TerminalNode PQ_CONCURRENT_UNION() { return getToken(PlSqlParser.PQ_CONCURRENT_UNION, 0); }
		public TerminalNode PQ_DISTRIBUTE_WINDOW() { return getToken(PlSqlParser.PQ_DISTRIBUTE_WINDOW, 0); }
		public TerminalNode PQ_FILTER() { return getToken(PlSqlParser.PQ_FILTER, 0); }
		public TerminalNode PQ_REPLICATE() { return getToken(PlSqlParser.PQ_REPLICATE, 0); }
		public TerminalNode PQ_SKEW() { return getToken(PlSqlParser.PQ_SKEW, 0); }
		public TerminalNode PRELOAD() { return getToken(PlSqlParser.PRELOAD, 0); }
		public TerminalNode PRETTY() { return getToken(PlSqlParser.PRETTY, 0); }
		public TerminalNode PREV() { return getToken(PlSqlParser.PREV, 0); }
		public TerminalNode PRINTBLOBTOCLOB() { return getToken(PlSqlParser.PRINTBLOBTOCLOB, 0); }
		public TerminalNode PRIORITY() { return getToken(PlSqlParser.PRIORITY, 0); }
		public TerminalNode PRIVILEGED() { return getToken(PlSqlParser.PRIVILEGED, 0); }
		public TerminalNode PROPERTY() { return getToken(PlSqlParser.PROPERTY, 0); }
		public TerminalNode PROTOCOL() { return getToken(PlSqlParser.PROTOCOL, 0); }
		public TerminalNode PROXY() { return getToken(PlSqlParser.PROXY, 0); }
		public TerminalNode PRUNING() { return getToken(PlSqlParser.PRUNING, 0); }
		public TerminalNode PX_FAULT_TOLERANCE() { return getToken(PlSqlParser.PX_FAULT_TOLERANCE, 0); }
		public TerminalNode QUARTERS() { return getToken(PlSqlParser.QUARTERS, 0); }
		public TerminalNode QUOTAGROUP() { return getToken(PlSqlParser.QUOTAGROUP, 0); }
		public TerminalNode REALM() { return getToken(PlSqlParser.REALM, 0); }
		public TerminalNode REDEFINE() { return getToken(PlSqlParser.REDEFINE, 0); }
		public TerminalNode RELOCATE() { return getToken(PlSqlParser.RELOCATE, 0); }
		public TerminalNode REMOTE() { return getToken(PlSqlParser.REMOTE, 0); }
		public TerminalNode RESTART() { return getToken(PlSqlParser.RESTART, 0); }
		public TerminalNode ROLESET() { return getToken(PlSqlParser.ROLESET, 0); }
		public TerminalNode ROWID_MAPPING_TABLE() { return getToken(PlSqlParser.ROWID_MAPPING_TABLE, 0); }
		public TerminalNode RUNNING() { return getToken(PlSqlParser.RUNNING, 0); }
		public TerminalNode SAVE() { return getToken(PlSqlParser.SAVE, 0); }
		public TerminalNode SCRUB() { return getToken(PlSqlParser.SCRUB, 0); }
		public TerminalNode SDO_GEOM_MBR() { return getToken(PlSqlParser.SDO_GEOM_MBR, 0); }
		public TerminalNode SECONDS() { return getToken(PlSqlParser.SECONDS, 0); }
		public TerminalNode SECRET() { return getToken(PlSqlParser.SECRET, 0); }
		public TerminalNode SERIAL() { return getToken(PlSqlParser.SERIAL, 0); }
		public TerminalNode SERVICES() { return getToken(PlSqlParser.SERVICES, 0); }
		public TerminalNode SERVICE_NAME_CONVERT() { return getToken(PlSqlParser.SERVICE_NAME_CONVERT, 0); }
		public TerminalNode SHARDED() { return getToken(PlSqlParser.SHARDED, 0); }
		public TerminalNode SHARING() { return getToken(PlSqlParser.SHARING, 0); }
		public TerminalNode SHELFLIFE() { return getToken(PlSqlParser.SHELFLIFE, 0); }
		public TerminalNode SITE() { return getToken(PlSqlParser.SITE, 0); }
		public TerminalNode SOURCE_FILE_DIRECTORY() { return getToken(PlSqlParser.SOURCE_FILE_DIRECTORY, 0); }
		public TerminalNode SOURCE_FILE_NAME_CONVERT() { return getToken(PlSqlParser.SOURCE_FILE_NAME_CONVERT, 0); }
		public TerminalNode SQL_TRANSLATION_PROFILE() { return getToken(PlSqlParser.SQL_TRANSLATION_PROFILE, 0); }
		public TerminalNode STANDARD() { return getToken(PlSqlParser.STANDARD, 0); }
		public TerminalNode STANDARD_HASH() { return getToken(PlSqlParser.STANDARD_HASH, 0); }
		public TerminalNode STANDBYS() { return getToken(PlSqlParser.STANDBYS, 0); }
		public TerminalNode STATE() { return getToken(PlSqlParser.STATE, 0); }
		public TerminalNode STATEMENT() { return getToken(PlSqlParser.STATEMENT, 0); }
		public TerminalNode STREAM() { return getToken(PlSqlParser.STREAM, 0); }
		public TerminalNode SUBSCRIBE() { return getToken(PlSqlParser.SUBSCRIBE, 0); }
		public TerminalNode SUBSET() { return getToken(PlSqlParser.SUBSET, 0); }
		public TerminalNode SUCCESS() { return getToken(PlSqlParser.SUCCESS, 0); }
		public TerminalNode SYS() { return getToken(PlSqlParser.SYS, 0); }
		public TerminalNode SYSBACKUP() { return getToken(PlSqlParser.SYSBACKUP, 0); }
		public TerminalNode SYSDG() { return getToken(PlSqlParser.SYSDG, 0); }
		public TerminalNode SYSGUID() { return getToken(PlSqlParser.SYSGUID, 0); }
		public TerminalNode SYSKM() { return getToken(PlSqlParser.SYSKM, 0); }
		public TerminalNode SYSOBJ() { return getToken(PlSqlParser.SYSOBJ, 0); }
		public TerminalNode SYS_CHECK_PRIVILEGE() { return getToken(PlSqlParser.SYS_CHECK_PRIVILEGE, 0); }
		public TerminalNode SYS_GET_COL_ACLIDS() { return getToken(PlSqlParser.SYS_GET_COL_ACLIDS, 0); }
		public TerminalNode SYS_MKXTI() { return getToken(PlSqlParser.SYS_MKXTI, 0); }
		public TerminalNode SYS_OP_CYCLED_SEQ() { return getToken(PlSqlParser.SYS_OP_CYCLED_SEQ, 0); }
		public TerminalNode SYS_OP_HASH() { return getToken(PlSqlParser.SYS_OP_HASH, 0); }
		public TerminalNode SYS_OP_KEY_VECTOR_CREATE() { return getToken(PlSqlParser.SYS_OP_KEY_VECTOR_CREATE, 0); }
		public TerminalNode SYS_OP_KEY_VECTOR_FILTER() { return getToken(PlSqlParser.SYS_OP_KEY_VECTOR_FILTER, 0); }
		public TerminalNode SYS_OP_KEY_VECTOR_FILTER_LIST() { return getToken(PlSqlParser.SYS_OP_KEY_VECTOR_FILTER_LIST, 0); }
		public TerminalNode SYS_OP_KEY_VECTOR_SUCCEEDED() { return getToken(PlSqlParser.SYS_OP_KEY_VECTOR_SUCCEEDED, 0); }
		public TerminalNode SYS_OP_KEY_VECTOR_USE() { return getToken(PlSqlParser.SYS_OP_KEY_VECTOR_USE, 0); }
		public TerminalNode SYS_OP_PART_ID() { return getToken(PlSqlParser.SYS_OP_PART_ID, 0); }
		public TerminalNode SYS_OP_ZONE_ID() { return getToken(PlSqlParser.SYS_OP_ZONE_ID, 0); }
		public TerminalNode SYS_RAW_TO_XSID() { return getToken(PlSqlParser.SYS_RAW_TO_XSID, 0); }
		public TerminalNode SYS_XSID_TO_RAW() { return getToken(PlSqlParser.SYS_XSID_TO_RAW, 0); }
		public TerminalNode SYS_ZMAP_FILTER() { return getToken(PlSqlParser.SYS_ZMAP_FILTER, 0); }
		public TerminalNode SYS_ZMAP_REFRESH() { return getToken(PlSqlParser.SYS_ZMAP_REFRESH, 0); }
		public TerminalNode TAG() { return getToken(PlSqlParser.TAG, 0); }
		public TerminalNode TEXT() { return getToken(PlSqlParser.TEXT, 0); }
		public TerminalNode TIER() { return getToken(PlSqlParser.TIER, 0); }
		public TerminalNode TIES() { return getToken(PlSqlParser.TIES, 0); }
		public TerminalNode TO_ACLID() { return getToken(PlSqlParser.TO_ACLID, 0); }
		public TerminalNode TRANSFORM() { return getToken(PlSqlParser.TRANSFORM, 0); }
		public TerminalNode TRANSLATION() { return getToken(PlSqlParser.TRANSLATION, 0); }
		public TerminalNode TRUST() { return getToken(PlSqlParser.TRUST, 0); }
		public TerminalNode UCS2() { return getToken(PlSqlParser.UCS2, 0); }
		public TerminalNode UNCONDITIONAL() { return getToken(PlSqlParser.UNCONDITIONAL, 0); }
		public TerminalNode UNITE() { return getToken(PlSqlParser.UNITE, 0); }
		public TerminalNode UNMATCHED() { return getToken(PlSqlParser.UNMATCHED, 0); }
		public TerminalNode UNPLUG() { return getToken(PlSqlParser.UNPLUG, 0); }
		public TerminalNode UNSUBSCRIBE() { return getToken(PlSqlParser.UNSUBSCRIBE, 0); }
		public TerminalNode USABLE() { return getToken(PlSqlParser.USABLE, 0); }
		public TerminalNode USER_DATA() { return getToken(PlSqlParser.USER_DATA, 0); }
		public TerminalNode USER_TABLESPACES() { return getToken(PlSqlParser.USER_TABLESPACES, 0); }
		public TerminalNode USE_CUBE() { return getToken(PlSqlParser.USE_CUBE, 0); }
		public TerminalNode USE_HIDDEN_PARTITIONS() { return getToken(PlSqlParser.USE_HIDDEN_PARTITIONS, 0); }
		public TerminalNode USE_VECTOR_AGGREGATION() { return getToken(PlSqlParser.USE_VECTOR_AGGREGATION, 0); }
		public TerminalNode USING_NO_EXPAND() { return getToken(PlSqlParser.USING_NO_EXPAND, 0); }
		public TerminalNode UTF16BE() { return getToken(PlSqlParser.UTF16BE, 0); }
		public TerminalNode UTF16LE() { return getToken(PlSqlParser.UTF16LE, 0); }
		public TerminalNode UTF32() { return getToken(PlSqlParser.UTF32, 0); }
		public TerminalNode UTF8() { return getToken(PlSqlParser.UTF8, 0); }
		public TerminalNode V1() { return getToken(PlSqlParser.V1, 0); }
		public TerminalNode V2() { return getToken(PlSqlParser.V2, 0); }
		public TerminalNode VALIDATE_CONVERSION() { return getToken(PlSqlParser.VALIDATE_CONVERSION, 0); }
		public TerminalNode VALID_TIME_END() { return getToken(PlSqlParser.VALID_TIME_END, 0); }
		public TerminalNode VECTOR_TRANSFORM() { return getToken(PlSqlParser.VECTOR_TRANSFORM, 0); }
		public TerminalNode VECTOR_TRANSFORM_DIMS() { return getToken(PlSqlParser.VECTOR_TRANSFORM_DIMS, 0); }
		public TerminalNode VECTOR_TRANSFORM_FACT() { return getToken(PlSqlParser.VECTOR_TRANSFORM_FACT, 0); }
		public TerminalNode VERIFIER() { return getToken(PlSqlParser.VERIFIER, 0); }
		public TerminalNode VIOLATION() { return getToken(PlSqlParser.VIOLATION, 0); }
		public TerminalNode VISIBILITY() { return getToken(PlSqlParser.VISIBILITY, 0); }
		public TerminalNode WEEK() { return getToken(PlSqlParser.WEEK, 0); }
		public TerminalNode WEEKS() { return getToken(PlSqlParser.WEEKS, 0); }
		public TerminalNode WITH_PLSQL() { return getToken(PlSqlParser.WITH_PLSQL, 0); }
		public TerminalNode WRAPPER() { return getToken(PlSqlParser.WRAPPER, 0); }
		public TerminalNode XS() { return getToken(PlSqlParser.XS, 0); }
		public TerminalNode YEARS() { return getToken(PlSqlParser.YEARS, 0); }
		public TerminalNode ZONEMAP() { return getToken(PlSqlParser.ZONEMAP, 0); }
		public Non_reserved_keywords_in_12cContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_reserved_keywords_in_12c; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNon_reserved_keywords_in_12c(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNon_reserved_keywords_in_12c(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitNon_reserved_keywords_in_12c(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_reserved_keywords_in_12cContext non_reserved_keywords_in_12c() throws RecognitionException {
		Non_reserved_keywords_in_12cContext _localctx = new Non_reserved_keywords_in_12cContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_non_reserved_keywords_in_12c);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1624);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -5472907085768511872L) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 576465752292327429L) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & -9133862993989091327L) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & -9223340287644925947L) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & 4611688519172103431L) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & -8633397111955635955L) != 0) || ((((_la - 404)) & ~0x3f) == 0 && ((1L << (_la - 404)) & 364864189124083745L) != 0) || ((((_la - 475)) & ~0x3f) == 0 && ((1L << (_la - 475)) & 7737470101581989121L) != 0) || ((((_la - 541)) & ~0x3f) == 0 && ((1L << (_la - 541)) & 4679525783846925L) != 0) || ((((_la - 609)) & ~0x3f) == 0 && ((1L << (_la - 609)) & 576474221400580097L) != 0) || ((((_la - 687)) & ~0x3f) == 0 && ((1L << (_la - 687)) & -17944025470318079L) != 0) || ((((_la - 751)) & ~0x3f) == 0 && ((1L << (_la - 751)) & 4513496851185759L) != 0) || ((((_la - 818)) & ~0x3f) == 0 && ((1L << (_la - 818)) & 4468134298385516549L) != 0) || ((((_la - 886)) & ~0x3f) == 0 && ((1L << (_la - 886)) & 35752666728449L) != 0) || ((((_la - 950)) & ~0x3f) == 0 && ((1L << (_la - 950)) & 361004851770949633L) != 0) || ((((_la - 1015)) & ~0x3f) == 0 && ((1L << (_la - 1015)) & 9147940509582433L) != 0) || ((((_la - 1079)) & ~0x3f) == 0 && ((1L << (_la - 1079)) & -6899514491151039577L) != 0) || ((((_la - 1143)) & ~0x3f) == 0 && ((1L << (_la - 1143)) & 2017613080011211011L) != 0) || ((((_la - 1212)) & ~0x3f) == 0 && ((1L << (_la - 1212)) & 7529455627011135L) != 0) || ((((_la - 1278)) & ~0x3f) == 0 && ((1L << (_la - 1278)) & -9083478972590718803L) != 0) || ((((_la - 1343)) & ~0x3f) == 0 && ((1L << (_la - 1343)) & 37186033599651891L) != 0) || ((((_la - 1407)) & ~0x3f) == 0 && ((1L << (_la - 1407)) & 5188146770865061889L) != 0) || ((((_la - 1485)) & ~0x3f) == 0 && ((1L << (_la - 1485)) & 1297072976839049217L) != 0) || ((((_la - 1550)) & ~0x3f) == 0 && ((1L << (_la - 1550)) & 144036067278851L) != 0) || ((((_la - 1619)) & ~0x3f) == 0 && ((1L << (_la - 1619)) & 4503602851495939L) != 0) || ((((_la - 1684)) & ~0x3f) == 0 && ((1L << (_la - 1684)) & 1783988404582089219L) != 0) || ((((_la - 1766)) & ~0x3f) == 0 && ((1L << (_la - 1766)) & 17592187064321L) != 0) || _la==SYS_OP_ZONE_ID || _la==SYS_RAW_TO_XSID || ((((_la - 1980)) & ~0x3f) == 0 && ((1L << (_la - 1980)) & 35184574466055L) != 0) || ((((_la - 2049)) & ~0x3f) == 0 && ((1L << (_la - 2049)) & -9222791357207142367L) != 0) || ((((_la - 2116)) & ~0x3f) == 0 && ((1L << (_la - 2116)) & 8444343698458641L) != 0) || ((((_la - 2180)) & ~0x3f) == 0 && ((1L << (_la - 2180)) & 17827333L) != 0) || ((((_la - 2246)) & ~0x3f) == 0 && ((1L << (_la - 2246)) & 4503628349931653L) != 0) || _la==PERIOD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Non_reserved_keywords_pre12cContext extends ParserRuleContext {
		public TerminalNode ABORT() { return getToken(PlSqlParser.ABORT, 0); }
		public TerminalNode ABS() { return getToken(PlSqlParser.ABS, 0); }
		public TerminalNode ACCESSED() { return getToken(PlSqlParser.ACCESSED, 0); }
		public TerminalNode ACCESS() { return getToken(PlSqlParser.ACCESS, 0); }
		public TerminalNode ACCOUNT() { return getToken(PlSqlParser.ACCOUNT, 0); }
		public TerminalNode ACOS() { return getToken(PlSqlParser.ACOS, 0); }
		public TerminalNode ACTIVATE() { return getToken(PlSqlParser.ACTIVATE, 0); }
		public TerminalNode ACTIVE_COMPONENT() { return getToken(PlSqlParser.ACTIVE_COMPONENT, 0); }
		public TerminalNode ACTIVE_FUNCTION() { return getToken(PlSqlParser.ACTIVE_FUNCTION, 0); }
		public TerminalNode ACTIVE_TAG() { return getToken(PlSqlParser.ACTIVE_TAG, 0); }
		public TerminalNode ADD_COLUMN() { return getToken(PlSqlParser.ADD_COLUMN, 0); }
		public TerminalNode ADD_GROUP() { return getToken(PlSqlParser.ADD_GROUP, 0); }
		public TerminalNode ADD_MONTHS() { return getToken(PlSqlParser.ADD_MONTHS, 0); }
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode ADJ_DATE() { return getToken(PlSqlParser.ADJ_DATE, 0); }
		public TerminalNode ADMINISTER() { return getToken(PlSqlParser.ADMINISTER, 0); }
		public TerminalNode ADMINISTRATOR() { return getToken(PlSqlParser.ADMINISTRATOR, 0); }
		public TerminalNode ADMIN() { return getToken(PlSqlParser.ADMIN, 0); }
		public TerminalNode ADVISE() { return getToken(PlSqlParser.ADVISE, 0); }
		public TerminalNode ADVISOR() { return getToken(PlSqlParser.ADVISOR, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public TerminalNode ALIAS() { return getToken(PlSqlParser.ALIAS, 0); }
		public TerminalNode ALLOCATE() { return getToken(PlSqlParser.ALLOCATE, 0); }
		public TerminalNode ALLOW() { return getToken(PlSqlParser.ALLOW, 0); }
		public TerminalNode ALL_ROWS() { return getToken(PlSqlParser.ALL_ROWS, 0); }
		public TerminalNode ALWAYS() { return getToken(PlSqlParser.ALWAYS, 0); }
		public TerminalNode ANALYZE() { return getToken(PlSqlParser.ANALYZE, 0); }
		public TerminalNode ANCILLARY() { return getToken(PlSqlParser.ANCILLARY, 0); }
		public TerminalNode AND_EQUAL() { return getToken(PlSqlParser.AND_EQUAL, 0); }
		public TerminalNode ANTIJOIN() { return getToken(PlSqlParser.ANTIJOIN, 0); }
		public TerminalNode ANYSCHEMA() { return getToken(PlSqlParser.ANYSCHEMA, 0); }
		public TerminalNode APPENDCHILDXML() { return getToken(PlSqlParser.APPENDCHILDXML, 0); }
		public TerminalNode APPEND() { return getToken(PlSqlParser.APPEND, 0); }
		public TerminalNode APPEND_VALUES() { return getToken(PlSqlParser.APPEND_VALUES, 0); }
		public TerminalNode APPLY() { return getToken(PlSqlParser.APPLY, 0); }
		public TerminalNode ARCHIVELOG() { return getToken(PlSqlParser.ARCHIVELOG, 0); }
		public TerminalNode ARCHIVE() { return getToken(PlSqlParser.ARCHIVE, 0); }
		public TerminalNode ARRAY() { return getToken(PlSqlParser.ARRAY, 0); }
		public TerminalNode ASCII() { return getToken(PlSqlParser.ASCII, 0); }
		public TerminalNode ASCIISTR() { return getToken(PlSqlParser.ASCIISTR, 0); }
		public TerminalNode ASIN() { return getToken(PlSqlParser.ASIN, 0); }
		public TerminalNode ASSEMBLY() { return getToken(PlSqlParser.ASSEMBLY, 0); }
		public TerminalNode ASSOCIATE() { return getToken(PlSqlParser.ASSOCIATE, 0); }
		public TerminalNode ASYNCHRONOUS() { return getToken(PlSqlParser.ASYNCHRONOUS, 0); }
		public TerminalNode ASYNC() { return getToken(PlSqlParser.ASYNC, 0); }
		public TerminalNode ATAN2() { return getToken(PlSqlParser.ATAN2, 0); }
		public TerminalNode ATAN() { return getToken(PlSqlParser.ATAN, 0); }
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PlSqlParser.ATTRIBUTE, 0); }
		public TerminalNode ATTRIBUTES() { return getToken(PlSqlParser.ATTRIBUTES, 0); }
		public TerminalNode AUTHENTICATED() { return getToken(PlSqlParser.AUTHENTICATED, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(PlSqlParser.AUTHENTICATION, 0); }
		public TerminalNode AUTHID() { return getToken(PlSqlParser.AUTHID, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PlSqlParser.AUTHORIZATION, 0); }
		public TerminalNode AUTOALLOCATE() { return getToken(PlSqlParser.AUTOALLOCATE, 0); }
		public TerminalNode AUTOEXTEND() { return getToken(PlSqlParser.AUTOEXTEND, 0); }
		public TerminalNode AUTOMATIC() { return getToken(PlSqlParser.AUTOMATIC, 0); }
		public TerminalNode AUTO() { return getToken(PlSqlParser.AUTO, 0); }
		public TerminalNode AVAILABILITY() { return getToken(PlSqlParser.AVAILABILITY, 0); }
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode BACKUP() { return getToken(PlSqlParser.BACKUP, 0); }
		public TerminalNode BASICFILE() { return getToken(PlSqlParser.BASICFILE, 0); }
		public TerminalNode BASIC() { return getToken(PlSqlParser.BASIC, 0); }
		public TerminalNode BATCH() { return getToken(PlSqlParser.BATCH, 0); }
		public TerminalNode BECOME() { return getToken(PlSqlParser.BECOME, 0); }
		public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
		public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
		public TerminalNode BEGIN_OUTLINE_DATA() { return getToken(PlSqlParser.BEGIN_OUTLINE_DATA, 0); }
		public TerminalNode BEHALF() { return getToken(PlSqlParser.BEHALF, 0); }
		public TerminalNode BFILE() { return getToken(PlSqlParser.BFILE, 0); }
		public TerminalNode BFILENAME() { return getToken(PlSqlParser.BFILENAME, 0); }
		public TerminalNode BIGFILE() { return getToken(PlSqlParser.BIGFILE, 0); }
		public TerminalNode BINARY_DOUBLE_INFINITY() { return getToken(PlSqlParser.BINARY_DOUBLE_INFINITY, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(PlSqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode BINARY_DOUBLE_NAN() { return getToken(PlSqlParser.BINARY_DOUBLE_NAN, 0); }
		public TerminalNode BINARY_FLOAT_INFINITY() { return getToken(PlSqlParser.BINARY_FLOAT_INFINITY, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(PlSqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_FLOAT_NAN() { return getToken(PlSqlParser.BINARY_FLOAT_NAN, 0); }
		public TerminalNode BINARY() { return getToken(PlSqlParser.BINARY, 0); }
		public TerminalNode BIND_AWARE() { return getToken(PlSqlParser.BIND_AWARE, 0); }
		public TerminalNode BINDING() { return getToken(PlSqlParser.BINDING, 0); }
		public TerminalNode BIN_TO_NUM() { return getToken(PlSqlParser.BIN_TO_NUM, 0); }
		public TerminalNode BITAND() { return getToken(PlSqlParser.BITAND, 0); }
		public TerminalNode BITMAP() { return getToken(PlSqlParser.BITMAP, 0); }
		public TerminalNode BITMAPS() { return getToken(PlSqlParser.BITMAPS, 0); }
		public TerminalNode BITMAP_TREE() { return getToken(PlSqlParser.BITMAP_TREE, 0); }
		public TerminalNode BITS() { return getToken(PlSqlParser.BITS, 0); }
		public TerminalNode BLOB() { return getToken(PlSqlParser.BLOB, 0); }
		public TerminalNode BLOCK() { return getToken(PlSqlParser.BLOCK, 0); }
		public TerminalNode BLOCK_RANGE() { return getToken(PlSqlParser.BLOCK_RANGE, 0); }
		public TerminalNode BLOCKSIZE() { return getToken(PlSqlParser.BLOCKSIZE, 0); }
		public TerminalNode BLOCKS() { return getToken(PlSqlParser.BLOCKS, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public TerminalNode BOTH() { return getToken(PlSqlParser.BOTH, 0); }
		public TerminalNode BOUND() { return getToken(PlSqlParser.BOUND, 0); }
		public TerminalNode BRANCH() { return getToken(PlSqlParser.BRANCH, 0); }
		public TerminalNode BREADTH() { return getToken(PlSqlParser.BREADTH, 0); }
		public TerminalNode BROADCAST() { return getToken(PlSqlParser.BROADCAST, 0); }
		public TerminalNode BUFFER_CACHE() { return getToken(PlSqlParser.BUFFER_CACHE, 0); }
		public TerminalNode BUFFER() { return getToken(PlSqlParser.BUFFER, 0); }
		public TerminalNode BUFFER_POOL() { return getToken(PlSqlParser.BUFFER_POOL, 0); }
		public TerminalNode BUILD() { return getToken(PlSqlParser.BUILD, 0); }
		public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
		public TerminalNode BYPASS_RECURSIVE_CHECK() { return getToken(PlSqlParser.BYPASS_RECURSIVE_CHECK, 0); }
		public TerminalNode BYPASS_UJVC() { return getToken(PlSqlParser.BYPASS_UJVC, 0); }
		public TerminalNode BYTE() { return getToken(PlSqlParser.BYTE, 0); }
		public TerminalNode CACHE_CB() { return getToken(PlSqlParser.CACHE_CB, 0); }
		public TerminalNode CACHE_INSTANCES() { return getToken(PlSqlParser.CACHE_INSTANCES, 0); }
		public TerminalNode CACHE() { return getToken(PlSqlParser.CACHE, 0); }
		public TerminalNode CACHE_TEMP_TABLE() { return getToken(PlSqlParser.CACHE_TEMP_TABLE, 0); }
		public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
		public TerminalNode CANCEL() { return getToken(PlSqlParser.CANCEL, 0); }
		public TerminalNode CARDINALITY() { return getToken(PlSqlParser.CARDINALITY, 0); }
		public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
		public TerminalNode CASE() { return getToken(PlSqlParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(PlSqlParser.CAST, 0); }
		public TerminalNode CATEGORY() { return getToken(PlSqlParser.CATEGORY, 0); }
		public TerminalNode CEIL() { return getToken(PlSqlParser.CEIL, 0); }
		public TerminalNode CELL_FLASH_CACHE() { return getToken(PlSqlParser.CELL_FLASH_CACHE, 0); }
		public TerminalNode CERTIFICATE() { return getToken(PlSqlParser.CERTIFICATE, 0); }
		public TerminalNode CFILE() { return getToken(PlSqlParser.CFILE, 0); }
		public TerminalNode CHAINED() { return getToken(PlSqlParser.CHAINED, 0); }
		public TerminalNode CHANGE_DUPKEY_ERROR_INDEX() { return getToken(PlSqlParser.CHANGE_DUPKEY_ERROR_INDEX, 0); }
		public TerminalNode CHANGE() { return getToken(PlSqlParser.CHANGE, 0); }
		public TerminalNode CHARACTER() { return getToken(PlSqlParser.CHARACTER, 0); }
		public TerminalNode CHAR_CS() { return getToken(PlSqlParser.CHAR_CS, 0); }
		public TerminalNode CHARTOROWID() { return getToken(PlSqlParser.CHARTOROWID, 0); }
		public TerminalNode CHECK_ACL_REWRITE() { return getToken(PlSqlParser.CHECK_ACL_REWRITE, 0); }
		public TerminalNode CHECKPOINT() { return getToken(PlSqlParser.CHECKPOINT, 0); }
		public TerminalNode CHILD() { return getToken(PlSqlParser.CHILD, 0); }
		public TerminalNode CHOOSE() { return getToken(PlSqlParser.CHOOSE, 0); }
		public TerminalNode CHR() { return getToken(PlSqlParser.CHR, 0); }
		public TerminalNode CHUNK() { return getToken(PlSqlParser.CHUNK, 0); }
		public TerminalNode CLASS() { return getToken(PlSqlParser.CLASS, 0); }
		public TerminalNode CLEAR() { return getToken(PlSqlParser.CLEAR, 0); }
		public TerminalNode CLOB() { return getToken(PlSqlParser.CLOB, 0); }
		public TerminalNode CLONE() { return getToken(PlSqlParser.CLONE, 0); }
		public TerminalNode CLOSE_CACHED_OPEN_CURSORS() { return getToken(PlSqlParser.CLOSE_CACHED_OPEN_CURSORS, 0); }
		public TerminalNode CLOSE() { return getToken(PlSqlParser.CLOSE, 0); }
		public TerminalNode CLUSTER_BY_ROWID() { return getToken(PlSqlParser.CLUSTER_BY_ROWID, 0); }
		public TerminalNode CLUSTER_ID() { return getToken(PlSqlParser.CLUSTER_ID, 0); }
		public TerminalNode CLUSTERING_FACTOR() { return getToken(PlSqlParser.CLUSTERING_FACTOR, 0); }
		public TerminalNode CLUSTER_PROBABILITY() { return getToken(PlSqlParser.CLUSTER_PROBABILITY, 0); }
		public TerminalNode CLUSTER_SET() { return getToken(PlSqlParser.CLUSTER_SET, 0); }
		public TerminalNode COALESCE() { return getToken(PlSqlParser.COALESCE, 0); }
		public TerminalNode COALESCE_SQ() { return getToken(PlSqlParser.COALESCE_SQ, 0); }
		public TerminalNode COARSE() { return getToken(PlSqlParser.COARSE, 0); }
		public TerminalNode CO_AUTH_IND() { return getToken(PlSqlParser.CO_AUTH_IND, 0); }
		public TerminalNode COLD() { return getToken(PlSqlParser.COLD, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public TerminalNode COLUMNAR() { return getToken(PlSqlParser.COLUMNAR, 0); }
		public TerminalNode COLUMN_AUTH_INDICATOR() { return getToken(PlSqlParser.COLUMN_AUTH_INDICATOR, 0); }
		public TerminalNode COLUMN() { return getToken(PlSqlParser.COLUMN, 0); }
		public TerminalNode COLUMNS() { return getToken(PlSqlParser.COLUMNS, 0); }
		public TerminalNode COLUMN_STATS() { return getToken(PlSqlParser.COLUMN_STATS, 0); }
		public TerminalNode COLUMN_VALUE() { return getToken(PlSqlParser.COLUMN_VALUE, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PlSqlParser.COMMITTED, 0); }
		public TerminalNode COMPACT() { return getToken(PlSqlParser.COMPACT, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(PlSqlParser.COMPATIBILITY, 0); }
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode COMPLETE() { return getToken(PlSqlParser.COMPLETE, 0); }
		public TerminalNode COMPLIANCE() { return getToken(PlSqlParser.COMPLIANCE, 0); }
		public TerminalNode COMPOSE() { return getToken(PlSqlParser.COMPOSE, 0); }
		public TerminalNode COMPOSITE_LIMIT() { return getToken(PlSqlParser.COMPOSITE_LIMIT, 0); }
		public TerminalNode COMPOSITE() { return getToken(PlSqlParser.COMPOSITE, 0); }
		public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
		public TerminalNode COMPUTE() { return getToken(PlSqlParser.COMPUTE, 0); }
		public TerminalNode CONCAT() { return getToken(PlSqlParser.CONCAT, 0); }
		public TerminalNode CONFIRM() { return getToken(PlSqlParser.CONFIRM, 0); }
		public TerminalNode CONFORMING() { return getToken(PlSqlParser.CONFORMING, 0); }
		public TerminalNode CONNECT_BY_CB_WHR_ONLY() { return getToken(PlSqlParser.CONNECT_BY_CB_WHR_ONLY, 0); }
		public TerminalNode CONNECT_BY_COMBINE_SW() { return getToken(PlSqlParser.CONNECT_BY_COMBINE_SW, 0); }
		public TerminalNode CONNECT_BY_COST_BASED() { return getToken(PlSqlParser.CONNECT_BY_COST_BASED, 0); }
		public TerminalNode CONNECT_BY_ELIM_DUPS() { return getToken(PlSqlParser.CONNECT_BY_ELIM_DUPS, 0); }
		public TerminalNode CONNECT_BY_FILTERING() { return getToken(PlSqlParser.CONNECT_BY_FILTERING, 0); }
		public TerminalNode CONNECT_BY_ISCYCLE() { return getToken(PlSqlParser.CONNECT_BY_ISCYCLE, 0); }
		public TerminalNode CONNECT_BY_ISLEAF() { return getToken(PlSqlParser.CONNECT_BY_ISLEAF, 0); }
		public TerminalNode CONNECT_BY_ROOT() { return getToken(PlSqlParser.CONNECT_BY_ROOT, 0); }
		public TerminalNode CONNECT_TIME() { return getToken(PlSqlParser.CONNECT_TIME, 0); }
		public TerminalNode CONSIDER() { return getToken(PlSqlParser.CONSIDER, 0); }
		public TerminalNode CONSISTENT() { return getToken(PlSqlParser.CONSISTENT, 0); }
		public TerminalNode CONSTANT() { return getToken(PlSqlParser.CONSTANT, 0); }
		public TerminalNode CONST() { return getToken(PlSqlParser.CONST, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PlSqlParser.CONSTRAINTS, 0); }
		public TerminalNode CONTAINER() { return getToken(PlSqlParser.CONTAINER, 0); }
		public TerminalNode CONTENT() { return getToken(PlSqlParser.CONTENT, 0); }
		public TerminalNode CONTENTS() { return getToken(PlSqlParser.CONTENTS, 0); }
		public TerminalNode CONTEXT() { return getToken(PlSqlParser.CONTEXT, 0); }
		public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
		public TerminalNode CONTROLFILE() { return getToken(PlSqlParser.CONTROLFILE, 0); }
		public TerminalNode CONVERT() { return getToken(PlSqlParser.CONVERT, 0); }
		public TerminalNode CORR_K() { return getToken(PlSqlParser.CORR_K, 0); }
		public TerminalNode CORR() { return getToken(PlSqlParser.CORR, 0); }
		public TerminalNode CORR_S() { return getToken(PlSqlParser.CORR_S, 0); }
		public TerminalNode CORRUPTION() { return getToken(PlSqlParser.CORRUPTION, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(PlSqlParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode CORRUPT_XID() { return getToken(PlSqlParser.CORRUPT_XID, 0); }
		public TerminalNode COSH() { return getToken(PlSqlParser.COSH, 0); }
		public TerminalNode COS() { return getToken(PlSqlParser.COS, 0); }
		public TerminalNode COST() { return getToken(PlSqlParser.COST, 0); }
		public TerminalNode COST_XML_QUERY_REWRITE() { return getToken(PlSqlParser.COST_XML_QUERY_REWRITE, 0); }
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public TerminalNode COVAR_POP() { return getToken(PlSqlParser.COVAR_POP, 0); }
		public TerminalNode COVAR_SAMP() { return getToken(PlSqlParser.COVAR_SAMP, 0); }
		public TerminalNode CPU_COSTING() { return getToken(PlSqlParser.CPU_COSTING, 0); }
		public TerminalNode CPU_PER_CALL() { return getToken(PlSqlParser.CPU_PER_CALL, 0); }
		public TerminalNode CPU_PER_SESSION() { return getToken(PlSqlParser.CPU_PER_SESSION, 0); }
		public TerminalNode CRASH() { return getToken(PlSqlParser.CRASH, 0); }
		public TerminalNode CREATE_STORED_OUTLINES() { return getToken(PlSqlParser.CREATE_STORED_OUTLINES, 0); }
		public TerminalNode CREATION() { return getToken(PlSqlParser.CREATION, 0); }
		public TerminalNode CROSSEDITION() { return getToken(PlSqlParser.CROSSEDITION, 0); }
		public TerminalNode CROSS() { return getToken(PlSqlParser.CROSS, 0); }
		public TerminalNode CSCONVERT() { return getToken(PlSqlParser.CSCONVERT, 0); }
		public TerminalNode CUBE_GB() { return getToken(PlSqlParser.CUBE_GB, 0); }
		public TerminalNode CUBE() { return getToken(PlSqlParser.CUBE, 0); }
		public TerminalNode CUME_DISTM() { return getToken(PlSqlParser.CUME_DISTM, 0); }
		public TerminalNode CUME_DIST() { return getToken(PlSqlParser.CUME_DIST, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PlSqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PlSqlParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PlSqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PlSqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PlSqlParser.CURRENT_USER, 0); }
		public TerminalNode CURRENTV() { return getToken(PlSqlParser.CURRENTV, 0); }
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public TerminalNode CURSOR_SHARING_EXACT() { return getToken(PlSqlParser.CURSOR_SHARING_EXACT, 0); }
		public TerminalNode CURSOR_SPECIFIC_SEGMENT() { return getToken(PlSqlParser.CURSOR_SPECIFIC_SEGMENT, 0); }
		public TerminalNode CV() { return getToken(PlSqlParser.CV, 0); }
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public TerminalNode DANGLING() { return getToken(PlSqlParser.DANGLING, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(PlSqlParser.DAYOFWEEK, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode DATAFILE() { return getToken(PlSqlParser.DATAFILE, 0); }
		public TerminalNode DATAFILES() { return getToken(PlSqlParser.DATAFILES, 0); }
		public TerminalNode DATA() { return getToken(PlSqlParser.DATA, 0); }
		public TerminalNode DATAOBJNO() { return getToken(PlSqlParser.DATAOBJNO, 0); }
		public TerminalNode DATAOBJ_TO_PARTITION() { return getToken(PlSqlParser.DATAOBJ_TO_PARTITION, 0); }
		public TerminalNode DATE_MODE() { return getToken(PlSqlParser.DATE_MODE, 0); }
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode DBA() { return getToken(PlSqlParser.DBA, 0); }
		public TerminalNode DBA_RECYCLEBIN() { return getToken(PlSqlParser.DBA_RECYCLEBIN, 0); }
		public TerminalNode DBMS_STATS() { return getToken(PlSqlParser.DBMS_STATS, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(PlSqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(PlSqlParser.DBTIMEZONE, 0); }
		public TerminalNode DB_VERSION() { return getToken(PlSqlParser.DB_VERSION, 0); }
		public TerminalNode DDL() { return getToken(PlSqlParser.DDL, 0); }
		public TerminalNode DEALLOCATE() { return getToken(PlSqlParser.DEALLOCATE, 0); }
		public TerminalNode DEBUGGER() { return getToken(PlSqlParser.DEBUGGER, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public TerminalNode DEC() { return getToken(PlSqlParser.DEC, 0); }
		public TerminalNode DECODE() { return getToken(PlSqlParser.DECODE, 0); }
		public TerminalNode DECOMPOSE() { return getToken(PlSqlParser.DECOMPOSE, 0); }
		public TerminalNode DECREMENT() { return getToken(PlSqlParser.DECREMENT, 0); }
		public TerminalNode DECR() { return getToken(PlSqlParser.DECR, 0); }
		public TerminalNode DECRYPT() { return getToken(PlSqlParser.DECRYPT, 0); }
		public TerminalNode DEDUPLICATE() { return getToken(PlSqlParser.DEDUPLICATE, 0); }
		public TerminalNode DEFAULTS() { return getToken(PlSqlParser.DEFAULTS, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PlSqlParser.DEFERRABLE, 0); }
		public TerminalNode DEFERRED() { return getToken(PlSqlParser.DEFERRED, 0); }
		public TerminalNode DEFINED() { return getToken(PlSqlParser.DEFINED, 0); }
		public TerminalNode DEFINER() { return getToken(PlSqlParser.DEFINER, 0); }
		public TerminalNode DEGREE() { return getToken(PlSqlParser.DEGREE, 0); }
		public TerminalNode DELAY() { return getToken(PlSqlParser.DELAY, 0); }
		public TerminalNode DELETEXML() { return getToken(PlSqlParser.DELETEXML, 0); }
		public TerminalNode DEMAND() { return getToken(PlSqlParser.DEMAND, 0); }
		public TerminalNode DENSE_RANKM() { return getToken(PlSqlParser.DENSE_RANKM, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
		public TerminalNode DEPENDENT() { return getToken(PlSqlParser.DEPENDENT, 0); }
		public TerminalNode DEPTH() { return getToken(PlSqlParser.DEPTH, 0); }
		public TerminalNode DEQUEUE() { return getToken(PlSqlParser.DEQUEUE, 0); }
		public TerminalNode DEREF() { return getToken(PlSqlParser.DEREF, 0); }
		public TerminalNode DEREF_NO_REWRITE() { return getToken(PlSqlParser.DEREF_NO_REWRITE, 0); }
		public TerminalNode DETACHED() { return getToken(PlSqlParser.DETACHED, 0); }
		public TerminalNode DETERMINES() { return getToken(PlSqlParser.DETERMINES, 0); }
		public TerminalNode DICTIONARY() { return getToken(PlSqlParser.DICTIONARY, 0); }
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode DIRECT_LOAD() { return getToken(PlSqlParser.DIRECT_LOAD, 0); }
		public TerminalNode DIRECTORY() { return getToken(PlSqlParser.DIRECTORY, 0); }
		public TerminalNode DIRECT_PATH() { return getToken(PlSqlParser.DIRECT_PATH, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode DISABLE_PRESET() { return getToken(PlSqlParser.DISABLE_PRESET, 0); }
		public TerminalNode DISABLE_RPKE() { return getToken(PlSqlParser.DISABLE_RPKE, 0); }
		public TerminalNode DISALLOW() { return getToken(PlSqlParser.DISALLOW, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(PlSqlParser.DISASSOCIATE, 0); }
		public TerminalNode DISCONNECT() { return getToken(PlSqlParser.DISCONNECT, 0); }
		public TerminalNode DISKGROUP() { return getToken(PlSqlParser.DISKGROUP, 0); }
		public TerminalNode DISK() { return getToken(PlSqlParser.DISK, 0); }
		public TerminalNode DISKS() { return getToken(PlSqlParser.DISKS, 0); }
		public TerminalNode DISMOUNT() { return getToken(PlSqlParser.DISMOUNT, 0); }
		public TerminalNode DISTINGUISHED() { return getToken(PlSqlParser.DISTINGUISHED, 0); }
		public TerminalNode DISTRIBUTED() { return getToken(PlSqlParser.DISTRIBUTED, 0); }
		public TerminalNode DML() { return getToken(PlSqlParser.DML, 0); }
		public TerminalNode DML_UPDATE() { return getToken(PlSqlParser.DML_UPDATE, 0); }
		public TerminalNode DOCFIDELITY() { return getToken(PlSqlParser.DOCFIDELITY, 0); }
		public TerminalNode DOCUMENT() { return getToken(PlSqlParser.DOCUMENT, 0); }
		public TerminalNode DOMAIN_INDEX_FILTER() { return getToken(PlSqlParser.DOMAIN_INDEX_FILTER, 0); }
		public TerminalNode DOMAIN_INDEX_NO_SORT() { return getToken(PlSqlParser.DOMAIN_INDEX_NO_SORT, 0); }
		public TerminalNode DOMAIN_INDEX_SORT() { return getToken(PlSqlParser.DOMAIN_INDEX_SORT, 0); }
		public TerminalNode DOUBLE() { return getToken(PlSqlParser.DOUBLE, 0); }
		public TerminalNode DOWNGRADE() { return getToken(PlSqlParser.DOWNGRADE, 0); }
		public TerminalNode DRIVING_SITE() { return getToken(PlSqlParser.DRIVING_SITE, 0); }
		public TerminalNode DROP_COLUMN() { return getToken(PlSqlParser.DROP_COLUMN, 0); }
		public TerminalNode DROP_GROUP() { return getToken(PlSqlParser.DROP_GROUP, 0); }
		public TerminalNode DST_UPGRADE_INSERT_CONV() { return getToken(PlSqlParser.DST_UPGRADE_INSERT_CONV, 0); }
		public TerminalNode DUMP() { return getToken(PlSqlParser.DUMP, 0); }
		public TerminalNode DOY() { return getToken(PlSqlParser.DOY, 0); }
		public TerminalNode DYNAMIC() { return getToken(PlSqlParser.DYNAMIC, 0); }
		public TerminalNode DYNAMIC_SAMPLING_EST_CDN() { return getToken(PlSqlParser.DYNAMIC_SAMPLING_EST_CDN, 0); }
		public TerminalNode DYNAMIC_SAMPLING() { return getToken(PlSqlParser.DYNAMIC_SAMPLING, 0); }
		public TerminalNode EACH() { return getToken(PlSqlParser.EACH, 0); }
		public TerminalNode EDITIONING() { return getToken(PlSqlParser.EDITIONING, 0); }
		public TerminalNode EDITION() { return getToken(PlSqlParser.EDITION, 0); }
		public TerminalNode EDITIONS() { return getToken(PlSqlParser.EDITIONS, 0); }
		public TerminalNode ELEMENT() { return getToken(PlSqlParser.ELEMENT, 0); }
		public TerminalNode ELIMINATE_JOIN() { return getToken(PlSqlParser.ELIMINATE_JOIN, 0); }
		public TerminalNode ELIMINATE_OBY() { return getToken(PlSqlParser.ELIMINATE_OBY, 0); }
		public TerminalNode ELIMINATE_OUTER_JOIN() { return getToken(PlSqlParser.ELIMINATE_OUTER_JOIN, 0); }
		public TerminalNode EMPTY_BLOB() { return getToken(PlSqlParser.EMPTY_BLOB, 0); }
		public TerminalNode EMPTY_CLOB() { return getToken(PlSqlParser.EMPTY_CLOB, 0); }
		public TerminalNode EMPTY() { return getToken(PlSqlParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode ENABLE_PRESET() { return getToken(PlSqlParser.ENABLE_PRESET, 0); }
		public TerminalNode ENCODING() { return getToken(PlSqlParser.ENCODING, 0); }
		public TerminalNode ENCRYPTION() { return getToken(PlSqlParser.ENCRYPTION, 0); }
		public TerminalNode ENCRYPT() { return getToken(PlSqlParser.ENCRYPT, 0); }
		public TerminalNode END_OUTLINE_DATA() { return getToken(PlSqlParser.END_OUTLINE_DATA, 0); }
		public TerminalNode ENFORCED() { return getToken(PlSqlParser.ENFORCED, 0); }
		public TerminalNode ENFORCE() { return getToken(PlSqlParser.ENFORCE, 0); }
		public TerminalNode ENQUEUE() { return getToken(PlSqlParser.ENQUEUE, 0); }
		public TerminalNode ENTERPRISE() { return getToken(PlSqlParser.ENTERPRISE, 0); }
		public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
		public TerminalNode ENTRY() { return getToken(PlSqlParser.ENTRY, 0); }
		public TerminalNode ERROR_ARGUMENT() { return getToken(PlSqlParser.ERROR_ARGUMENT, 0); }
		public TerminalNode ERROR() { return getToken(PlSqlParser.ERROR, 0); }
		public TerminalNode ERROR_ON_OVERLAP_TIME() { return getToken(PlSqlParser.ERROR_ON_OVERLAP_TIME, 0); }
		public TerminalNode ERRORS() { return getToken(PlSqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(PlSqlParser.ESCAPE, 0); }
		public TerminalNode ESTIMATE() { return getToken(PlSqlParser.ESTIMATE, 0); }
		public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
		public TerminalNode EVALUATION() { return getToken(PlSqlParser.EVALUATION, 0); }
		public TerminalNode EVENTS() { return getToken(PlSqlParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(PlSqlParser.EVERY, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public TerminalNode EXCEPT() { return getToken(PlSqlParser.EXCEPT, 0); }
		public TerminalNode EXCHANGE() { return getToken(PlSqlParser.EXCHANGE, 0); }
		public TerminalNode EXCLUDE() { return getToken(PlSqlParser.EXCLUDE, 0); }
		public TerminalNode EXCLUDING() { return getToken(PlSqlParser.EXCLUDING, 0); }
		public TerminalNode EXECUTE() { return getToken(PlSqlParser.EXECUTE, 0); }
		public TerminalNode EXEMPT() { return getToken(PlSqlParser.EXEMPT, 0); }
		public TerminalNode EXISTSNODE() { return getToken(PlSqlParser.EXISTSNODE, 0); }
		public TerminalNode EXPAND_GSET_TO_UNION() { return getToken(PlSqlParser.EXPAND_GSET_TO_UNION, 0); }
		public TerminalNode EXPAND_TABLE() { return getToken(PlSqlParser.EXPAND_TABLE, 0); }
		public TerminalNode EXPIRE() { return getToken(PlSqlParser.EXPIRE, 0); }
		public TerminalNode EXPLAIN() { return getToken(PlSqlParser.EXPLAIN, 0); }
		public TerminalNode EXPLOSION() { return getToken(PlSqlParser.EXPLOSION, 0); }
		public TerminalNode EXP() { return getToken(PlSqlParser.EXP, 0); }
		public TerminalNode EXPORT() { return getToken(PlSqlParser.EXPORT, 0); }
		public TerminalNode EXPR_CORR_CHECK() { return getToken(PlSqlParser.EXPR_CORR_CHECK, 0); }
		public TerminalNode EXTENDS() { return getToken(PlSqlParser.EXTENDS, 0); }
		public TerminalNode EXTENT() { return getToken(PlSqlParser.EXTENT, 0); }
		public TerminalNode EXTENTS() { return getToken(PlSqlParser.EXTENTS, 0); }
		public TerminalNode EXTERNALLY() { return getToken(PlSqlParser.EXTERNALLY, 0); }
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(PlSqlParser.EXTRACT, 0); }
		public TerminalNode EXTRACTVALUE() { return getToken(PlSqlParser.EXTRACTVALUE, 0); }
		public TerminalNode EXTRA() { return getToken(PlSqlParser.EXTRA, 0); }
		public TerminalNode FACILITY() { return getToken(PlSqlParser.FACILITY, 0); }
		public TerminalNode FACT() { return getToken(PlSqlParser.FACT, 0); }
		public TerminalNode FACTORIZE_JOIN() { return getToken(PlSqlParser.FACTORIZE_JOIN, 0); }
		public TerminalNode FAILED_LOGIN_ATTEMPTS() { return getToken(PlSqlParser.FAILED_LOGIN_ATTEMPTS, 0); }
		public TerminalNode FAILED() { return getToken(PlSqlParser.FAILED, 0); }
		public TerminalNode FAILGROUP() { return getToken(PlSqlParser.FAILGROUP, 0); }
		public TerminalNode FALSE() { return getToken(PlSqlParser.FALSE, 0); }
		public TerminalNode FAST() { return getToken(PlSqlParser.FAST, 0); }
		public TerminalNode FBTSCAN() { return getToken(PlSqlParser.FBTSCAN, 0); }
		public TerminalNode FEATURE_ID() { return getToken(PlSqlParser.FEATURE_ID, 0); }
		public TerminalNode FEATURE_SET() { return getToken(PlSqlParser.FEATURE_SET, 0); }
		public TerminalNode FEATURE_VALUE() { return getToken(PlSqlParser.FEATURE_VALUE, 0); }
		public TerminalNode FILE() { return getToken(PlSqlParser.FILE, 0); }
		public TerminalNode FILESYSTEM_LIKE_LOGGING() { return getToken(PlSqlParser.FILESYSTEM_LIKE_LOGGING, 0); }
		public TerminalNode FILTER() { return getToken(PlSqlParser.FILTER, 0); }
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode FINE() { return getToken(PlSqlParser.FINE, 0); }
		public TerminalNode FINISH() { return getToken(PlSqlParser.FINISH, 0); }
		public TerminalNode FIRSTM() { return getToken(PlSqlParser.FIRSTM, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode FIRST_ROWS() { return getToken(PlSqlParser.FIRST_ROWS, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(PlSqlParser.FIRST_VALUE, 0); }
		public TerminalNode FLAGGER() { return getToken(PlSqlParser.FLAGGER, 0); }
		public TerminalNode FLASHBACK() { return getToken(PlSqlParser.FLASHBACK, 0); }
		public TerminalNode FLASH_CACHE() { return getToken(PlSqlParser.FLASH_CACHE, 0); }
		public TerminalNode FLOB() { return getToken(PlSqlParser.FLOB, 0); }
		public TerminalNode FLOOR() { return getToken(PlSqlParser.FLOOR, 0); }
		public TerminalNode FLUSH() { return getToken(PlSqlParser.FLUSH, 0); }
		public TerminalNode FOLDER() { return getToken(PlSqlParser.FOLDER, 0); }
		public TerminalNode FOLLOWING() { return getToken(PlSqlParser.FOLLOWING, 0); }
		public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public TerminalNode FORCE_XML_QUERY_REWRITE() { return getToken(PlSqlParser.FORCE_XML_QUERY_REWRITE, 0); }
		public TerminalNode FOREIGN() { return getToken(PlSqlParser.FOREIGN, 0); }
		public TerminalNode FOREVER() { return getToken(PlSqlParser.FOREVER, 0); }
		public TerminalNode FORWARD() { return getToken(PlSqlParser.FORWARD, 0); }
		public TerminalNode FRAGMENT_NUMBER() { return getToken(PlSqlParser.FRAGMENT_NUMBER, 0); }
		public TerminalNode FREELIST() { return getToken(PlSqlParser.FREELIST, 0); }
		public TerminalNode FREELISTS() { return getToken(PlSqlParser.FREELISTS, 0); }
		public TerminalNode FREEPOOLS() { return getToken(PlSqlParser.FREEPOOLS, 0); }
		public TerminalNode FRESH() { return getToken(PlSqlParser.FRESH, 0); }
		public TerminalNode FROM_TZ() { return getToken(PlSqlParser.FROM_TZ, 0); }
		public TerminalNode FULL() { return getToken(PlSqlParser.FULL, 0); }
		public TerminalNode FULL_OUTER_JOIN_TO_OUTER() { return getToken(PlSqlParser.FULL_OUTER_JOIN_TO_OUTER, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PlSqlParser.FUNCTIONS, 0); }
		public TerminalNode GATHER_PLAN_STATISTICS() { return getToken(PlSqlParser.GATHER_PLAN_STATISTICS, 0); }
		public TerminalNode GBY_CONC_ROLLUP() { return getToken(PlSqlParser.GBY_CONC_ROLLUP, 0); }
		public TerminalNode GBY_PUSHDOWN() { return getToken(PlSqlParser.GBY_PUSHDOWN, 0); }
		public TerminalNode GENERATED() { return getToken(PlSqlParser.GENERATED, 0); }
		public TerminalNode GLOBALLY() { return getToken(PlSqlParser.GLOBALLY, 0); }
		public TerminalNode GLOBAL() { return getToken(PlSqlParser.GLOBAL, 0); }
		public TerminalNode GLOBAL_NAME() { return getToken(PlSqlParser.GLOBAL_NAME, 0); }
		public TerminalNode GLOBAL_TOPIC_ENABLED() { return getToken(PlSqlParser.GLOBAL_TOPIC_ENABLED, 0); }
		public TerminalNode GREATEST() { return getToken(PlSqlParser.GREATEST, 0); }
		public TerminalNode GROUP_BY() { return getToken(PlSqlParser.GROUP_BY, 0); }
		public TerminalNode GROUP_ID() { return getToken(PlSqlParser.GROUP_ID, 0); }
		public TerminalNode GROUPING_ID() { return getToken(PlSqlParser.GROUPING_ID, 0); }
		public TerminalNode GROUPING() { return getToken(PlSqlParser.GROUPING, 0); }
		public TerminalNode GROUPS() { return getToken(PlSqlParser.GROUPS, 0); }
		public TerminalNode GUARANTEED() { return getToken(PlSqlParser.GUARANTEED, 0); }
		public TerminalNode GUARANTEE() { return getToken(PlSqlParser.GUARANTEE, 0); }
		public TerminalNode GUARD() { return getToken(PlSqlParser.GUARD, 0); }
		public TerminalNode HASH_AJ() { return getToken(PlSqlParser.HASH_AJ, 0); }
		public TerminalNode HASHKEYS() { return getToken(PlSqlParser.HASHKEYS, 0); }
		public TerminalNode HASH() { return getToken(PlSqlParser.HASH, 0); }
		public TerminalNode HASH_SJ() { return getToken(PlSqlParser.HASH_SJ, 0); }
		public TerminalNode HEADER() { return getToken(PlSqlParser.HEADER, 0); }
		public TerminalNode HEAP() { return getToken(PlSqlParser.HEAP, 0); }
		public TerminalNode HELP() { return getToken(PlSqlParser.HELP, 0); }
		public TerminalNode HEXTORAW() { return getToken(PlSqlParser.HEXTORAW, 0); }
		public TerminalNode HEXTOREF() { return getToken(PlSqlParser.HEXTOREF, 0); }
		public TerminalNode HIDDEN_KEYWORD() { return getToken(PlSqlParser.HIDDEN_KEYWORD, 0); }
		public TerminalNode HIDE() { return getToken(PlSqlParser.HIDE, 0); }
		public TerminalNode HIERARCHY() { return getToken(PlSqlParser.HIERARCHY, 0); }
		public TerminalNode HIGH() { return getToken(PlSqlParser.HIGH, 0); }
		public TerminalNode HINTSET_BEGIN() { return getToken(PlSqlParser.HINTSET_BEGIN, 0); }
		public TerminalNode HINTSET_END() { return getToken(PlSqlParser.HINTSET_END, 0); }
		public TerminalNode HOT() { return getToken(PlSqlParser.HOT, 0); }
		public TerminalNode HOUR() { return getToken(PlSqlParser.HOUR, 0); }
		public TerminalNode HWM_BROKERED() { return getToken(PlSqlParser.HWM_BROKERED, 0); }
		public TerminalNode HYBRID() { return getToken(PlSqlParser.HYBRID, 0); }
		public TerminalNode IDENTIFIER() { return getToken(PlSqlParser.IDENTIFIER, 0); }
		public TerminalNode IDENTITY() { return getToken(PlSqlParser.IDENTITY, 0); }
		public TerminalNode IDGENERATORS() { return getToken(PlSqlParser.IDGENERATORS, 0); }
		public TerminalNode IDLE_TIME() { return getToken(PlSqlParser.IDLE_TIME, 0); }
		public TerminalNode ID() { return getToken(PlSqlParser.ID, 0); }
		public TerminalNode IF() { return getToken(PlSqlParser.IF, 0); }
		public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
		public TerminalNode IGNORE_OPTIM_EMBEDDED_HINTS() { return getToken(PlSqlParser.IGNORE_OPTIM_EMBEDDED_HINTS, 0); }
		public TerminalNode IGNORE_ROW_ON_DUPKEY_INDEX() { return getToken(PlSqlParser.IGNORE_ROW_ON_DUPKEY_INDEX, 0); }
		public TerminalNode IGNORE_WHERE_CLAUSE() { return getToken(PlSqlParser.IGNORE_WHERE_CLAUSE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode IMPACT() { return getToken(PlSqlParser.IMPACT, 0); }
		public TerminalNode IMPORT() { return getToken(PlSqlParser.IMPORT, 0); }
		public TerminalNode INCLUDE() { return getToken(PlSqlParser.INCLUDE, 0); }
		public TerminalNode INCLUDE_VERSION() { return getToken(PlSqlParser.INCLUDE_VERSION, 0); }
		public TerminalNode INCLUDING() { return getToken(PlSqlParser.INCLUDING, 0); }
		public TerminalNode INCREMENTAL() { return getToken(PlSqlParser.INCREMENTAL, 0); }
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode INCR() { return getToken(PlSqlParser.INCR, 0); }
		public TerminalNode INDENT() { return getToken(PlSqlParser.INDENT, 0); }
		public TerminalNode INDEX_ASC() { return getToken(PlSqlParser.INDEX_ASC, 0); }
		public TerminalNode INDEX_COMBINE() { return getToken(PlSqlParser.INDEX_COMBINE, 0); }
		public TerminalNode INDEX_DESC() { return getToken(PlSqlParser.INDEX_DESC, 0); }
		public TerminalNode INDEXED() { return getToken(PlSqlParser.INDEXED, 0); }
		public TerminalNode INDEXES() { return getToken(PlSqlParser.INDEXES, 0); }
		public TerminalNode INDEX_FFS() { return getToken(PlSqlParser.INDEX_FFS, 0); }
		public TerminalNode INDEX_FILTER() { return getToken(PlSqlParser.INDEX_FILTER, 0); }
		public TerminalNode INDEX_JOIN() { return getToken(PlSqlParser.INDEX_JOIN, 0); }
		public TerminalNode INDEX_ROWS() { return getToken(PlSqlParser.INDEX_ROWS, 0); }
		public TerminalNode INDEX_RRS() { return getToken(PlSqlParser.INDEX_RRS, 0); }
		public TerminalNode INDEX_RS_ASC() { return getToken(PlSqlParser.INDEX_RS_ASC, 0); }
		public TerminalNode INDEX_RS_DESC() { return getToken(PlSqlParser.INDEX_RS_DESC, 0); }
		public TerminalNode INDEX_RS() { return getToken(PlSqlParser.INDEX_RS, 0); }
		public TerminalNode INDEX_SCAN() { return getToken(PlSqlParser.INDEX_SCAN, 0); }
		public TerminalNode INDEX_SKIP_SCAN() { return getToken(PlSqlParser.INDEX_SKIP_SCAN, 0); }
		public TerminalNode INDEX_SS_ASC() { return getToken(PlSqlParser.INDEX_SS_ASC, 0); }
		public TerminalNode INDEX_SS_DESC() { return getToken(PlSqlParser.INDEX_SS_DESC, 0); }
		public TerminalNode INDEX_SS() { return getToken(PlSqlParser.INDEX_SS, 0); }
		public TerminalNode INDEX_STATS() { return getToken(PlSqlParser.INDEX_STATS, 0); }
		public TerminalNode INDEXTYPE() { return getToken(PlSqlParser.INDEXTYPE, 0); }
		public TerminalNode INDEXTYPES() { return getToken(PlSqlParser.INDEXTYPES, 0); }
		public TerminalNode INDICATOR() { return getToken(PlSqlParser.INDICATOR, 0); }
		public TerminalNode INFINITE() { return getToken(PlSqlParser.INFINITE, 0); }
		public TerminalNode INFORMATIONAL() { return getToken(PlSqlParser.INFORMATIONAL, 0); }
		public TerminalNode INITCAP() { return getToken(PlSqlParser.INITCAP, 0); }
		public TerminalNode INITIALIZED() { return getToken(PlSqlParser.INITIALIZED, 0); }
		public TerminalNode INITIALLY() { return getToken(PlSqlParser.INITIALLY, 0); }
		public TerminalNode INITIAL() { return getToken(PlSqlParser.INITIAL, 0); }
		public TerminalNode INITRANS() { return getToken(PlSqlParser.INITRANS, 0); }
		public TerminalNode INLINE() { return getToken(PlSqlParser.INLINE, 0); }
		public TerminalNode INLINE_XMLTYPE_NT() { return getToken(PlSqlParser.INLINE_XMLTYPE_NT, 0); }
		public TerminalNode IN_MEMORY_METADATA() { return getToken(PlSqlParser.IN_MEMORY_METADATA, 0); }
		public TerminalNode INNER() { return getToken(PlSqlParser.INNER, 0); }
		public TerminalNode INSERTCHILDXMLAFTER() { return getToken(PlSqlParser.INSERTCHILDXMLAFTER, 0); }
		public TerminalNode INSERTCHILDXMLBEFORE() { return getToken(PlSqlParser.INSERTCHILDXMLBEFORE, 0); }
		public TerminalNode INSERTCHILDXML() { return getToken(PlSqlParser.INSERTCHILDXML, 0); }
		public TerminalNode INSERTXMLAFTER() { return getToken(PlSqlParser.INSERTXMLAFTER, 0); }
		public TerminalNode INSERTXMLBEFORE() { return getToken(PlSqlParser.INSERTXMLBEFORE, 0); }
		public TerminalNode INSTANCE() { return getToken(PlSqlParser.INSTANCE, 0); }
		public TerminalNode INSTANCES() { return getToken(PlSqlParser.INSTANCES, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public TerminalNode INSTANTLY() { return getToken(PlSqlParser.INSTANTLY, 0); }
		public TerminalNode INSTEAD() { return getToken(PlSqlParser.INSTEAD, 0); }
		public TerminalNode INSTR2() { return getToken(PlSqlParser.INSTR2, 0); }
		public TerminalNode INSTR4() { return getToken(PlSqlParser.INSTR4, 0); }
		public TerminalNode INSTRB() { return getToken(PlSqlParser.INSTRB, 0); }
		public TerminalNode INSTRC() { return getToken(PlSqlParser.INSTRC, 0); }
		public TerminalNode INSTR() { return getToken(PlSqlParser.INSTR, 0); }
		public TerminalNode INTERMEDIATE() { return getToken(PlSqlParser.INTERMEDIATE, 0); }
		public TerminalNode INTERNAL_CONVERT() { return getToken(PlSqlParser.INTERNAL_CONVERT, 0); }
		public TerminalNode INTERNAL_USE() { return getToken(PlSqlParser.INTERNAL_USE, 0); }
		public TerminalNode INTERPRETED() { return getToken(PlSqlParser.INTERPRETED, 0); }
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public TerminalNode INT() { return getToken(PlSqlParser.INT, 0); }
		public TerminalNode INVALIDATE() { return getToken(PlSqlParser.INVALIDATE, 0); }
		public TerminalNode INVISIBLE() { return getToken(PlSqlParser.INVISIBLE, 0); }
		public TerminalNode IN_XQUERY() { return getToken(PlSqlParser.IN_XQUERY, 0); }
		public TerminalNode ISOLATION_LEVEL() { return getToken(PlSqlParser.ISOLATION_LEVEL, 0); }
		public TerminalNode ISOLATION() { return getToken(PlSqlParser.ISOLATION, 0); }
		public TerminalNode ITERATE() { return getToken(PlSqlParser.ITERATE, 0); }
		public TerminalNode ITERATION_NUMBER() { return getToken(PlSqlParser.ITERATION_NUMBER, 0); }
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode JOB() { return getToken(PlSqlParser.JOB, 0); }
		public TerminalNode JOIN() { return getToken(PlSqlParser.JOIN, 0); }
		public TerminalNode KEEP_DUPLICATES() { return getToken(PlSqlParser.KEEP_DUPLICATES, 0); }
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode KERBEROS() { return getToken(PlSqlParser.KERBEROS, 0); }
		public TerminalNode KEY_LENGTH() { return getToken(PlSqlParser.KEY_LENGTH, 0); }
		public TerminalNode KEY() { return getToken(PlSqlParser.KEY, 0); }
		public TerminalNode KEYSIZE() { return getToken(PlSqlParser.KEYSIZE, 0); }
		public TerminalNode KEYS() { return getToken(PlSqlParser.KEYS, 0); }
		public TerminalNode KILL() { return getToken(PlSqlParser.KILL, 0); }
		public TerminalNode LAG() { return getToken(PlSqlParser.LAG, 0); }
		public TerminalNode LAST_DAY() { return getToken(PlSqlParser.LAST_DAY, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(PlSqlParser.LAST_VALUE, 0); }
		public TerminalNode LATERAL() { return getToken(PlSqlParser.LATERAL, 0); }
		public TerminalNode LAYER() { return getToken(PlSqlParser.LAYER, 0); }
		public TerminalNode LDAP_REGISTRATION_ENABLED() { return getToken(PlSqlParser.LDAP_REGISTRATION_ENABLED, 0); }
		public TerminalNode LDAP_REGISTRATION() { return getToken(PlSqlParser.LDAP_REGISTRATION, 0); }
		public TerminalNode LDAP_REG_SYNC_INTERVAL() { return getToken(PlSqlParser.LDAP_REG_SYNC_INTERVAL, 0); }
		public TerminalNode LEADING() { return getToken(PlSqlParser.LEADING, 0); }
		public TerminalNode LEAD() { return getToken(PlSqlParser.LEAD, 0); }
		public TerminalNode LEAF() { return getToken(PlSqlParser.LEAF, 0); }
		public TerminalNode LEAST() { return getToken(PlSqlParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(PlSqlParser.LEFT, 0); }
		public TerminalNode LENGTH2() { return getToken(PlSqlParser.LENGTH2, 0); }
		public TerminalNode LENGTH4() { return getToken(PlSqlParser.LENGTH4, 0); }
		public TerminalNode LENGTHB() { return getToken(PlSqlParser.LENGTHB, 0); }
		public TerminalNode LENGTHC() { return getToken(PlSqlParser.LENGTHC, 0); }
		public TerminalNode LENGTH() { return getToken(PlSqlParser.LENGTH, 0); }
		public TerminalNode LESS() { return getToken(PlSqlParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(PlSqlParser.LEVEL, 0); }
		public TerminalNode LEVELS() { return getToken(PlSqlParser.LEVELS, 0); }
		public TerminalNode LIBRARY() { return getToken(PlSqlParser.LIBRARY, 0); }
		public TerminalNode LIFE() { return getToken(PlSqlParser.LIFE, 0); }
		public TerminalNode LIFETIME() { return getToken(PlSqlParser.LIFETIME, 0); }
		public TerminalNode LIKE2() { return getToken(PlSqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(PlSqlParser.LIKE4, 0); }
		public TerminalNode LIKEC() { return getToken(PlSqlParser.LIKEC, 0); }
		public TerminalNode LIKE_EXPAND() { return getToken(PlSqlParser.LIKE_EXPAND, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public TerminalNode LINK() { return getToken(PlSqlParser.LINK, 0); }
		public TerminalNode LISTAGG() { return getToken(PlSqlParser.LISTAGG, 0); }
		public TerminalNode LIST() { return getToken(PlSqlParser.LIST, 0); }
		public TerminalNode LN() { return getToken(PlSqlParser.LN, 0); }
		public TerminalNode LNNVL() { return getToken(PlSqlParser.LNNVL, 0); }
		public TerminalNode LOAD() { return getToken(PlSqlParser.LOAD, 0); }
		public TerminalNode LOB() { return getToken(PlSqlParser.LOB, 0); }
		public TerminalNode LOBNVL() { return getToken(PlSqlParser.LOBNVL, 0); }
		public TerminalNode LOBS() { return getToken(PlSqlParser.LOBS, 0); }
		public TerminalNode LOCAL_INDEXES() { return getToken(PlSqlParser.LOCAL_INDEXES, 0); }
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode LOCALTIME() { return getToken(PlSqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PlSqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode LOCATION() { return getToken(PlSqlParser.LOCATION, 0); }
		public TerminalNode LOCATOR() { return getToken(PlSqlParser.LOCATOR, 0); }
		public TerminalNode LOCKED() { return getToken(PlSqlParser.LOCKED, 0); }
		public TerminalNode LOGFILE() { return getToken(PlSqlParser.LOGFILE, 0); }
		public TerminalNode LOGFILES() { return getToken(PlSqlParser.LOGFILES, 0); }
		public TerminalNode LOGGING() { return getToken(PlSqlParser.LOGGING, 0); }
		public TerminalNode LOGICAL() { return getToken(PlSqlParser.LOGICAL, 0); }
		public TerminalNode LOGICAL_READS_PER_CALL() { return getToken(PlSqlParser.LOGICAL_READS_PER_CALL, 0); }
		public TerminalNode LOGICAL_READS_PER_SESSION() { return getToken(PlSqlParser.LOGICAL_READS_PER_SESSION, 0); }
		public TerminalNode LOG() { return getToken(PlSqlParser.LOG, 0); }
		public TerminalNode LOGOFF() { return getToken(PlSqlParser.LOGOFF, 0); }
		public TerminalNode LOGON() { return getToken(PlSqlParser.LOGON, 0); }
		public TerminalNode LOG_READ_ONLY_VIOLATIONS() { return getToken(PlSqlParser.LOG_READ_ONLY_VIOLATIONS, 0); }
		public TerminalNode LOWER() { return getToken(PlSqlParser.LOWER, 0); }
		public TerminalNode LOW() { return getToken(PlSqlParser.LOW, 0); }
		public TerminalNode LPAD() { return getToken(PlSqlParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(PlSqlParser.LTRIM, 0); }
		public TerminalNode MAIN() { return getToken(PlSqlParser.MAIN, 0); }
		public TerminalNode MAKE_REF() { return getToken(PlSqlParser.MAKE_REF, 0); }
		public TerminalNode MANAGED() { return getToken(PlSqlParser.MANAGED, 0); }
		public TerminalNode MANAGEMENT() { return getToken(PlSqlParser.MANAGEMENT, 0); }
		public TerminalNode MANAGE() { return getToken(PlSqlParser.MANAGE, 0); }
		public TerminalNode MANAGER() { return getToken(PlSqlParser.MANAGER, 0); }
		public TerminalNode MANUAL() { return getToken(PlSqlParser.MANUAL, 0); }
		public TerminalNode MAPPING() { return getToken(PlSqlParser.MAPPING, 0); }
		public TerminalNode MASTER() { return getToken(PlSqlParser.MASTER, 0); }
		public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PlSqlParser.MATERIALIZED, 0); }
		public TerminalNode MATERIALIZE() { return getToken(PlSqlParser.MATERIALIZE, 0); }
		public TerminalNode MAXARCHLOGS() { return getToken(PlSqlParser.MAXARCHLOGS, 0); }
		public TerminalNode MAXDATAFILES() { return getToken(PlSqlParser.MAXDATAFILES, 0); }
		public TerminalNode MAXEXTENTS() { return getToken(PlSqlParser.MAXEXTENTS, 0); }
		public TerminalNode MAXIMIZE() { return getToken(PlSqlParser.MAXIMIZE, 0); }
		public TerminalNode MAXINSTANCES() { return getToken(PlSqlParser.MAXINSTANCES, 0); }
		public TerminalNode MAXLOGFILES() { return getToken(PlSqlParser.MAXLOGFILES, 0); }
		public TerminalNode MAXLOGHISTORY() { return getToken(PlSqlParser.MAXLOGHISTORY, 0); }
		public TerminalNode MAXLOGMEMBERS() { return getToken(PlSqlParser.MAXLOGMEMBERS, 0); }
		public TerminalNode MAX() { return getToken(PlSqlParser.MAX, 0); }
		public TerminalNode MAXSIZE() { return getToken(PlSqlParser.MAXSIZE, 0); }
		public TerminalNode MAXTRANS() { return getToken(PlSqlParser.MAXTRANS, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode MEASURE() { return getToken(PlSqlParser.MEASURE, 0); }
		public TerminalNode MEASURES() { return getToken(PlSqlParser.MEASURES, 0); }
		public TerminalNode MEDIAN() { return getToken(PlSqlParser.MEDIAN, 0); }
		public TerminalNode MEDIUM() { return getToken(PlSqlParser.MEDIUM, 0); }
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode MEMOPTIMIZE() { return getToken(PlSqlParser.MEMOPTIMIZE, 0); }
		public TerminalNode MEMORY() { return getToken(PlSqlParser.MEMORY, 0); }
		public TerminalNode MERGEACTIONS() { return getToken(PlSqlParser.MERGEACTIONS, 0); }
		public TerminalNode MERGE_AJ() { return getToken(PlSqlParser.MERGE_AJ, 0); }
		public TerminalNode MERGE_CONST_ON() { return getToken(PlSqlParser.MERGE_CONST_ON, 0); }
		public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
		public TerminalNode MERGE_SJ() { return getToken(PlSqlParser.MERGE_SJ, 0); }
		public TerminalNode METHOD() { return getToken(PlSqlParser.METHOD, 0); }
		public TerminalNode MIGRATE() { return getToken(PlSqlParser.MIGRATE, 0); }
		public TerminalNode MIGRATION() { return getToken(PlSqlParser.MIGRATION, 0); }
		public TerminalNode MINEXTENTS() { return getToken(PlSqlParser.MINEXTENTS, 0); }
		public TerminalNode MINIMIZE() { return getToken(PlSqlParser.MINIMIZE, 0); }
		public TerminalNode MINIMUM() { return getToken(PlSqlParser.MINIMUM, 0); }
		public TerminalNode MINING() { return getToken(PlSqlParser.MINING, 0); }
		public TerminalNode MIN() { return getToken(PlSqlParser.MIN, 0); }
		public TerminalNode MINUS_NULL() { return getToken(PlSqlParser.MINUS_NULL, 0); }
		public TerminalNode MINUTE() { return getToken(PlSqlParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode MIRRORCOLD() { return getToken(PlSqlParser.MIRRORCOLD, 0); }
		public TerminalNode MIRRORHOT() { return getToken(PlSqlParser.MIRRORHOT, 0); }
		public TerminalNode MIRROR() { return getToken(PlSqlParser.MIRROR, 0); }
		public TerminalNode MLSLABEL() { return getToken(PlSqlParser.MLSLABEL, 0); }
		public TerminalNode MODEL_COMPILE_SUBQUERY() { return getToken(PlSqlParser.MODEL_COMPILE_SUBQUERY, 0); }
		public TerminalNode MODEL_DONTVERIFY_UNIQUENESS() { return getToken(PlSqlParser.MODEL_DONTVERIFY_UNIQUENESS, 0); }
		public TerminalNode MODEL_DYNAMIC_SUBQUERY() { return getToken(PlSqlParser.MODEL_DYNAMIC_SUBQUERY, 0); }
		public TerminalNode MODEL_MIN_ANALYSIS() { return getToken(PlSqlParser.MODEL_MIN_ANALYSIS, 0); }
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public TerminalNode MODEL_NO_ANALYSIS() { return getToken(PlSqlParser.MODEL_NO_ANALYSIS, 0); }
		public TerminalNode MODEL_PBY() { return getToken(PlSqlParser.MODEL_PBY, 0); }
		public TerminalNode MODEL_PUSH_REF() { return getToken(PlSqlParser.MODEL_PUSH_REF, 0); }
		public TerminalNode MODIFY_COLUMN_TYPE() { return getToken(PlSqlParser.MODIFY_COLUMN_TYPE, 0); }
		public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
		public TerminalNode MOD() { return getToken(PlSqlParser.MOD, 0); }
		public TerminalNode MONITORING() { return getToken(PlSqlParser.MONITORING, 0); }
		public TerminalNode MONITOR() { return getToken(PlSqlParser.MONITOR, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode MONTHS_BETWEEN() { return getToken(PlSqlParser.MONTHS_BETWEEN, 0); }
		public TerminalNode MOUNT() { return getToken(PlSqlParser.MOUNT, 0); }
		public TerminalNode MOUNTPATH() { return getToken(PlSqlParser.MOUNTPATH, 0); }
		public TerminalNode MOVEMENT() { return getToken(PlSqlParser.MOVEMENT, 0); }
		public TerminalNode MOVE() { return getToken(PlSqlParser.MOVE, 0); }
		public TerminalNode MULTISET() { return getToken(PlSqlParser.MULTISET, 0); }
		public TerminalNode MV_MERGE() { return getToken(PlSqlParser.MV_MERGE, 0); }
		public TerminalNode NAMED() { return getToken(PlSqlParser.NAMED, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode NAMESPACE() { return getToken(PlSqlParser.NAMESPACE, 0); }
		public TerminalNode NAN() { return getToken(PlSqlParser.NAN, 0); }
		public TerminalNode NANVL() { return getToken(PlSqlParser.NANVL, 0); }
		public TerminalNode NATIONAL() { return getToken(PlSqlParser.NATIONAL, 0); }
		public TerminalNode NATIVE_FULL_OUTER_JOIN() { return getToken(PlSqlParser.NATIVE_FULL_OUTER_JOIN, 0); }
		public TerminalNode NATIVE() { return getToken(PlSqlParser.NATIVE, 0); }
		public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
		public TerminalNode NAV() { return getToken(PlSqlParser.NAV, 0); }
		public TerminalNode NCHAR_CS() { return getToken(PlSqlParser.NCHAR_CS, 0); }
		public TerminalNode NCHAR() { return getToken(PlSqlParser.NCHAR, 0); }
		public TerminalNode NCHR() { return getToken(PlSqlParser.NCHR, 0); }
		public TerminalNode NCLOB() { return getToken(PlSqlParser.NCLOB, 0); }
		public TerminalNode NEEDED() { return getToken(PlSqlParser.NEEDED, 0); }
		public TerminalNode NESTED() { return getToken(PlSqlParser.NESTED, 0); }
		public TerminalNode NESTED_TABLE_FAST_INSERT() { return getToken(PlSqlParser.NESTED_TABLE_FAST_INSERT, 0); }
		public TerminalNode NESTED_TABLE_GET_REFS() { return getToken(PlSqlParser.NESTED_TABLE_GET_REFS, 0); }
		public TerminalNode NESTED_TABLE_ID() { return getToken(PlSqlParser.NESTED_TABLE_ID, 0); }
		public TerminalNode NESTED_TABLE_SET_REFS() { return getToken(PlSqlParser.NESTED_TABLE_SET_REFS, 0); }
		public TerminalNode NESTED_TABLE_SET_SETID() { return getToken(PlSqlParser.NESTED_TABLE_SET_SETID, 0); }
		public TerminalNode NETWORK() { return getToken(PlSqlParser.NETWORK, 0); }
		public TerminalNode NEVER() { return getToken(PlSqlParser.NEVER, 0); }
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode NEW_TIME() { return getToken(PlSqlParser.NEW_TIME, 0); }
		public TerminalNode NEXT_DAY() { return getToken(PlSqlParser.NEXT_DAY, 0); }
		public TerminalNode NEXT() { return getToken(PlSqlParser.NEXT, 0); }
		public TerminalNode NL_AJ() { return getToken(PlSqlParser.NL_AJ, 0); }
		public TerminalNode NLJ_BATCHING() { return getToken(PlSqlParser.NLJ_BATCHING, 0); }
		public TerminalNode NLJ_INDEX_FILTER() { return getToken(PlSqlParser.NLJ_INDEX_FILTER, 0); }
		public TerminalNode NLJ_INDEX_SCAN() { return getToken(PlSqlParser.NLJ_INDEX_SCAN, 0); }
		public TerminalNode NLJ_PREFETCH() { return getToken(PlSqlParser.NLJ_PREFETCH, 0); }
		public TerminalNode NLS_CALENDAR() { return getToken(PlSqlParser.NLS_CALENDAR, 0); }
		public TerminalNode NLS_CHARACTERSET() { return getToken(PlSqlParser.NLS_CHARACTERSET, 0); }
		public TerminalNode NLS_CHARSET_DECL_LEN() { return getToken(PlSqlParser.NLS_CHARSET_DECL_LEN, 0); }
		public TerminalNode NLS_CHARSET_ID() { return getToken(PlSqlParser.NLS_CHARSET_ID, 0); }
		public TerminalNode NLS_CHARSET_NAME() { return getToken(PlSqlParser.NLS_CHARSET_NAME, 0); }
		public TerminalNode NLS_COMP() { return getToken(PlSqlParser.NLS_COMP, 0); }
		public TerminalNode NLS_CURRENCY() { return getToken(PlSqlParser.NLS_CURRENCY, 0); }
		public TerminalNode NLS_DATE_FORMAT() { return getToken(PlSqlParser.NLS_DATE_FORMAT, 0); }
		public TerminalNode NLS_DATE_LANGUAGE() { return getToken(PlSqlParser.NLS_DATE_LANGUAGE, 0); }
		public TerminalNode NLS_INITCAP() { return getToken(PlSqlParser.NLS_INITCAP, 0); }
		public TerminalNode NLS_ISO_CURRENCY() { return getToken(PlSqlParser.NLS_ISO_CURRENCY, 0); }
		public TerminalNode NL_SJ() { return getToken(PlSqlParser.NL_SJ, 0); }
		public TerminalNode NLS_LANG() { return getToken(PlSqlParser.NLS_LANG, 0); }
		public TerminalNode NLS_LANGUAGE() { return getToken(PlSqlParser.NLS_LANGUAGE, 0); }
		public TerminalNode NLS_LENGTH_SEMANTICS() { return getToken(PlSqlParser.NLS_LENGTH_SEMANTICS, 0); }
		public TerminalNode NLS_LOWER() { return getToken(PlSqlParser.NLS_LOWER, 0); }
		public TerminalNode NLS_NCHAR_CONV_EXCP() { return getToken(PlSqlParser.NLS_NCHAR_CONV_EXCP, 0); }
		public TerminalNode NLS_NUMERIC_CHARACTERS() { return getToken(PlSqlParser.NLS_NUMERIC_CHARACTERS, 0); }
		public TerminalNode NLS_SORT() { return getToken(PlSqlParser.NLS_SORT, 0); }
		public TerminalNode NLSSORT() { return getToken(PlSqlParser.NLSSORT, 0); }
		public TerminalNode NLS_SPECIAL_CHARS() { return getToken(PlSqlParser.NLS_SPECIAL_CHARS, 0); }
		public TerminalNode NLS_TERRITORY() { return getToken(PlSqlParser.NLS_TERRITORY, 0); }
		public TerminalNode NLS_UPPER() { return getToken(PlSqlParser.NLS_UPPER, 0); }
		public TerminalNode NO_ACCESS() { return getToken(PlSqlParser.NO_ACCESS, 0); }
		public TerminalNode NOAPPEND() { return getToken(PlSqlParser.NOAPPEND, 0); }
		public TerminalNode NOARCHIVELOG() { return getToken(PlSqlParser.NOARCHIVELOG, 0); }
		public TerminalNode NOAUDIT() { return getToken(PlSqlParser.NOAUDIT, 0); }
		public TerminalNode NO_BASETABLE_MULTIMV_REWRITE() { return getToken(PlSqlParser.NO_BASETABLE_MULTIMV_REWRITE, 0); }
		public TerminalNode NO_BIND_AWARE() { return getToken(PlSqlParser.NO_BIND_AWARE, 0); }
		public TerminalNode NO_BUFFER() { return getToken(PlSqlParser.NO_BUFFER, 0); }
		public TerminalNode NOCACHE() { return getToken(PlSqlParser.NOCACHE, 0); }
		public TerminalNode NO_CARTESIAN() { return getToken(PlSqlParser.NO_CARTESIAN, 0); }
		public TerminalNode NO_CHECK_ACL_REWRITE() { return getToken(PlSqlParser.NO_CHECK_ACL_REWRITE, 0); }
		public TerminalNode NO_CLUSTER_BY_ROWID() { return getToken(PlSqlParser.NO_CLUSTER_BY_ROWID, 0); }
		public TerminalNode NO_COALESCE_SQ() { return getToken(PlSqlParser.NO_COALESCE_SQ, 0); }
		public TerminalNode NO_CONNECT_BY_CB_WHR_ONLY() { return getToken(PlSqlParser.NO_CONNECT_BY_CB_WHR_ONLY, 0); }
		public TerminalNode NO_CONNECT_BY_COMBINE_SW() { return getToken(PlSqlParser.NO_CONNECT_BY_COMBINE_SW, 0); }
		public TerminalNode NO_CONNECT_BY_COST_BASED() { return getToken(PlSqlParser.NO_CONNECT_BY_COST_BASED, 0); }
		public TerminalNode NO_CONNECT_BY_ELIM_DUPS() { return getToken(PlSqlParser.NO_CONNECT_BY_ELIM_DUPS, 0); }
		public TerminalNode NO_CONNECT_BY_FILTERING() { return getToken(PlSqlParser.NO_CONNECT_BY_FILTERING, 0); }
		public TerminalNode NO_COST_XML_QUERY_REWRITE() { return getToken(PlSqlParser.NO_COST_XML_QUERY_REWRITE, 0); }
		public TerminalNode NO_CPU_COSTING() { return getToken(PlSqlParser.NO_CPU_COSTING, 0); }
		public TerminalNode NOCPU_COSTING() { return getToken(PlSqlParser.NOCPU_COSTING, 0); }
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public TerminalNode NODELAY() { return getToken(PlSqlParser.NODELAY, 0); }
		public TerminalNode NO_DOMAIN_INDEX_FILTER() { return getToken(PlSqlParser.NO_DOMAIN_INDEX_FILTER, 0); }
		public TerminalNode NO_DST_UPGRADE_INSERT_CONV() { return getToken(PlSqlParser.NO_DST_UPGRADE_INSERT_CONV, 0); }
		public TerminalNode NO_ELIMINATE_JOIN() { return getToken(PlSqlParser.NO_ELIMINATE_JOIN, 0); }
		public TerminalNode NO_ELIMINATE_OBY() { return getToken(PlSqlParser.NO_ELIMINATE_OBY, 0); }
		public TerminalNode NO_ELIMINATE_OUTER_JOIN() { return getToken(PlSqlParser.NO_ELIMINATE_OUTER_JOIN, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NO_EXPAND_GSET_TO_UNION() { return getToken(PlSqlParser.NO_EXPAND_GSET_TO_UNION, 0); }
		public TerminalNode NO_EXPAND() { return getToken(PlSqlParser.NO_EXPAND, 0); }
		public TerminalNode NO_EXPAND_TABLE() { return getToken(PlSqlParser.NO_EXPAND_TABLE, 0); }
		public TerminalNode NO_FACT() { return getToken(PlSqlParser.NO_FACT, 0); }
		public TerminalNode NO_FACTORIZE_JOIN() { return getToken(PlSqlParser.NO_FACTORIZE_JOIN, 0); }
		public TerminalNode NO_FILTERING() { return getToken(PlSqlParser.NO_FILTERING, 0); }
		public TerminalNode NOFORCE() { return getToken(PlSqlParser.NOFORCE, 0); }
		public TerminalNode NO_FULL_OUTER_JOIN_TO_OUTER() { return getToken(PlSqlParser.NO_FULL_OUTER_JOIN_TO_OUTER, 0); }
		public TerminalNode NO_GBY_PUSHDOWN() { return getToken(PlSqlParser.NO_GBY_PUSHDOWN, 0); }
		public TerminalNode NOGUARANTEE() { return getToken(PlSqlParser.NOGUARANTEE, 0); }
		public TerminalNode NO_INDEX_FFS() { return getToken(PlSqlParser.NO_INDEX_FFS, 0); }
		public TerminalNode NO_INDEX() { return getToken(PlSqlParser.NO_INDEX, 0); }
		public TerminalNode NO_INDEX_SS() { return getToken(PlSqlParser.NO_INDEX_SS, 0); }
		public TerminalNode NO_LOAD() { return getToken(PlSqlParser.NO_LOAD, 0); }
		public TerminalNode NOLOCAL() { return getToken(PlSqlParser.NOLOCAL, 0); }
		public TerminalNode NOLOGGING() { return getToken(PlSqlParser.NOLOGGING, 0); }
		public TerminalNode NOMAPPING() { return getToken(PlSqlParser.NOMAPPING, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(PlSqlParser.NOMAXVALUE, 0); }
		public TerminalNode NO_MERGE() { return getToken(PlSqlParser.NO_MERGE, 0); }
		public TerminalNode NOMINIMIZE() { return getToken(PlSqlParser.NOMINIMIZE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(PlSqlParser.NOMINVALUE, 0); }
		public TerminalNode NO_MODEL_PUSH_REF() { return getToken(PlSqlParser.NO_MODEL_PUSH_REF, 0); }
		public TerminalNode NO_MONITORING() { return getToken(PlSqlParser.NO_MONITORING, 0); }
		public TerminalNode NOMONITORING() { return getToken(PlSqlParser.NOMONITORING, 0); }
		public TerminalNode NO_MONITOR() { return getToken(PlSqlParser.NO_MONITOR, 0); }
		public TerminalNode NO_MULTIMV_REWRITE() { return getToken(PlSqlParser.NO_MULTIMV_REWRITE, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode NO_NATIVE_FULL_OUTER_JOIN() { return getToken(PlSqlParser.NO_NATIVE_FULL_OUTER_JOIN, 0); }
		public TerminalNode NONBLOCKING() { return getToken(PlSqlParser.NONBLOCKING, 0); }
		public TerminalNode NONE() { return getToken(PlSqlParser.NONE, 0); }
		public TerminalNode NO_NLJ_BATCHING() { return getToken(PlSqlParser.NO_NLJ_BATCHING, 0); }
		public TerminalNode NO_NLJ_PREFETCH() { return getToken(PlSqlParser.NO_NLJ_PREFETCH, 0); }
		public TerminalNode NONSCHEMA() { return getToken(PlSqlParser.NONSCHEMA, 0); }
		public TerminalNode NOORDER() { return getToken(PlSqlParser.NOORDER, 0); }
		public TerminalNode NO_ORDER_ROLLUPS() { return getToken(PlSqlParser.NO_ORDER_ROLLUPS, 0); }
		public TerminalNode NO_OUTER_JOIN_TO_ANTI() { return getToken(PlSqlParser.NO_OUTER_JOIN_TO_ANTI, 0); }
		public TerminalNode NO_OUTER_JOIN_TO_INNER() { return getToken(PlSqlParser.NO_OUTER_JOIN_TO_INNER, 0); }
		public TerminalNode NOOVERRIDE() { return getToken(PlSqlParser.NOOVERRIDE, 0); }
		public TerminalNode NO_PARALLEL_INDEX() { return getToken(PlSqlParser.NO_PARALLEL_INDEX, 0); }
		public TerminalNode NOPARALLEL_INDEX() { return getToken(PlSqlParser.NOPARALLEL_INDEX, 0); }
		public TerminalNode NO_PARALLEL() { return getToken(PlSqlParser.NO_PARALLEL, 0); }
		public TerminalNode NOPARALLEL() { return getToken(PlSqlParser.NOPARALLEL, 0); }
		public TerminalNode NO_PARTIAL_COMMIT() { return getToken(PlSqlParser.NO_PARTIAL_COMMIT, 0); }
		public TerminalNode NO_PLACE_DISTINCT() { return getToken(PlSqlParser.NO_PLACE_DISTINCT, 0); }
		public TerminalNode NO_PLACE_GROUP_BY() { return getToken(PlSqlParser.NO_PLACE_GROUP_BY, 0); }
		public TerminalNode NO_PQ_MAP() { return getToken(PlSqlParser.NO_PQ_MAP, 0); }
		public TerminalNode NO_PRUNE_GSETS() { return getToken(PlSqlParser.NO_PRUNE_GSETS, 0); }
		public TerminalNode NO_PULL_PRED() { return getToken(PlSqlParser.NO_PULL_PRED, 0); }
		public TerminalNode NO_PUSH_PRED() { return getToken(PlSqlParser.NO_PUSH_PRED, 0); }
		public TerminalNode NO_PUSH_SUBQ() { return getToken(PlSqlParser.NO_PUSH_SUBQ, 0); }
		public TerminalNode NO_PX_JOIN_FILTER() { return getToken(PlSqlParser.NO_PX_JOIN_FILTER, 0); }
		public TerminalNode NO_QKN_BUFF() { return getToken(PlSqlParser.NO_QKN_BUFF, 0); }
		public TerminalNode NO_QUERY_TRANSFORMATION() { return getToken(PlSqlParser.NO_QUERY_TRANSFORMATION, 0); }
		public TerminalNode NO_REF_CASCADE() { return getToken(PlSqlParser.NO_REF_CASCADE, 0); }
		public TerminalNode NORELY() { return getToken(PlSqlParser.NORELY, 0); }
		public TerminalNode NOREPAIR() { return getToken(PlSqlParser.NOREPAIR, 0); }
		public TerminalNode NORESETLOGS() { return getToken(PlSqlParser.NORESETLOGS, 0); }
		public TerminalNode NO_RESULT_CACHE() { return getToken(PlSqlParser.NO_RESULT_CACHE, 0); }
		public TerminalNode NOREVERSE() { return getToken(PlSqlParser.NOREVERSE, 0); }
		public TerminalNode NO_REWRITE() { return getToken(PlSqlParser.NO_REWRITE, 0); }
		public TerminalNode NOREWRITE() { return getToken(PlSqlParser.NOREWRITE, 0); }
		public TerminalNode NORMAL() { return getToken(PlSqlParser.NORMAL, 0); }
		public TerminalNode NOROWDEPENDENCIES() { return getToken(PlSqlParser.NOROWDEPENDENCIES, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(PlSqlParser.NOSCHEMACHECK, 0); }
		public TerminalNode NOSEGMENT() { return getToken(PlSqlParser.NOSEGMENT, 0); }
		public TerminalNode NO_SEMIJOIN() { return getToken(PlSqlParser.NO_SEMIJOIN, 0); }
		public TerminalNode NO_SEMI_TO_INNER() { return getToken(PlSqlParser.NO_SEMI_TO_INNER, 0); }
		public TerminalNode NO_SET_TO_JOIN() { return getToken(PlSqlParser.NO_SET_TO_JOIN, 0); }
		public TerminalNode NOSORT() { return getToken(PlSqlParser.NOSORT, 0); }
		public TerminalNode NO_SQL_TUNE() { return getToken(PlSqlParser.NO_SQL_TUNE, 0); }
		public TerminalNode NO_STAR_TRANSFORMATION() { return getToken(PlSqlParser.NO_STAR_TRANSFORMATION, 0); }
		public TerminalNode NO_STATEMENT_QUEUING() { return getToken(PlSqlParser.NO_STATEMENT_QUEUING, 0); }
		public TerminalNode NO_STATS_GSETS() { return getToken(PlSqlParser.NO_STATS_GSETS, 0); }
		public TerminalNode NOSTRICT() { return getToken(PlSqlParser.NOSTRICT, 0); }
		public TerminalNode NO_SUBQUERY_PRUNING() { return getToken(PlSqlParser.NO_SUBQUERY_PRUNING, 0); }
		public TerminalNode NO_SUBSTRB_PAD() { return getToken(PlSqlParser.NO_SUBSTRB_PAD, 0); }
		public TerminalNode NO_SWAP_JOIN_INPUTS() { return getToken(PlSqlParser.NO_SWAP_JOIN_INPUTS, 0); }
		public TerminalNode NOSWITCH() { return getToken(PlSqlParser.NOSWITCH, 0); }
		public TerminalNode NO_TABLE_LOOKUP_BY_NL() { return getToken(PlSqlParser.NO_TABLE_LOOKUP_BY_NL, 0); }
		public TerminalNode NO_TEMP_TABLE() { return getToken(PlSqlParser.NO_TEMP_TABLE, 0); }
		public TerminalNode NOTHING() { return getToken(PlSqlParser.NOTHING, 0); }
		public TerminalNode NOTIFICATION() { return getToken(PlSqlParser.NOTIFICATION, 0); }
		public TerminalNode NO_TRANSFORM_DISTINCT_AGG() { return getToken(PlSqlParser.NO_TRANSFORM_DISTINCT_AGG, 0); }
		public TerminalNode NO_UNNEST() { return getToken(PlSqlParser.NO_UNNEST, 0); }
		public TerminalNode NO_USE_HASH_AGGREGATION() { return getToken(PlSqlParser.NO_USE_HASH_AGGREGATION, 0); }
		public TerminalNode NO_USE_HASH_GBY_FOR_PUSHDOWN() { return getToken(PlSqlParser.NO_USE_HASH_GBY_FOR_PUSHDOWN, 0); }
		public TerminalNode NO_USE_HASH() { return getToken(PlSqlParser.NO_USE_HASH, 0); }
		public TerminalNode NO_USE_INVISIBLE_INDEXES() { return getToken(PlSqlParser.NO_USE_INVISIBLE_INDEXES, 0); }
		public TerminalNode NO_USE_MERGE() { return getToken(PlSqlParser.NO_USE_MERGE, 0); }
		public TerminalNode NO_USE_NL() { return getToken(PlSqlParser.NO_USE_NL, 0); }
		public TerminalNode NOVALIDATE() { return getToken(PlSqlParser.NOVALIDATE, 0); }
		public TerminalNode NO_XDB_FASTPATH_INSERT() { return getToken(PlSqlParser.NO_XDB_FASTPATH_INSERT, 0); }
		public TerminalNode NO_XML_DML_REWRITE() { return getToken(PlSqlParser.NO_XML_DML_REWRITE, 0); }
		public TerminalNode NO_XMLINDEX_REWRITE_IN_SELECT() { return getToken(PlSqlParser.NO_XMLINDEX_REWRITE_IN_SELECT, 0); }
		public TerminalNode NO_XMLINDEX_REWRITE() { return getToken(PlSqlParser.NO_XMLINDEX_REWRITE, 0); }
		public TerminalNode NO_XML_QUERY_REWRITE() { return getToken(PlSqlParser.NO_XML_QUERY_REWRITE, 0); }
		public TerminalNode NTH_VALUE() { return getToken(PlSqlParser.NTH_VALUE, 0); }
		public TerminalNode NTILE() { return getToken(PlSqlParser.NTILE, 0); }
		public TerminalNode NULLIF() { return getToken(PlSqlParser.NULLIF, 0); }
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode NUMERIC() { return getToken(PlSqlParser.NUMERIC, 0); }
		public TerminalNode NUM_INDEX_KEYS() { return getToken(PlSqlParser.NUM_INDEX_KEYS, 0); }
		public TerminalNode NUMTODSINTERVAL() { return getToken(PlSqlParser.NUMTODSINTERVAL, 0); }
		public TerminalNode NUMTOYMINTERVAL() { return getToken(PlSqlParser.NUMTOYMINTERVAL, 0); }
		public TerminalNode NVARCHAR2() { return getToken(PlSqlParser.NVARCHAR2, 0); }
		public TerminalNode NVL2() { return getToken(PlSqlParser.NVL2, 0); }
		public TerminalNode NVL() { return getToken(PlSqlParser.NVL, 0); }
		public TerminalNode OBJECT2XML() { return getToken(PlSqlParser.OBJECT2XML, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public TerminalNode OBJNO() { return getToken(PlSqlParser.OBJNO, 0); }
		public TerminalNode OBJNO_REUSE() { return getToken(PlSqlParser.OBJNO_REUSE, 0); }
		public TerminalNode OCCURENCES() { return getToken(PlSqlParser.OCCURENCES, 0); }
		public TerminalNode OFFLINE() { return getToken(PlSqlParser.OFFLINE, 0); }
		public TerminalNode OFF() { return getToken(PlSqlParser.OFF, 0); }
		public TerminalNode OIDINDEX() { return getToken(PlSqlParser.OIDINDEX, 0); }
		public TerminalNode OID() { return getToken(PlSqlParser.OID, 0); }
		public TerminalNode OLAP() { return getToken(PlSqlParser.OLAP, 0); }
		public TerminalNode OLD() { return getToken(PlSqlParser.OLD, 0); }
		public TerminalNode OLD_PUSH_PRED() { return getToken(PlSqlParser.OLD_PUSH_PRED, 0); }
		public TerminalNode OLTP() { return getToken(PlSqlParser.OLTP, 0); }
		public TerminalNode ONLINE() { return getToken(PlSqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode OPAQUE() { return getToken(PlSqlParser.OPAQUE, 0); }
		public TerminalNode OPAQUE_TRANSFORM() { return getToken(PlSqlParser.OPAQUE_TRANSFORM, 0); }
		public TerminalNode OPAQUE_XCANONICAL() { return getToken(PlSqlParser.OPAQUE_XCANONICAL, 0); }
		public TerminalNode OPCODE() { return getToken(PlSqlParser.OPCODE, 0); }
		public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
		public TerminalNode OPERATIONS() { return getToken(PlSqlParser.OPERATIONS, 0); }
		public TerminalNode OPERATOR() { return getToken(PlSqlParser.OPERATOR, 0); }
		public TerminalNode OPT_ESTIMATE() { return getToken(PlSqlParser.OPT_ESTIMATE, 0); }
		public TerminalNode OPTIMAL() { return getToken(PlSqlParser.OPTIMAL, 0); }
		public TerminalNode OPTIMIZE() { return getToken(PlSqlParser.OPTIMIZE, 0); }
		public TerminalNode OPTIMIZER_FEATURES_ENABLE() { return getToken(PlSqlParser.OPTIMIZER_FEATURES_ENABLE, 0); }
		public TerminalNode OPTIMIZER_GOAL() { return getToken(PlSqlParser.OPTIMIZER_GOAL, 0); }
		public TerminalNode OPT_PARAM() { return getToken(PlSqlParser.OPT_PARAM, 0); }
		public TerminalNode ORA_BRANCH() { return getToken(PlSqlParser.ORA_BRANCH, 0); }
		public TerminalNode ORADEBUG() { return getToken(PlSqlParser.ORADEBUG, 0); }
		public TerminalNode ORA_DST_AFFECTED() { return getToken(PlSqlParser.ORA_DST_AFFECTED, 0); }
		public TerminalNode ORA_DST_CONVERT() { return getToken(PlSqlParser.ORA_DST_CONVERT, 0); }
		public TerminalNode ORA_DST_ERROR() { return getToken(PlSqlParser.ORA_DST_ERROR, 0); }
		public TerminalNode ORA_GET_ACLIDS() { return getToken(PlSqlParser.ORA_GET_ACLIDS, 0); }
		public TerminalNode ORA_GET_PRIVILEGES() { return getToken(PlSqlParser.ORA_GET_PRIVILEGES, 0); }
		public TerminalNode ORA_HASH() { return getToken(PlSqlParser.ORA_HASH, 0); }
		public TerminalNode ORA_ROWSCN() { return getToken(PlSqlParser.ORA_ROWSCN, 0); }
		public TerminalNode ORA_ROWSCN_RAW() { return getToken(PlSqlParser.ORA_ROWSCN_RAW, 0); }
		public TerminalNode ORA_ROWVERSION() { return getToken(PlSqlParser.ORA_ROWVERSION, 0); }
		public TerminalNode ORA_TABVERSION() { return getToken(PlSqlParser.ORA_TABVERSION, 0); }
		public TerminalNode ORDERED() { return getToken(PlSqlParser.ORDERED, 0); }
		public TerminalNode ORDERED_PREDICATES() { return getToken(PlSqlParser.ORDERED_PREDICATES, 0); }
		public TerminalNode ORDINALITY() { return getToken(PlSqlParser.ORDINALITY, 0); }
		public TerminalNode OR_EXPAND() { return getToken(PlSqlParser.OR_EXPAND, 0); }
		public TerminalNode ORGANIZATION() { return getToken(PlSqlParser.ORGANIZATION, 0); }
		public TerminalNode OR_PREDICATES() { return getToken(PlSqlParser.OR_PREDICATES, 0); }
		public TerminalNode OTHER() { return getToken(PlSqlParser.OTHER, 0); }
		public TerminalNode OUTER_JOIN_TO_ANTI() { return getToken(PlSqlParser.OUTER_JOIN_TO_ANTI, 0); }
		public TerminalNode OUTER_JOIN_TO_INNER() { return getToken(PlSqlParser.OUTER_JOIN_TO_INNER, 0); }
		public TerminalNode OUTER() { return getToken(PlSqlParser.OUTER, 0); }
		public TerminalNode OUTLINE_LEAF() { return getToken(PlSqlParser.OUTLINE_LEAF, 0); }
		public TerminalNode OUTLINE() { return getToken(PlSqlParser.OUTLINE, 0); }
		public TerminalNode OUT_OF_LINE() { return getToken(PlSqlParser.OUT_OF_LINE, 0); }
		public TerminalNode OVERFLOW() { return getToken(PlSqlParser.OVERFLOW, 0); }
		public TerminalNode OVERFLOW_NOMOVE() { return getToken(PlSqlParser.OVERFLOW_NOMOVE, 0); }
		public TerminalNode OVERLAPS() { return getToken(PlSqlParser.OVERLAPS, 0); }
		public TerminalNode OVER() { return getToken(PlSqlParser.OVER, 0); }
		public TerminalNode OWNER() { return getToken(PlSqlParser.OWNER, 0); }
		public TerminalNode OWNERSHIP() { return getToken(PlSqlParser.OWNERSHIP, 0); }
		public TerminalNode OWN() { return getToken(PlSqlParser.OWN, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public TerminalNode PACKAGES() { return getToken(PlSqlParser.PACKAGES, 0); }
		public TerminalNode PARALLEL_INDEX() { return getToken(PlSqlParser.PARALLEL_INDEX, 0); }
		public TerminalNode PARALLEL() { return getToken(PlSqlParser.PARALLEL, 0); }
		public TerminalNode PARAMETERS() { return getToken(PlSqlParser.PARAMETERS, 0); }
		public TerminalNode PARAM() { return getToken(PlSqlParser.PARAM, 0); }
		public TerminalNode PARENT() { return getToken(PlSqlParser.PARENT, 0); }
		public TerminalNode PARITY() { return getToken(PlSqlParser.PARITY, 0); }
		public TerminalNode PARTIALLY() { return getToken(PlSqlParser.PARTIALLY, 0); }
		public TerminalNode PARTITION_HASH() { return getToken(PlSqlParser.PARTITION_HASH, 0); }
		public TerminalNode PARTITION_LIST() { return getToken(PlSqlParser.PARTITION_LIST, 0); }
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode PARTITION_RANGE() { return getToken(PlSqlParser.PARTITION_RANGE, 0); }
		public TerminalNode PARTITIONS() { return getToken(PlSqlParser.PARTITIONS, 0); }
		public TerminalNode PARTNUMINST() { return getToken(PlSqlParser.PARTNUMINST, 0); }
		public TerminalNode PASSING() { return getToken(PlSqlParser.PASSING, 0); }
		public TerminalNode PASSWORD_GRACE_TIME() { return getToken(PlSqlParser.PASSWORD_GRACE_TIME, 0); }
		public TerminalNode PASSWORD_LIFE_TIME() { return getToken(PlSqlParser.PASSWORD_LIFE_TIME, 0); }
		public TerminalNode PASSWORD_LOCK_TIME() { return getToken(PlSqlParser.PASSWORD_LOCK_TIME, 0); }
		public TerminalNode PASSWORD() { return getToken(PlSqlParser.PASSWORD, 0); }
		public TerminalNode PASSWORD_REUSE_MAX() { return getToken(PlSqlParser.PASSWORD_REUSE_MAX, 0); }
		public TerminalNode PASSWORD_REUSE_TIME() { return getToken(PlSqlParser.PASSWORD_REUSE_TIME, 0); }
		public TerminalNode PASSWORD_VERIFY_FUNCTION() { return getToken(PlSqlParser.PASSWORD_VERIFY_FUNCTION, 0); }
		public TerminalNode PATH() { return getToken(PlSqlParser.PATH, 0); }
		public TerminalNode PATHS() { return getToken(PlSqlParser.PATHS, 0); }
		public TerminalNode PBL_HS_BEGIN() { return getToken(PlSqlParser.PBL_HS_BEGIN, 0); }
		public TerminalNode PBL_HS_END() { return getToken(PlSqlParser.PBL_HS_END, 0); }
		public TerminalNode PCTINCREASE() { return getToken(PlSqlParser.PCTINCREASE, 0); }
		public TerminalNode PCTTHRESHOLD() { return getToken(PlSqlParser.PCTTHRESHOLD, 0); }
		public TerminalNode PCTUSED() { return getToken(PlSqlParser.PCTUSED, 0); }
		public TerminalNode PCTVERSION() { return getToken(PlSqlParser.PCTVERSION, 0); }
		public TerminalNode PENDING() { return getToken(PlSqlParser.PENDING, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(PlSqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(PlSqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode PERCENT_KEYWORD() { return getToken(PlSqlParser.PERCENT_KEYWORD, 0); }
		public TerminalNode PERCENT_RANKM() { return getToken(PlSqlParser.PERCENT_RANKM, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(PlSqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERFORMANCE() { return getToken(PlSqlParser.PERFORMANCE, 0); }
		public TerminalNode PERMANENT() { return getToken(PlSqlParser.PERMANENT, 0); }
		public TerminalNode PERMISSION() { return getToken(PlSqlParser.PERMISSION, 0); }
		public TerminalNode PFILE() { return getToken(PlSqlParser.PFILE, 0); }
		public TerminalNode PHYSICAL() { return getToken(PlSqlParser.PHYSICAL, 0); }
		public TerminalNode PIKEY() { return getToken(PlSqlParser.PIKEY, 0); }
		public TerminalNode PIV_GB() { return getToken(PlSqlParser.PIV_GB, 0); }
		public TerminalNode PIVOT() { return getToken(PlSqlParser.PIVOT, 0); }
		public TerminalNode PIV_SSF() { return getToken(PlSqlParser.PIV_SSF, 0); }
		public TerminalNode PLACE_DISTINCT() { return getToken(PlSqlParser.PLACE_DISTINCT, 0); }
		public TerminalNode PLACE_GROUP_BY() { return getToken(PlSqlParser.PLACE_GROUP_BY, 0); }
		public TerminalNode PLAN() { return getToken(PlSqlParser.PLAN, 0); }
		public TerminalNode PLSCOPE_SETTINGS() { return getToken(PlSqlParser.PLSCOPE_SETTINGS, 0); }
		public TerminalNode PLSQL_CCFLAGS() { return getToken(PlSqlParser.PLSQL_CCFLAGS, 0); }
		public TerminalNode PLSQL_CODE_TYPE() { return getToken(PlSqlParser.PLSQL_CODE_TYPE, 0); }
		public TerminalNode PLSQL_DEBUG() { return getToken(PlSqlParser.PLSQL_DEBUG, 0); }
		public TerminalNode PLSQL_OPTIMIZE_LEVEL() { return getToken(PlSqlParser.PLSQL_OPTIMIZE_LEVEL, 0); }
		public TerminalNode PLSQL_WARNINGS() { return getToken(PlSqlParser.PLSQL_WARNINGS, 0); }
		public TerminalNode POINT() { return getToken(PlSqlParser.POINT, 0); }
		public TerminalNode POLICY() { return getToken(PlSqlParser.POLICY, 0); }
		public TerminalNode POST_TRANSACTION() { return getToken(PlSqlParser.POST_TRANSACTION, 0); }
		public TerminalNode POWERMULTISET_BY_CARDINALITY() { return getToken(PlSqlParser.POWERMULTISET_BY_CARDINALITY, 0); }
		public TerminalNode POWERMULTISET() { return getToken(PlSqlParser.POWERMULTISET, 0); }
		public TerminalNode POWER() { return getToken(PlSqlParser.POWER, 0); }
		public TerminalNode PQ_DISTRIBUTE() { return getToken(PlSqlParser.PQ_DISTRIBUTE, 0); }
		public TerminalNode PQ_MAP() { return getToken(PlSqlParser.PQ_MAP, 0); }
		public TerminalNode PQ_NOMAP() { return getToken(PlSqlParser.PQ_NOMAP, 0); }
		public TerminalNode PREBUILT() { return getToken(PlSqlParser.PREBUILT, 0); }
		public TerminalNode PRECEDES() { return getToken(PlSqlParser.PRECEDES, 0); }
		public TerminalNode PRECEDING() { return getToken(PlSqlParser.PRECEDING, 0); }
		public TerminalNode PRECISION() { return getToken(PlSqlParser.PRECISION, 0); }
		public TerminalNode PRECOMPUTE_SUBQUERY() { return getToken(PlSqlParser.PRECOMPUTE_SUBQUERY, 0); }
		public TerminalNode PREDICATE_REORDERS() { return getToken(PlSqlParser.PREDICATE_REORDERS, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(PlSqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(PlSqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(PlSqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION() { return getToken(PlSqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(PlSqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(PlSqlParser.PREDICTION_SET, 0); }
		public TerminalNode PREPARE() { return getToken(PlSqlParser.PREPARE, 0); }
		public TerminalNode PRESENT() { return getToken(PlSqlParser.PRESENT, 0); }
		public TerminalNode PRESENTNNV() { return getToken(PlSqlParser.PRESENTNNV, 0); }
		public TerminalNode PRESENTV() { return getToken(PlSqlParser.PRESENTV, 0); }
		public TerminalNode PRESERVE() { return getToken(PlSqlParser.PRESERVE, 0); }
		public TerminalNode PRESERVE_OID() { return getToken(PlSqlParser.PRESERVE_OID, 0); }
		public TerminalNode PREVIOUS() { return getToken(PlSqlParser.PREVIOUS, 0); }
		public TerminalNode PRIMARY() { return getToken(PlSqlParser.PRIMARY, 0); }
		public TerminalNode PRIVATE() { return getToken(PlSqlParser.PRIVATE, 0); }
		public TerminalNode PRIVATE_SGA() { return getToken(PlSqlParser.PRIVATE_SGA, 0); }
		public TerminalNode PRIVILEGE() { return getToken(PlSqlParser.PRIVILEGE, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PlSqlParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PlSqlParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public TerminalNode PROCESS() { return getToken(PlSqlParser.PROCESS, 0); }
		public TerminalNode PROFILE() { return getToken(PlSqlParser.PROFILE, 0); }
		public TerminalNode PROGRAM() { return getToken(PlSqlParser.PROGRAM, 0); }
		public TerminalNode PROJECT() { return getToken(PlSqlParser.PROJECT, 0); }
		public TerminalNode PROPAGATE() { return getToken(PlSqlParser.PROPAGATE, 0); }
		public TerminalNode PROTECTED() { return getToken(PlSqlParser.PROTECTED, 0); }
		public TerminalNode PROTECTION() { return getToken(PlSqlParser.PROTECTION, 0); }
		public TerminalNode PULL_PRED() { return getToken(PlSqlParser.PULL_PRED, 0); }
		public TerminalNode PURGE() { return getToken(PlSqlParser.PURGE, 0); }
		public TerminalNode PUSH_PRED() { return getToken(PlSqlParser.PUSH_PRED, 0); }
		public TerminalNode PUSH_SUBQ() { return getToken(PlSqlParser.PUSH_SUBQ, 0); }
		public TerminalNode PX_GRANULE() { return getToken(PlSqlParser.PX_GRANULE, 0); }
		public TerminalNode PX_JOIN_FILTER() { return getToken(PlSqlParser.PX_JOIN_FILTER, 0); }
		public TerminalNode QB_NAME() { return getToken(PlSqlParser.QB_NAME, 0); }
		public TerminalNode QUARTER() { return getToken(PlSqlParser.QUARTER, 0); }
		public TerminalNode QUERY_BLOCK() { return getToken(PlSqlParser.QUERY_BLOCK, 0); }
		public TerminalNode QUERY() { return getToken(PlSqlParser.QUERY, 0); }
		public TerminalNode QUEUE_CURR() { return getToken(PlSqlParser.QUEUE_CURR, 0); }
		public TerminalNode QUEUE() { return getToken(PlSqlParser.QUEUE, 0); }
		public TerminalNode QUEUE_ROWP() { return getToken(PlSqlParser.QUEUE_ROWP, 0); }
		public TerminalNode QUIESCE() { return getToken(PlSqlParser.QUIESCE, 0); }
		public TerminalNode QUORUM() { return getToken(PlSqlParser.QUORUM, 0); }
		public TerminalNode QUOTA() { return getToken(PlSqlParser.QUOTA, 0); }
		public TerminalNode RANDOM_LOCAL() { return getToken(PlSqlParser.RANDOM_LOCAL, 0); }
		public TerminalNode RANDOM() { return getToken(PlSqlParser.RANDOM, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public TerminalNode RANKM() { return getToken(PlSqlParser.RANKM, 0); }
		public TerminalNode RANK() { return getToken(PlSqlParser.RANK, 0); }
		public TerminalNode RAPIDLY() { return getToken(PlSqlParser.RAPIDLY, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(PlSqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode RAWTOHEX() { return getToken(PlSqlParser.RAWTOHEX, 0); }
		public TerminalNode RAWTONHEX() { return getToken(PlSqlParser.RAWTONHEX, 0); }
		public TerminalNode RBA() { return getToken(PlSqlParser.RBA, 0); }
		public TerminalNode RBO_OUTLINE() { return getToken(PlSqlParser.RBO_OUTLINE, 0); }
		public TerminalNode RDBA() { return getToken(PlSqlParser.RDBA, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode READS() { return getToken(PlSqlParser.READS, 0); }
		public TerminalNode REAL() { return getToken(PlSqlParser.REAL, 0); }
		public TerminalNode REBALANCE() { return getToken(PlSqlParser.REBALANCE, 0); }
		public TerminalNode REBUILD() { return getToken(PlSqlParser.REBUILD, 0); }
		public TerminalNode RECORDS_PER_BLOCK() { return getToken(PlSqlParser.RECORDS_PER_BLOCK, 0); }
		public TerminalNode RECOVERABLE() { return getToken(PlSqlParser.RECOVERABLE, 0); }
		public TerminalNode RECOVER() { return getToken(PlSqlParser.RECOVER, 0); }
		public TerminalNode RECOVERY() { return getToken(PlSqlParser.RECOVERY, 0); }
		public TerminalNode RECYCLEBIN() { return getToken(PlSqlParser.RECYCLEBIN, 0); }
		public TerminalNode RECYCLE() { return getToken(PlSqlParser.RECYCLE, 0); }
		public TerminalNode REDACTION() { return getToken(PlSqlParser.REDACTION, 0); }
		public TerminalNode REDO() { return getToken(PlSqlParser.REDO, 0); }
		public TerminalNode REDUCED() { return getToken(PlSqlParser.REDUCED, 0); }
		public TerminalNode REDUNDANCY() { return getToken(PlSqlParser.REDUNDANCY, 0); }
		public TerminalNode REF_CASCADE_CURSOR() { return getToken(PlSqlParser.REF_CASCADE_CURSOR, 0); }
		public TerminalNode REFERENCED() { return getToken(PlSqlParser.REFERENCED, 0); }
		public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
		public TerminalNode REFERENCES() { return getToken(PlSqlParser.REFERENCES, 0); }
		public TerminalNode REFERENCING() { return getToken(PlSqlParser.REFERENCING, 0); }
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode REFRESH() { return getToken(PlSqlParser.REFRESH, 0); }
		public TerminalNode REFTOHEX() { return getToken(PlSqlParser.REFTOHEX, 0); }
		public TerminalNode REGEXP_COUNT() { return getToken(PlSqlParser.REGEXP_COUNT, 0); }
		public TerminalNode REGEXP_INSTR() { return getToken(PlSqlParser.REGEXP_INSTR, 0); }
		public TerminalNode REGEXP_LIKE() { return getToken(PlSqlParser.REGEXP_LIKE, 0); }
		public TerminalNode REGEXP_REPLACE() { return getToken(PlSqlParser.REGEXP_REPLACE, 0); }
		public TerminalNode REGEXP_SUBSTR() { return getToken(PlSqlParser.REGEXP_SUBSTR, 0); }
		public TerminalNode REGISTER() { return getToken(PlSqlParser.REGISTER, 0); }
		public TerminalNode REGR_AVGX() { return getToken(PlSqlParser.REGR_AVGX, 0); }
		public TerminalNode REGR_AVGY() { return getToken(PlSqlParser.REGR_AVGY, 0); }
		public TerminalNode REGR_COUNT() { return getToken(PlSqlParser.REGR_COUNT, 0); }
		public TerminalNode REGR_INTERCEPT() { return getToken(PlSqlParser.REGR_INTERCEPT, 0); }
		public TerminalNode REGR_R2() { return getToken(PlSqlParser.REGR_R2, 0); }
		public TerminalNode REGR_SLOPE() { return getToken(PlSqlParser.REGR_SLOPE, 0); }
		public TerminalNode REGR_SXX() { return getToken(PlSqlParser.REGR_SXX, 0); }
		public TerminalNode REGR_SXY() { return getToken(PlSqlParser.REGR_SXY, 0); }
		public TerminalNode REGR_SYY() { return getToken(PlSqlParser.REGR_SYY, 0); }
		public TerminalNode REGULAR() { return getToken(PlSqlParser.REGULAR, 0); }
		public TerminalNode REJECT() { return getToken(PlSqlParser.REJECT, 0); }
		public TerminalNode REKEY() { return getToken(PlSqlParser.REKEY, 0); }
		public TerminalNode RELATIONAL() { return getToken(PlSqlParser.RELATIONAL, 0); }
		public TerminalNode RELY() { return getToken(PlSqlParser.RELY, 0); }
		public TerminalNode REMAINDER() { return getToken(PlSqlParser.REMAINDER, 0); }
		public TerminalNode REMOTE_MAPPED() { return getToken(PlSqlParser.REMOTE_MAPPED, 0); }
		public TerminalNode REMOVE() { return getToken(PlSqlParser.REMOVE, 0); }
		public TerminalNode REPAIR() { return getToken(PlSqlParser.REPAIR, 0); }
		public TerminalNode REPEAT() { return getToken(PlSqlParser.REPEAT, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public TerminalNode REPLICATION() { return getToken(PlSqlParser.REPLICATION, 0); }
		public TerminalNode REQUIRED() { return getToken(PlSqlParser.REQUIRED, 0); }
		public TerminalNode RESETLOGS() { return getToken(PlSqlParser.RESETLOGS, 0); }
		public TerminalNode RESET() { return getToken(PlSqlParser.RESET, 0); }
		public TerminalNode RESIZE() { return getToken(PlSqlParser.RESIZE, 0); }
		public TerminalNode RESOLVE() { return getToken(PlSqlParser.RESOLVE, 0); }
		public TerminalNode RESOLVER() { return getToken(PlSqlParser.RESOLVER, 0); }
		public TerminalNode RESPECT() { return getToken(PlSqlParser.RESPECT, 0); }
		public TerminalNode RESTORE_AS_INTERVALS() { return getToken(PlSqlParser.RESTORE_AS_INTERVALS, 0); }
		public TerminalNode RESTORE() { return getToken(PlSqlParser.RESTORE, 0); }
		public TerminalNode RESTRICT_ALL_REF_CONS() { return getToken(PlSqlParser.RESTRICT_ALL_REF_CONS, 0); }
		public TerminalNode RESTRICTED() { return getToken(PlSqlParser.RESTRICTED, 0); }
		public TerminalNode RESTRICT() { return getToken(PlSqlParser.RESTRICT, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(PlSqlParser.RESULT_CACHE, 0); }
		public TerminalNode RESUMABLE() { return getToken(PlSqlParser.RESUMABLE, 0); }
		public TerminalNode RESUME() { return getToken(PlSqlParser.RESUME, 0); }
		public TerminalNode RETENTION() { return getToken(PlSqlParser.RETENTION, 0); }
		public TerminalNode RETRY_ON_ROW_CHANGE() { return getToken(PlSqlParser.RETRY_ON_ROW_CHANGE, 0); }
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode REVERSE() { return getToken(PlSqlParser.REVERSE, 0); }
		public TerminalNode REWRITE() { return getToken(PlSqlParser.REWRITE, 0); }
		public TerminalNode REWRITE_OR_ERROR() { return getToken(PlSqlParser.REWRITE_OR_ERROR, 0); }
		public TerminalNode RIGHT() { return getToken(PlSqlParser.RIGHT, 0); }
		public TerminalNode ROLE() { return getToken(PlSqlParser.ROLE, 0); }
		public TerminalNode ROLES() { return getToken(PlSqlParser.ROLES, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLING() { return getToken(PlSqlParser.ROLLING, 0); }
		public TerminalNode ROLLUP() { return getToken(PlSqlParser.ROLLUP, 0); }
		public TerminalNode ROOT() { return getToken(PlSqlParser.ROOT, 0); }
		public TerminalNode ROUND() { return getToken(PlSqlParser.ROUND, 0); }
		public TerminalNode ROWDEPENDENCIES() { return getToken(PlSqlParser.ROWDEPENDENCIES, 0); }
		public TerminalNode ROWID() { return getToken(PlSqlParser.ROWID, 0); }
		public TerminalNode ROWIDTOCHAR() { return getToken(PlSqlParser.ROWIDTOCHAR, 0); }
		public TerminalNode ROWIDTONCHAR() { return getToken(PlSqlParser.ROWIDTONCHAR, 0); }
		public TerminalNode ROW_LENGTH() { return getToken(PlSqlParser.ROW_LENGTH, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(PlSqlParser.ROW_NUMBER, 0); }
		public TerminalNode ROWNUM() { return getToken(PlSqlParser.ROWNUM, 0); }
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public TerminalNode RPAD() { return getToken(PlSqlParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(PlSqlParser.RTRIM, 0); }
		public TerminalNode RULE() { return getToken(PlSqlParser.RULE, 0); }
		public TerminalNode RULES() { return getToken(PlSqlParser.RULES, 0); }
		public TerminalNode SALT() { return getToken(PlSqlParser.SALT, 0); }
		public TerminalNode SAMPLE() { return getToken(PlSqlParser.SAMPLE, 0); }
		public TerminalNode SAVE_AS_INTERVALS() { return getToken(PlSqlParser.SAVE_AS_INTERVALS, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
		public TerminalNode SB4() { return getToken(PlSqlParser.SB4, 0); }
		public TerminalNode SCALE() { return getToken(PlSqlParser.SCALE, 0); }
		public TerminalNode SCALE_ROWS() { return getToken(PlSqlParser.SCALE_ROWS, 0); }
		public TerminalNode SCAN_INSTANCES() { return getToken(PlSqlParser.SCAN_INSTANCES, 0); }
		public TerminalNode SCAN() { return getToken(PlSqlParser.SCAN, 0); }
		public TerminalNode SCHEDULER() { return getToken(PlSqlParser.SCHEDULER, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(PlSqlParser.SCHEMACHECK, 0); }
		public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
		public TerminalNode SCN_ASCENDING() { return getToken(PlSqlParser.SCN_ASCENDING, 0); }
		public TerminalNode SCN() { return getToken(PlSqlParser.SCN, 0); }
		public TerminalNode SCOPE() { return getToken(PlSqlParser.SCOPE, 0); }
		public TerminalNode SD_ALL() { return getToken(PlSqlParser.SD_ALL, 0); }
		public TerminalNode SD_INHIBIT() { return getToken(PlSqlParser.SD_INHIBIT, 0); }
		public TerminalNode SD_SHOW() { return getToken(PlSqlParser.SD_SHOW, 0); }
		public TerminalNode SEARCH() { return getToken(PlSqlParser.SEARCH, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public TerminalNode SECUREFILE_DBA() { return getToken(PlSqlParser.SECUREFILE_DBA, 0); }
		public TerminalNode SECUREFILE() { return getToken(PlSqlParser.SECUREFILE, 0); }
		public TerminalNode SECURITY() { return getToken(PlSqlParser.SECURITY, 0); }
		public TerminalNode SEED() { return getToken(PlSqlParser.SEED, 0); }
		public TerminalNode SEG_BLOCK() { return getToken(PlSqlParser.SEG_BLOCK, 0); }
		public TerminalNode SEG_FILE() { return getToken(PlSqlParser.SEG_FILE, 0); }
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public TerminalNode SELECTIVITY() { return getToken(PlSqlParser.SELECTIVITY, 0); }
		public TerminalNode SEMIJOIN_DRIVER() { return getToken(PlSqlParser.SEMIJOIN_DRIVER, 0); }
		public TerminalNode SEMIJOIN() { return getToken(PlSqlParser.SEMIJOIN, 0); }
		public TerminalNode SEMI_TO_INNER() { return getToken(PlSqlParser.SEMI_TO_INNER, 0); }
		public TerminalNode SEQUENCED() { return getToken(PlSqlParser.SEQUENCED, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(PlSqlParser.SEQUENTIAL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PlSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERVERERROR() { return getToken(PlSqlParser.SERVERERROR, 0); }
		public TerminalNode SERVICE() { return getToken(PlSqlParser.SERVICE, 0); }
		public TerminalNode SESSION_CACHED_CURSORS() { return getToken(PlSqlParser.SESSION_CACHED_CURSORS, 0); }
		public TerminalNode SESSION() { return getToken(PlSqlParser.SESSION, 0); }
		public TerminalNode SESSIONS_PER_USER() { return getToken(PlSqlParser.SESSIONS_PER_USER, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(PlSqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode SESSIONTZNAME() { return getToken(PlSqlParser.SESSIONTZNAME, 0); }
		public TerminalNode SETS() { return getToken(PlSqlParser.SETS, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public TerminalNode SET_TO_JOIN() { return getToken(PlSqlParser.SET_TO_JOIN, 0); }
		public TerminalNode SEVERE() { return getToken(PlSqlParser.SEVERE, 0); }
		public TerminalNode SHARED() { return getToken(PlSqlParser.SHARED, 0); }
		public TerminalNode SHARED_POOL() { return getToken(PlSqlParser.SHARED_POOL, 0); }
		public TerminalNode SHOW() { return getToken(PlSqlParser.SHOW, 0); }
		public TerminalNode SHRINK() { return getToken(PlSqlParser.SHRINK, 0); }
		public TerminalNode SHUTDOWN() { return getToken(PlSqlParser.SHUTDOWN, 0); }
		public TerminalNode SIBLINGS() { return getToken(PlSqlParser.SIBLINGS, 0); }
		public TerminalNode SID() { return getToken(PlSqlParser.SID, 0); }
		public TerminalNode SIGNAL_COMPONENT() { return getToken(PlSqlParser.SIGNAL_COMPONENT, 0); }
		public TerminalNode SIGNAL_FUNCTION() { return getToken(PlSqlParser.SIGNAL_FUNCTION, 0); }
		public TerminalNode SIGN() { return getToken(PlSqlParser.SIGN, 0); }
		public TerminalNode SIMPLE() { return getToken(PlSqlParser.SIMPLE, 0); }
		public TerminalNode SINGLE() { return getToken(PlSqlParser.SINGLE, 0); }
		public TerminalNode SINGLETASK() { return getToken(PlSqlParser.SINGLETASK, 0); }
		public TerminalNode SINH() { return getToken(PlSqlParser.SINH, 0); }
		public TerminalNode SIN() { return getToken(PlSqlParser.SIN, 0); }
		public TerminalNode SKIP_EXT_OPTIMIZER() { return getToken(PlSqlParser.SKIP_EXT_OPTIMIZER, 0); }
		public TerminalNode SKIP_() { return getToken(PlSqlParser.SKIP_, 0); }
		public TerminalNode SKIP_UNQ_UNUSABLE_IDX() { return getToken(PlSqlParser.SKIP_UNQ_UNUSABLE_IDX, 0); }
		public TerminalNode SKIP_UNUSABLE_INDEXES() { return getToken(PlSqlParser.SKIP_UNUSABLE_INDEXES, 0); }
		public TerminalNode SMALLFILE() { return getToken(PlSqlParser.SMALLFILE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PlSqlParser.SNAPSHOT, 0); }
		public TerminalNode SOME() { return getToken(PlSqlParser.SOME, 0); }
		public TerminalNode SORT() { return getToken(PlSqlParser.SORT, 0); }
		public TerminalNode SOUNDEX() { return getToken(PlSqlParser.SOUNDEX, 0); }
		public TerminalNode SOURCE() { return getToken(PlSqlParser.SOURCE, 0); }
		public TerminalNode SPACE_KEYWORD() { return getToken(PlSqlParser.SPACE_KEYWORD, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
		public TerminalNode SPFILE() { return getToken(PlSqlParser.SPFILE, 0); }
		public TerminalNode SPLIT() { return getToken(PlSqlParser.SPLIT, 0); }
		public TerminalNode SPREADSHEET() { return getToken(PlSqlParser.SPREADSHEET, 0); }
		public TerminalNode SQLLDR() { return getToken(PlSqlParser.SQLLDR, 0); }
		public TerminalNode SQL() { return getToken(PlSqlParser.SQL, 0); }
		public TerminalNode SQL_TRACE() { return getToken(PlSqlParser.SQL_TRACE, 0); }
		public TerminalNode SQL_MACRO() { return getToken(PlSqlParser.SQL_MACRO, 0); }
		public TerminalNode SQRT() { return getToken(PlSqlParser.SQRT, 0); }
		public TerminalNode STALE() { return getToken(PlSqlParser.STALE, 0); }
		public TerminalNode STANDALONE() { return getToken(PlSqlParser.STANDALONE, 0); }
		public TerminalNode STANDBY_MAX_DATA_DELAY() { return getToken(PlSqlParser.STANDBY_MAX_DATA_DELAY, 0); }
		public TerminalNode STANDBY() { return getToken(PlSqlParser.STANDBY, 0); }
		public TerminalNode STAR() { return getToken(PlSqlParser.STAR, 0); }
		public TerminalNode STAR_TRANSFORMATION() { return getToken(PlSqlParser.STAR_TRANSFORMATION, 0); }
		public TerminalNode STARTUP() { return getToken(PlSqlParser.STARTUP, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(PlSqlParser.STATEMENT_ID, 0); }
		public TerminalNode STATEMENT_QUEUING() { return getToken(PlSqlParser.STATEMENT_QUEUING, 0); }
		public TerminalNode STATEMENTS() { return getToken(PlSqlParser.STATEMENTS, 0); }
		public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
		public TerminalNode STATISTICS() { return getToken(PlSqlParser.STATISTICS, 0); }
		public TerminalNode STATS_BINOMIAL_TEST() { return getToken(PlSqlParser.STATS_BINOMIAL_TEST, 0); }
		public TerminalNode STATS_CROSSTAB() { return getToken(PlSqlParser.STATS_CROSSTAB, 0); }
		public TerminalNode STATS_F_TEST() { return getToken(PlSqlParser.STATS_F_TEST, 0); }
		public TerminalNode STATS_KS_TEST() { return getToken(PlSqlParser.STATS_KS_TEST, 0); }
		public TerminalNode STATS_MODE() { return getToken(PlSqlParser.STATS_MODE, 0); }
		public TerminalNode STATS_MW_TEST() { return getToken(PlSqlParser.STATS_MW_TEST, 0); }
		public TerminalNode STATS_ONE_WAY_ANOVA() { return getToken(PlSqlParser.STATS_ONE_WAY_ANOVA, 0); }
		public TerminalNode STATS_T_TEST_INDEP() { return getToken(PlSqlParser.STATS_T_TEST_INDEP, 0); }
		public TerminalNode STATS_T_TEST_INDEPU() { return getToken(PlSqlParser.STATS_T_TEST_INDEPU, 0); }
		public TerminalNode STATS_T_TEST_ONE() { return getToken(PlSqlParser.STATS_T_TEST_ONE, 0); }
		public TerminalNode STATS_T_TEST_PAIRED() { return getToken(PlSqlParser.STATS_T_TEST_PAIRED, 0); }
		public TerminalNode STATS_WSR_TEST() { return getToken(PlSqlParser.STATS_WSR_TEST, 0); }
		public TerminalNode STDDEV() { return getToken(PlSqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(PlSqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(PlSqlParser.STDDEV_SAMP, 0); }
		public TerminalNode STOP() { return getToken(PlSqlParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(PlSqlParser.STORAGE, 0); }
		public TerminalNode STORE() { return getToken(PlSqlParser.STORE, 0); }
		public TerminalNode STREAMS() { return getToken(PlSqlParser.STREAMS, 0); }
		public TerminalNode STRICT() { return getToken(PlSqlParser.STRICT, 0); }
		public TerminalNode STRING() { return getToken(PlSqlParser.STRING, 0); }
		public TerminalNode STRIPE_COLUMNS() { return getToken(PlSqlParser.STRIPE_COLUMNS, 0); }
		public TerminalNode STRIPE_WIDTH() { return getToken(PlSqlParser.STRIPE_WIDTH, 0); }
		public TerminalNode STRIP() { return getToken(PlSqlParser.STRIP, 0); }
		public TerminalNode STRUCTURE() { return getToken(PlSqlParser.STRUCTURE, 0); }
		public TerminalNode SUBMULTISET() { return getToken(PlSqlParser.SUBMULTISET, 0); }
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITION_REL() { return getToken(PlSqlParser.SUBPARTITION_REL, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(PlSqlParser.SUBPARTITIONS, 0); }
		public TerminalNode SUBQUERIES() { return getToken(PlSqlParser.SUBQUERIES, 0); }
		public TerminalNode SUBQUERY_PRUNING() { return getToken(PlSqlParser.SUBQUERY_PRUNING, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(PlSqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode SUBSTR2() { return getToken(PlSqlParser.SUBSTR2, 0); }
		public TerminalNode SUBSTR4() { return getToken(PlSqlParser.SUBSTR4, 0); }
		public TerminalNode SUBSTRB() { return getToken(PlSqlParser.SUBSTRB, 0); }
		public TerminalNode SUBSTRC() { return getToken(PlSqlParser.SUBSTRC, 0); }
		public TerminalNode SUBSTR() { return getToken(PlSqlParser.SUBSTR, 0); }
		public TerminalNode SUCCESSFUL() { return getToken(PlSqlParser.SUCCESSFUL, 0); }
		public TerminalNode SUMMARY() { return getToken(PlSqlParser.SUMMARY, 0); }
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public TerminalNode SUPPLEMENTAL() { return getToken(PlSqlParser.SUPPLEMENTAL, 0); }
		public TerminalNode SUSPEND() { return getToken(PlSqlParser.SUSPEND, 0); }
		public TerminalNode SWAP_JOIN_INPUTS() { return getToken(PlSqlParser.SWAP_JOIN_INPUTS, 0); }
		public TerminalNode SWITCH() { return getToken(PlSqlParser.SWITCH, 0); }
		public TerminalNode SWITCHOVER() { return getToken(PlSqlParser.SWITCHOVER, 0); }
		public TerminalNode SYNCHRONOUS() { return getToken(PlSqlParser.SYNCHRONOUS, 0); }
		public TerminalNode SYNC() { return getToken(PlSqlParser.SYNC, 0); }
		public TerminalNode SYS() { return getToken(PlSqlParser.SYS, 0); }
		public TerminalNode SYSASM() { return getToken(PlSqlParser.SYSASM, 0); }
		public TerminalNode SYS_AUDIT() { return getToken(PlSqlParser.SYS_AUDIT, 0); }
		public TerminalNode SYSAUX() { return getToken(PlSqlParser.SYSAUX, 0); }
		public TerminalNode SYS_CHECKACL() { return getToken(PlSqlParser.SYS_CHECKACL, 0); }
		public TerminalNode SYS_CONNECT_BY_PATH() { return getToken(PlSqlParser.SYS_CONNECT_BY_PATH, 0); }
		public TerminalNode SYS_CONTEXT() { return getToken(PlSqlParser.SYS_CONTEXT, 0); }
		public TerminalNode SYSDATE() { return getToken(PlSqlParser.SYSDATE, 0); }
		public TerminalNode SYSDBA() { return getToken(PlSqlParser.SYSDBA, 0); }
		public TerminalNode SYS_DBURIGEN() { return getToken(PlSqlParser.SYS_DBURIGEN, 0); }
		public TerminalNode SYS_DL_CURSOR() { return getToken(PlSqlParser.SYS_DL_CURSOR, 0); }
		public TerminalNode SYS_DM_RXFORM_CHR() { return getToken(PlSqlParser.SYS_DM_RXFORM_CHR, 0); }
		public TerminalNode SYS_DM_RXFORM_NUM() { return getToken(PlSqlParser.SYS_DM_RXFORM_NUM, 0); }
		public TerminalNode SYS_DOM_COMPARE() { return getToken(PlSqlParser.SYS_DOM_COMPARE, 0); }
		public TerminalNode SYS_DST_PRIM2SEC() { return getToken(PlSqlParser.SYS_DST_PRIM2SEC, 0); }
		public TerminalNode SYS_DST_SEC2PRIM() { return getToken(PlSqlParser.SYS_DST_SEC2PRIM, 0); }
		public TerminalNode SYS_ET_BFILE_TO_RAW() { return getToken(PlSqlParser.SYS_ET_BFILE_TO_RAW, 0); }
		public TerminalNode SYS_ET_BLOB_TO_IMAGE() { return getToken(PlSqlParser.SYS_ET_BLOB_TO_IMAGE, 0); }
		public TerminalNode SYS_ET_IMAGE_TO_BLOB() { return getToken(PlSqlParser.SYS_ET_IMAGE_TO_BLOB, 0); }
		public TerminalNode SYS_ET_RAW_TO_BFILE() { return getToken(PlSqlParser.SYS_ET_RAW_TO_BFILE, 0); }
		public TerminalNode SYS_EXTPDTXT() { return getToken(PlSqlParser.SYS_EXTPDTXT, 0); }
		public TerminalNode SYS_EXTRACT_UTC() { return getToken(PlSqlParser.SYS_EXTRACT_UTC, 0); }
		public TerminalNode SYS_FBT_INSDEL() { return getToken(PlSqlParser.SYS_FBT_INSDEL, 0); }
		public TerminalNode SYS_FILTER_ACLS() { return getToken(PlSqlParser.SYS_FILTER_ACLS, 0); }
		public TerminalNode SYS_FNMATCHES() { return getToken(PlSqlParser.SYS_FNMATCHES, 0); }
		public TerminalNode SYS_FNREPLACE() { return getToken(PlSqlParser.SYS_FNREPLACE, 0); }
		public TerminalNode SYS_GET_ACLIDS() { return getToken(PlSqlParser.SYS_GET_ACLIDS, 0); }
		public TerminalNode SYS_GET_PRIVILEGES() { return getToken(PlSqlParser.SYS_GET_PRIVILEGES, 0); }
		public TerminalNode SYS_GETTOKENID() { return getToken(PlSqlParser.SYS_GETTOKENID, 0); }
		public TerminalNode SYS_GETXTIVAL() { return getToken(PlSqlParser.SYS_GETXTIVAL, 0); }
		public TerminalNode SYS_GUID() { return getToken(PlSqlParser.SYS_GUID, 0); }
		public TerminalNode SYS_MAKEXML() { return getToken(PlSqlParser.SYS_MAKEXML, 0); }
		public TerminalNode SYS_MAKE_XMLNODEID() { return getToken(PlSqlParser.SYS_MAKE_XMLNODEID, 0); }
		public TerminalNode SYS_MKXMLATTR() { return getToken(PlSqlParser.SYS_MKXMLATTR, 0); }
		public TerminalNode SYS_OP_ADT2BIN() { return getToken(PlSqlParser.SYS_OP_ADT2BIN, 0); }
		public TerminalNode SYS_OP_ADTCONS() { return getToken(PlSqlParser.SYS_OP_ADTCONS, 0); }
		public TerminalNode SYS_OP_ALSCRVAL() { return getToken(PlSqlParser.SYS_OP_ALSCRVAL, 0); }
		public TerminalNode SYS_OP_ATG() { return getToken(PlSqlParser.SYS_OP_ATG, 0); }
		public TerminalNode SYS_OP_BIN2ADT() { return getToken(PlSqlParser.SYS_OP_BIN2ADT, 0); }
		public TerminalNode SYS_OP_BITVEC() { return getToken(PlSqlParser.SYS_OP_BITVEC, 0); }
		public TerminalNode SYS_OP_BL2R() { return getToken(PlSqlParser.SYS_OP_BL2R, 0); }
		public TerminalNode SYS_OP_BLOOM_FILTER_LIST() { return getToken(PlSqlParser.SYS_OP_BLOOM_FILTER_LIST, 0); }
		public TerminalNode SYS_OP_BLOOM_FILTER() { return getToken(PlSqlParser.SYS_OP_BLOOM_FILTER, 0); }
		public TerminalNode SYS_OP_C2C() { return getToken(PlSqlParser.SYS_OP_C2C, 0); }
		public TerminalNode SYS_OP_CAST() { return getToken(PlSqlParser.SYS_OP_CAST, 0); }
		public TerminalNode SYS_OP_CEG() { return getToken(PlSqlParser.SYS_OP_CEG, 0); }
		public TerminalNode SYS_OP_CL2C() { return getToken(PlSqlParser.SYS_OP_CL2C, 0); }
		public TerminalNode SYS_OP_COMBINED_HASH() { return getToken(PlSqlParser.SYS_OP_COMBINED_HASH, 0); }
		public TerminalNode SYS_OP_COMP() { return getToken(PlSqlParser.SYS_OP_COMP, 0); }
		public TerminalNode SYS_OP_CONVERT() { return getToken(PlSqlParser.SYS_OP_CONVERT, 0); }
		public TerminalNode SYS_OP_COUNTCHG() { return getToken(PlSqlParser.SYS_OP_COUNTCHG, 0); }
		public TerminalNode SYS_OP_CSCONV() { return getToken(PlSqlParser.SYS_OP_CSCONV, 0); }
		public TerminalNode SYS_OP_CSCONVTEST() { return getToken(PlSqlParser.SYS_OP_CSCONVTEST, 0); }
		public TerminalNode SYS_OP_CSR() { return getToken(PlSqlParser.SYS_OP_CSR, 0); }
		public TerminalNode SYS_OP_CSX_PATCH() { return getToken(PlSqlParser.SYS_OP_CSX_PATCH, 0); }
		public TerminalNode SYS_OP_DECOMP() { return getToken(PlSqlParser.SYS_OP_DECOMP, 0); }
		public TerminalNode SYS_OP_DESCEND() { return getToken(PlSqlParser.SYS_OP_DESCEND, 0); }
		public TerminalNode SYS_OP_DISTINCT() { return getToken(PlSqlParser.SYS_OP_DISTINCT, 0); }
		public TerminalNode SYS_OP_DRA() { return getToken(PlSqlParser.SYS_OP_DRA, 0); }
		public TerminalNode SYS_OP_DUMP() { return getToken(PlSqlParser.SYS_OP_DUMP, 0); }
		public TerminalNode SYS_OP_DV_CHECK() { return getToken(PlSqlParser.SYS_OP_DV_CHECK, 0); }
		public TerminalNode SYS_OP_ENFORCE_NOT_NULL() { return getToken(PlSqlParser.SYS_OP_ENFORCE_NOT_NULL, 0); }
		public TerminalNode SYSOPER() { return getToken(PlSqlParser.SYSOPER, 0); }
		public TerminalNode SYS_OP_EXTRACT() { return getToken(PlSqlParser.SYS_OP_EXTRACT, 0); }
		public TerminalNode SYS_OP_GROUPING() { return getToken(PlSqlParser.SYS_OP_GROUPING, 0); }
		public TerminalNode SYS_OP_GUID() { return getToken(PlSqlParser.SYS_OP_GUID, 0); }
		public TerminalNode SYS_OP_IIX() { return getToken(PlSqlParser.SYS_OP_IIX, 0); }
		public TerminalNode SYS_OP_ITR() { return getToken(PlSqlParser.SYS_OP_ITR, 0); }
		public TerminalNode SYS_OP_LBID() { return getToken(PlSqlParser.SYS_OP_LBID, 0); }
		public TerminalNode SYS_OP_LOBLOC2BLOB() { return getToken(PlSqlParser.SYS_OP_LOBLOC2BLOB, 0); }
		public TerminalNode SYS_OP_LOBLOC2CLOB() { return getToken(PlSqlParser.SYS_OP_LOBLOC2CLOB, 0); }
		public TerminalNode SYS_OP_LOBLOC2ID() { return getToken(PlSqlParser.SYS_OP_LOBLOC2ID, 0); }
		public TerminalNode SYS_OP_LOBLOC2NCLOB() { return getToken(PlSqlParser.SYS_OP_LOBLOC2NCLOB, 0); }
		public TerminalNode SYS_OP_LOBLOC2TYP() { return getToken(PlSqlParser.SYS_OP_LOBLOC2TYP, 0); }
		public TerminalNode SYS_OP_LSVI() { return getToken(PlSqlParser.SYS_OP_LSVI, 0); }
		public TerminalNode SYS_OP_LVL() { return getToken(PlSqlParser.SYS_OP_LVL, 0); }
		public TerminalNode SYS_OP_MAKEOID() { return getToken(PlSqlParser.SYS_OP_MAKEOID, 0); }
		public TerminalNode SYS_OP_MAP_NONNULL() { return getToken(PlSqlParser.SYS_OP_MAP_NONNULL, 0); }
		public TerminalNode SYS_OP_MSR() { return getToken(PlSqlParser.SYS_OP_MSR, 0); }
		public TerminalNode SYS_OP_NICOMBINE() { return getToken(PlSqlParser.SYS_OP_NICOMBINE, 0); }
		public TerminalNode SYS_OP_NIEXTRACT() { return getToken(PlSqlParser.SYS_OP_NIEXTRACT, 0); }
		public TerminalNode SYS_OP_NII() { return getToken(PlSqlParser.SYS_OP_NII, 0); }
		public TerminalNode SYS_OP_NIX() { return getToken(PlSqlParser.SYS_OP_NIX, 0); }
		public TerminalNode SYS_OP_NOEXPAND() { return getToken(PlSqlParser.SYS_OP_NOEXPAND, 0); }
		public TerminalNode SYS_OP_NTCIMG() { return getToken(PlSqlParser.SYS_OP_NTCIMG, 0); }
		public TerminalNode SYS_OP_NUMTORAW() { return getToken(PlSqlParser.SYS_OP_NUMTORAW, 0); }
		public TerminalNode SYS_OP_OIDVALUE() { return getToken(PlSqlParser.SYS_OP_OIDVALUE, 0); }
		public TerminalNode SYS_OP_OPNSIZE() { return getToken(PlSqlParser.SYS_OP_OPNSIZE, 0); }
		public TerminalNode SYS_OP_PAR_1() { return getToken(PlSqlParser.SYS_OP_PAR_1, 0); }
		public TerminalNode SYS_OP_PARGID_1() { return getToken(PlSqlParser.SYS_OP_PARGID_1, 0); }
		public TerminalNode SYS_OP_PARGID() { return getToken(PlSqlParser.SYS_OP_PARGID, 0); }
		public TerminalNode SYS_OP_PAR() { return getToken(PlSqlParser.SYS_OP_PAR, 0); }
		public TerminalNode SYS_OP_PIVOT() { return getToken(PlSqlParser.SYS_OP_PIVOT, 0); }
		public TerminalNode SYS_OP_R2O() { return getToken(PlSqlParser.SYS_OP_R2O, 0); }
		public TerminalNode SYS_OP_RAWTONUM() { return getToken(PlSqlParser.SYS_OP_RAWTONUM, 0); }
		public TerminalNode SYS_OP_RDTM() { return getToken(PlSqlParser.SYS_OP_RDTM, 0); }
		public TerminalNode SYS_OP_REF() { return getToken(PlSqlParser.SYS_OP_REF, 0); }
		public TerminalNode SYS_OP_RMTD() { return getToken(PlSqlParser.SYS_OP_RMTD, 0); }
		public TerminalNode SYS_OP_ROWIDTOOBJ() { return getToken(PlSqlParser.SYS_OP_ROWIDTOOBJ, 0); }
		public TerminalNode SYS_OP_RPB() { return getToken(PlSqlParser.SYS_OP_RPB, 0); }
		public TerminalNode SYS_OPTLOBPRBSC() { return getToken(PlSqlParser.SYS_OPTLOBPRBSC, 0); }
		public TerminalNode SYS_OP_TOSETID() { return getToken(PlSqlParser.SYS_OP_TOSETID, 0); }
		public TerminalNode SYS_OP_TPR() { return getToken(PlSqlParser.SYS_OP_TPR, 0); }
		public TerminalNode SYS_OP_TRTB() { return getToken(PlSqlParser.SYS_OP_TRTB, 0); }
		public TerminalNode SYS_OPTXICMP() { return getToken(PlSqlParser.SYS_OPTXICMP, 0); }
		public TerminalNode SYS_OPTXQCASTASNQ() { return getToken(PlSqlParser.SYS_OPTXQCASTASNQ, 0); }
		public TerminalNode SYS_OP_UNDESCEND() { return getToken(PlSqlParser.SYS_OP_UNDESCEND, 0); }
		public TerminalNode SYS_OP_VECAND() { return getToken(PlSqlParser.SYS_OP_VECAND, 0); }
		public TerminalNode SYS_OP_VECBIT() { return getToken(PlSqlParser.SYS_OP_VECBIT, 0); }
		public TerminalNode SYS_OP_VECOR() { return getToken(PlSqlParser.SYS_OP_VECOR, 0); }
		public TerminalNode SYS_OP_VECXOR() { return getToken(PlSqlParser.SYS_OP_VECXOR, 0); }
		public TerminalNode SYS_OP_VERSION() { return getToken(PlSqlParser.SYS_OP_VERSION, 0); }
		public TerminalNode SYS_OP_VREF() { return getToken(PlSqlParser.SYS_OP_VREF, 0); }
		public TerminalNode SYS_OP_VVD() { return getToken(PlSqlParser.SYS_OP_VVD, 0); }
		public TerminalNode SYS_OP_XMLCONS_FOR_CSX() { return getToken(PlSqlParser.SYS_OP_XMLCONS_FOR_CSX, 0); }
		public TerminalNode SYS_OP_XPTHATG() { return getToken(PlSqlParser.SYS_OP_XPTHATG, 0); }
		public TerminalNode SYS_OP_XPTHIDX() { return getToken(PlSqlParser.SYS_OP_XPTHIDX, 0); }
		public TerminalNode SYS_OP_XPTHOP() { return getToken(PlSqlParser.SYS_OP_XPTHOP, 0); }
		public TerminalNode SYS_OP_XTXT2SQLT() { return getToken(PlSqlParser.SYS_OP_XTXT2SQLT, 0); }
		public TerminalNode SYS_ORDERKEY_DEPTH() { return getToken(PlSqlParser.SYS_ORDERKEY_DEPTH, 0); }
		public TerminalNode SYS_ORDERKEY_MAXCHILD() { return getToken(PlSqlParser.SYS_ORDERKEY_MAXCHILD, 0); }
		public TerminalNode SYS_ORDERKEY_PARENT() { return getToken(PlSqlParser.SYS_ORDERKEY_PARENT, 0); }
		public TerminalNode SYS_PARALLEL_TXN() { return getToken(PlSqlParser.SYS_PARALLEL_TXN, 0); }
		public TerminalNode SYS_PATHID_IS_ATTR() { return getToken(PlSqlParser.SYS_PATHID_IS_ATTR, 0); }
		public TerminalNode SYS_PATHID_IS_NMSPC() { return getToken(PlSqlParser.SYS_PATHID_IS_NMSPC, 0); }
		public TerminalNode SYS_PATHID_LASTNAME() { return getToken(PlSqlParser.SYS_PATHID_LASTNAME, 0); }
		public TerminalNode SYS_PATHID_LASTNMSPC() { return getToken(PlSqlParser.SYS_PATHID_LASTNMSPC, 0); }
		public TerminalNode SYS_PATH_REVERSE() { return getToken(PlSqlParser.SYS_PATH_REVERSE, 0); }
		public TerminalNode SYS_PXQEXTRACT() { return getToken(PlSqlParser.SYS_PXQEXTRACT, 0); }
		public TerminalNode SYS_RID_ORDER() { return getToken(PlSqlParser.SYS_RID_ORDER, 0); }
		public TerminalNode SYS_ROW_DELTA() { return getToken(PlSqlParser.SYS_ROW_DELTA, 0); }
		public TerminalNode SYS_SC_2_XMLT() { return getToken(PlSqlParser.SYS_SC_2_XMLT, 0); }
		public TerminalNode SYS_SYNRCIREDO() { return getToken(PlSqlParser.SYS_SYNRCIREDO, 0); }
		public TerminalNode SYSTEM_DEFINED() { return getToken(PlSqlParser.SYSTEM_DEFINED, 0); }
		public TerminalNode SYSTEM() { return getToken(PlSqlParser.SYSTEM, 0); }
		public TerminalNode SYSTIMESTAMP() { return getToken(PlSqlParser.SYSTIMESTAMP, 0); }
		public TerminalNode SYS_TYPEID() { return getToken(PlSqlParser.SYS_TYPEID, 0); }
		public TerminalNode SYS_UMAKEXML() { return getToken(PlSqlParser.SYS_UMAKEXML, 0); }
		public TerminalNode SYS_XMLANALYZE() { return getToken(PlSqlParser.SYS_XMLANALYZE, 0); }
		public TerminalNode SYS_XMLCONTAINS() { return getToken(PlSqlParser.SYS_XMLCONTAINS, 0); }
		public TerminalNode SYS_XMLCONV() { return getToken(PlSqlParser.SYS_XMLCONV, 0); }
		public TerminalNode SYS_XMLEXNSURI() { return getToken(PlSqlParser.SYS_XMLEXNSURI, 0); }
		public TerminalNode SYS_XMLGEN() { return getToken(PlSqlParser.SYS_XMLGEN, 0); }
		public TerminalNode SYS_XMLI_LOC_ISNODE() { return getToken(PlSqlParser.SYS_XMLI_LOC_ISNODE, 0); }
		public TerminalNode SYS_XMLI_LOC_ISTEXT() { return getToken(PlSqlParser.SYS_XMLI_LOC_ISTEXT, 0); }
		public TerminalNode SYS_XMLINSTR() { return getToken(PlSqlParser.SYS_XMLINSTR, 0); }
		public TerminalNode SYS_XMLLOCATOR_GETSVAL() { return getToken(PlSqlParser.SYS_XMLLOCATOR_GETSVAL, 0); }
		public TerminalNode SYS_XMLNODEID_GETCID() { return getToken(PlSqlParser.SYS_XMLNODEID_GETCID, 0); }
		public TerminalNode SYS_XMLNODEID_GETLOCATOR() { return getToken(PlSqlParser.SYS_XMLNODEID_GETLOCATOR, 0); }
		public TerminalNode SYS_XMLNODEID_GETOKEY() { return getToken(PlSqlParser.SYS_XMLNODEID_GETOKEY, 0); }
		public TerminalNode SYS_XMLNODEID_GETPATHID() { return getToken(PlSqlParser.SYS_XMLNODEID_GETPATHID, 0); }
		public TerminalNode SYS_XMLNODEID_GETPTRID() { return getToken(PlSqlParser.SYS_XMLNODEID_GETPTRID, 0); }
		public TerminalNode SYS_XMLNODEID_GETRID() { return getToken(PlSqlParser.SYS_XMLNODEID_GETRID, 0); }
		public TerminalNode SYS_XMLNODEID_GETSVAL() { return getToken(PlSqlParser.SYS_XMLNODEID_GETSVAL, 0); }
		public TerminalNode SYS_XMLNODEID_GETTID() { return getToken(PlSqlParser.SYS_XMLNODEID_GETTID, 0); }
		public TerminalNode SYS_XMLNODEID() { return getToken(PlSqlParser.SYS_XMLNODEID, 0); }
		public TerminalNode SYS_XMLT_2_SC() { return getToken(PlSqlParser.SYS_XMLT_2_SC, 0); }
		public TerminalNode SYS_XMLTRANSLATE() { return getToken(PlSqlParser.SYS_XMLTRANSLATE, 0); }
		public TerminalNode SYS_XMLTYPE2SQL() { return getToken(PlSqlParser.SYS_XMLTYPE2SQL, 0); }
		public TerminalNode SYS_XQ_ASQLCNV() { return getToken(PlSqlParser.SYS_XQ_ASQLCNV, 0); }
		public TerminalNode SYS_XQ_ATOMCNVCHK() { return getToken(PlSqlParser.SYS_XQ_ATOMCNVCHK, 0); }
		public TerminalNode SYS_XQBASEURI() { return getToken(PlSqlParser.SYS_XQBASEURI, 0); }
		public TerminalNode SYS_XQCASTABLEERRH() { return getToken(PlSqlParser.SYS_XQCASTABLEERRH, 0); }
		public TerminalNode SYS_XQCODEP2STR() { return getToken(PlSqlParser.SYS_XQCODEP2STR, 0); }
		public TerminalNode SYS_XQCODEPEQ() { return getToken(PlSqlParser.SYS_XQCODEPEQ, 0); }
		public TerminalNode SYS_XQCON2SEQ() { return getToken(PlSqlParser.SYS_XQCON2SEQ, 0); }
		public TerminalNode SYS_XQCONCAT() { return getToken(PlSqlParser.SYS_XQCONCAT, 0); }
		public TerminalNode SYS_XQDELETE() { return getToken(PlSqlParser.SYS_XQDELETE, 0); }
		public TerminalNode SYS_XQDFLTCOLATION() { return getToken(PlSqlParser.SYS_XQDFLTCOLATION, 0); }
		public TerminalNode SYS_XQDOC() { return getToken(PlSqlParser.SYS_XQDOC, 0); }
		public TerminalNode SYS_XQDOCURI() { return getToken(PlSqlParser.SYS_XQDOCURI, 0); }
		public TerminalNode SYS_XQDURDIV() { return getToken(PlSqlParser.SYS_XQDURDIV, 0); }
		public TerminalNode SYS_XQED4URI() { return getToken(PlSqlParser.SYS_XQED4URI, 0); }
		public TerminalNode SYS_XQENDSWITH() { return getToken(PlSqlParser.SYS_XQENDSWITH, 0); }
		public TerminalNode SYS_XQERRH() { return getToken(PlSqlParser.SYS_XQERRH, 0); }
		public TerminalNode SYS_XQERR() { return getToken(PlSqlParser.SYS_XQERR, 0); }
		public TerminalNode SYS_XQESHTMLURI() { return getToken(PlSqlParser.SYS_XQESHTMLURI, 0); }
		public TerminalNode SYS_XQEXLOBVAL() { return getToken(PlSqlParser.SYS_XQEXLOBVAL, 0); }
		public TerminalNode SYS_XQEXSTWRP() { return getToken(PlSqlParser.SYS_XQEXSTWRP, 0); }
		public TerminalNode SYS_XQEXTRACT() { return getToken(PlSqlParser.SYS_XQEXTRACT, 0); }
		public TerminalNode SYS_XQEXTRREF() { return getToken(PlSqlParser.SYS_XQEXTRREF, 0); }
		public TerminalNode SYS_XQEXVAL() { return getToken(PlSqlParser.SYS_XQEXVAL, 0); }
		public TerminalNode SYS_XQFB2STR() { return getToken(PlSqlParser.SYS_XQFB2STR, 0); }
		public TerminalNode SYS_XQFNBOOL() { return getToken(PlSqlParser.SYS_XQFNBOOL, 0); }
		public TerminalNode SYS_XQFNCMP() { return getToken(PlSqlParser.SYS_XQFNCMP, 0); }
		public TerminalNode SYS_XQFNDATIM() { return getToken(PlSqlParser.SYS_XQFNDATIM, 0); }
		public TerminalNode SYS_XQFNLNAME() { return getToken(PlSqlParser.SYS_XQFNLNAME, 0); }
		public TerminalNode SYS_XQFNNM() { return getToken(PlSqlParser.SYS_XQFNNM, 0); }
		public TerminalNode SYS_XQFNNSURI() { return getToken(PlSqlParser.SYS_XQFNNSURI, 0); }
		public TerminalNode SYS_XQFNPREDTRUTH() { return getToken(PlSqlParser.SYS_XQFNPREDTRUTH, 0); }
		public TerminalNode SYS_XQFNQNM() { return getToken(PlSqlParser.SYS_XQFNQNM, 0); }
		public TerminalNode SYS_XQFNROOT() { return getToken(PlSqlParser.SYS_XQFNROOT, 0); }
		public TerminalNode SYS_XQFORMATNUM() { return getToken(PlSqlParser.SYS_XQFORMATNUM, 0); }
		public TerminalNode SYS_XQFTCONTAIN() { return getToken(PlSqlParser.SYS_XQFTCONTAIN, 0); }
		public TerminalNode SYS_XQFUNCR() { return getToken(PlSqlParser.SYS_XQFUNCR, 0); }
		public TerminalNode SYS_XQGETCONTENT() { return getToken(PlSqlParser.SYS_XQGETCONTENT, 0); }
		public TerminalNode SYS_XQINDXOF() { return getToken(PlSqlParser.SYS_XQINDXOF, 0); }
		public TerminalNode SYS_XQINSERT() { return getToken(PlSqlParser.SYS_XQINSERT, 0); }
		public TerminalNode SYS_XQINSPFX() { return getToken(PlSqlParser.SYS_XQINSPFX, 0); }
		public TerminalNode SYS_XQIRI2URI() { return getToken(PlSqlParser.SYS_XQIRI2URI, 0); }
		public TerminalNode SYS_XQLANG() { return getToken(PlSqlParser.SYS_XQLANG, 0); }
		public TerminalNode SYS_XQLLNMFRMQNM() { return getToken(PlSqlParser.SYS_XQLLNMFRMQNM, 0); }
		public TerminalNode SYS_XQMKNODEREF() { return getToken(PlSqlParser.SYS_XQMKNODEREF, 0); }
		public TerminalNode SYS_XQNILLED() { return getToken(PlSqlParser.SYS_XQNILLED, 0); }
		public TerminalNode SYS_XQNODENAME() { return getToken(PlSqlParser.SYS_XQNODENAME, 0); }
		public TerminalNode SYS_XQNORMSPACE() { return getToken(PlSqlParser.SYS_XQNORMSPACE, 0); }
		public TerminalNode SYS_XQNORMUCODE() { return getToken(PlSqlParser.SYS_XQNORMUCODE, 0); }
		public TerminalNode SYS_XQ_NRNG() { return getToken(PlSqlParser.SYS_XQ_NRNG, 0); }
		public TerminalNode SYS_XQNSP4PFX() { return getToken(PlSqlParser.SYS_XQNSP4PFX, 0); }
		public TerminalNode SYS_XQNSPFRMQNM() { return getToken(PlSqlParser.SYS_XQNSPFRMQNM, 0); }
		public TerminalNode SYS_XQPFXFRMQNM() { return getToken(PlSqlParser.SYS_XQPFXFRMQNM, 0); }
		public TerminalNode SYS_XQ_PKSQL2XML() { return getToken(PlSqlParser.SYS_XQ_PKSQL2XML, 0); }
		public TerminalNode SYS_XQPOLYABS() { return getToken(PlSqlParser.SYS_XQPOLYABS, 0); }
		public TerminalNode SYS_XQPOLYADD() { return getToken(PlSqlParser.SYS_XQPOLYADD, 0); }
		public TerminalNode SYS_XQPOLYCEL() { return getToken(PlSqlParser.SYS_XQPOLYCEL, 0); }
		public TerminalNode SYS_XQPOLYCSTBL() { return getToken(PlSqlParser.SYS_XQPOLYCSTBL, 0); }
		public TerminalNode SYS_XQPOLYCST() { return getToken(PlSqlParser.SYS_XQPOLYCST, 0); }
		public TerminalNode SYS_XQPOLYDIV() { return getToken(PlSqlParser.SYS_XQPOLYDIV, 0); }
		public TerminalNode SYS_XQPOLYFLR() { return getToken(PlSqlParser.SYS_XQPOLYFLR, 0); }
		public TerminalNode SYS_XQPOLYMOD() { return getToken(PlSqlParser.SYS_XQPOLYMOD, 0); }
		public TerminalNode SYS_XQPOLYMUL() { return getToken(PlSqlParser.SYS_XQPOLYMUL, 0); }
		public TerminalNode SYS_XQPOLYRND() { return getToken(PlSqlParser.SYS_XQPOLYRND, 0); }
		public TerminalNode SYS_XQPOLYSQRT() { return getToken(PlSqlParser.SYS_XQPOLYSQRT, 0); }
		public TerminalNode SYS_XQPOLYSUB() { return getToken(PlSqlParser.SYS_XQPOLYSUB, 0); }
		public TerminalNode SYS_XQPOLYUMUS() { return getToken(PlSqlParser.SYS_XQPOLYUMUS, 0); }
		public TerminalNode SYS_XQPOLYUPLS() { return getToken(PlSqlParser.SYS_XQPOLYUPLS, 0); }
		public TerminalNode SYS_XQPOLYVEQ() { return getToken(PlSqlParser.SYS_XQPOLYVEQ, 0); }
		public TerminalNode SYS_XQPOLYVGE() { return getToken(PlSqlParser.SYS_XQPOLYVGE, 0); }
		public TerminalNode SYS_XQPOLYVGT() { return getToken(PlSqlParser.SYS_XQPOLYVGT, 0); }
		public TerminalNode SYS_XQPOLYVLE() { return getToken(PlSqlParser.SYS_XQPOLYVLE, 0); }
		public TerminalNode SYS_XQPOLYVLT() { return getToken(PlSqlParser.SYS_XQPOLYVLT, 0); }
		public TerminalNode SYS_XQPOLYVNE() { return getToken(PlSqlParser.SYS_XQPOLYVNE, 0); }
		public TerminalNode SYS_XQREF2VAL() { return getToken(PlSqlParser.SYS_XQREF2VAL, 0); }
		public TerminalNode SYS_XQRENAME() { return getToken(PlSqlParser.SYS_XQRENAME, 0); }
		public TerminalNode SYS_XQREPLACE() { return getToken(PlSqlParser.SYS_XQREPLACE, 0); }
		public TerminalNode SYS_XQRESVURI() { return getToken(PlSqlParser.SYS_XQRESVURI, 0); }
		public TerminalNode SYS_XQRNDHALF2EVN() { return getToken(PlSqlParser.SYS_XQRNDHALF2EVN, 0); }
		public TerminalNode SYS_XQRSLVQNM() { return getToken(PlSqlParser.SYS_XQRSLVQNM, 0); }
		public TerminalNode SYS_XQRYENVPGET() { return getToken(PlSqlParser.SYS_XQRYENVPGET, 0); }
		public TerminalNode SYS_XQRYVARGET() { return getToken(PlSqlParser.SYS_XQRYVARGET, 0); }
		public TerminalNode SYS_XQRYWRP() { return getToken(PlSqlParser.SYS_XQRYWRP, 0); }
		public TerminalNode SYS_XQSEQ2CON4XC() { return getToken(PlSqlParser.SYS_XQSEQ2CON4XC, 0); }
		public TerminalNode SYS_XQSEQ2CON() { return getToken(PlSqlParser.SYS_XQSEQ2CON, 0); }
		public TerminalNode SYS_XQSEQDEEPEQ() { return getToken(PlSqlParser.SYS_XQSEQDEEPEQ, 0); }
		public TerminalNode SYS_XQSEQINSB() { return getToken(PlSqlParser.SYS_XQSEQINSB, 0); }
		public TerminalNode SYS_XQSEQRM() { return getToken(PlSqlParser.SYS_XQSEQRM, 0); }
		public TerminalNode SYS_XQSEQRVS() { return getToken(PlSqlParser.SYS_XQSEQRVS, 0); }
		public TerminalNode SYS_XQSEQSUB() { return getToken(PlSqlParser.SYS_XQSEQSUB, 0); }
		public TerminalNode SYS_XQSEQTYPMATCH() { return getToken(PlSqlParser.SYS_XQSEQTYPMATCH, 0); }
		public TerminalNode SYS_XQSTARTSWITH() { return getToken(PlSqlParser.SYS_XQSTARTSWITH, 0); }
		public TerminalNode SYS_XQSTATBURI() { return getToken(PlSqlParser.SYS_XQSTATBURI, 0); }
		public TerminalNode SYS_XQSTR2CODEP() { return getToken(PlSqlParser.SYS_XQSTR2CODEP, 0); }
		public TerminalNode SYS_XQSTRJOIN() { return getToken(PlSqlParser.SYS_XQSTRJOIN, 0); }
		public TerminalNode SYS_XQSUBSTRAFT() { return getToken(PlSqlParser.SYS_XQSUBSTRAFT, 0); }
		public TerminalNode SYS_XQSUBSTRBEF() { return getToken(PlSqlParser.SYS_XQSUBSTRBEF, 0); }
		public TerminalNode SYS_XQTOKENIZE() { return getToken(PlSqlParser.SYS_XQTOKENIZE, 0); }
		public TerminalNode SYS_XQTREATAS() { return getToken(PlSqlParser.SYS_XQTREATAS, 0); }
		public TerminalNode SYS_XQ_UPKXML2SQL() { return getToken(PlSqlParser.SYS_XQ_UPKXML2SQL, 0); }
		public TerminalNode SYS_XQXFORM() { return getToken(PlSqlParser.SYS_XQXFORM, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode TABLE_LOOKUP_BY_NL() { return getToken(PlSqlParser.TABLE_LOOKUP_BY_NL, 0); }
		public TerminalNode TABLES() { return getToken(PlSqlParser.TABLES, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlSqlParser.TABLESPACE, 0); }
		public TerminalNode TABLESPACE_NO() { return getToken(PlSqlParser.TABLESPACE_NO, 0); }
		public TerminalNode TABLE_STATS() { return getToken(PlSqlParser.TABLE_STATS, 0); }
		public TerminalNode TABNO() { return getToken(PlSqlParser.TABNO, 0); }
		public TerminalNode TANH() { return getToken(PlSqlParser.TANH, 0); }
		public TerminalNode TAN() { return getToken(PlSqlParser.TAN, 0); }
		public TerminalNode TBLORIDXPARTNUM() { return getToken(PlSqlParser.TBLORIDXPARTNUM, 0); }
		public TerminalNode TEMPFILE() { return getToken(PlSqlParser.TEMPFILE, 0); }
		public TerminalNode TEMPLATE() { return getToken(PlSqlParser.TEMPLATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(PlSqlParser.TEMPORARY, 0); }
		public TerminalNode TEMP_TABLE() { return getToken(PlSqlParser.TEMP_TABLE, 0); }
		public TerminalNode TEST() { return getToken(PlSqlParser.TEST, 0); }
		public TerminalNode THAN() { return getToken(PlSqlParser.THAN, 0); }
		public TerminalNode THE() { return getToken(PlSqlParser.THE, 0); }
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public TerminalNode THREAD() { return getToken(PlSqlParser.THREAD, 0); }
		public TerminalNode THROUGH() { return getToken(PlSqlParser.THROUGH, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode TIMING() { return getToken(PlSqlParser.TIMING, 0); }
		public TerminalNode TIMEOUT() { return getToken(PlSqlParser.TIMEOUT, 0); }
		public TerminalNode TIMES() { return getToken(PlSqlParser.TIMES, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(PlSqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(PlSqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(PlSqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIME_ZONE() { return getToken(PlSqlParser.TIME_ZONE, 0); }
		public TerminalNode TIMEZONE_OFFSET() { return getToken(PlSqlParser.TIMEZONE_OFFSET, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(PlSqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TIV_GB() { return getToken(PlSqlParser.TIV_GB, 0); }
		public TerminalNode TIV_SSF() { return getToken(PlSqlParser.TIV_SSF, 0); }
		public TerminalNode TO_BINARY_DOUBLE() { return getToken(PlSqlParser.TO_BINARY_DOUBLE, 0); }
		public TerminalNode TO_BINARY_FLOAT() { return getToken(PlSqlParser.TO_BINARY_FLOAT, 0); }
		public TerminalNode TO_BLOB() { return getToken(PlSqlParser.TO_BLOB, 0); }
		public TerminalNode TO_CHAR() { return getToken(PlSqlParser.TO_CHAR, 0); }
		public TerminalNode TO_CLOB() { return getToken(PlSqlParser.TO_CLOB, 0); }
		public TerminalNode TO_DATE() { return getToken(PlSqlParser.TO_DATE, 0); }
		public TerminalNode TO_DSINTERVAL() { return getToken(PlSqlParser.TO_DSINTERVAL, 0); }
		public TerminalNode TO_LOB() { return getToken(PlSqlParser.TO_LOB, 0); }
		public TerminalNode TO_MULTI_BYTE() { return getToken(PlSqlParser.TO_MULTI_BYTE, 0); }
		public TerminalNode TO_NCHAR() { return getToken(PlSqlParser.TO_NCHAR, 0); }
		public TerminalNode TO_NCLOB() { return getToken(PlSqlParser.TO_NCLOB, 0); }
		public TerminalNode TO_NUMBER() { return getToken(PlSqlParser.TO_NUMBER, 0); }
		public TerminalNode TOPLEVEL() { return getToken(PlSqlParser.TOPLEVEL, 0); }
		public TerminalNode TO_SINGLE_BYTE() { return getToken(PlSqlParser.TO_SINGLE_BYTE, 0); }
		public TerminalNode TO_TIME() { return getToken(PlSqlParser.TO_TIME, 0); }
		public TerminalNode TO_TIMESTAMP() { return getToken(PlSqlParser.TO_TIMESTAMP, 0); }
		public TerminalNode TO_TIMESTAMP_TZ() { return getToken(PlSqlParser.TO_TIMESTAMP_TZ, 0); }
		public TerminalNode TO_TIME_TZ() { return getToken(PlSqlParser.TO_TIME_TZ, 0); }
		public TerminalNode TO_YMINTERVAL() { return getToken(PlSqlParser.TO_YMINTERVAL, 0); }
		public TerminalNode TRACE() { return getToken(PlSqlParser.TRACE, 0); }
		public TerminalNode TRACING() { return getToken(PlSqlParser.TRACING, 0); }
		public TerminalNode TRACKING() { return getToken(PlSqlParser.TRACKING, 0); }
		public TerminalNode TRAILING() { return getToken(PlSqlParser.TRAILING, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlSqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSFORM_DISTINCT_AGG() { return getToken(PlSqlParser.TRANSFORM_DISTINCT_AGG, 0); }
		public TerminalNode TRANSITIONAL() { return getToken(PlSqlParser.TRANSITIONAL, 0); }
		public TerminalNode TRANSITION() { return getToken(PlSqlParser.TRANSITION, 0); }
		public TerminalNode TRANSLATE() { return getToken(PlSqlParser.TRANSLATE, 0); }
		public TerminalNode TREAT() { return getToken(PlSqlParser.TREAT, 0); }
		public TerminalNode TRIGGERS() { return getToken(PlSqlParser.TRIGGERS, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public TerminalNode TRUE() { return getToken(PlSqlParser.TRUE, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public TerminalNode TRUNC() { return getToken(PlSqlParser.TRUNC, 0); }
		public TerminalNode TRUSTED() { return getToken(PlSqlParser.TRUSTED, 0); }
		public TerminalNode TUNING() { return getToken(PlSqlParser.TUNING, 0); }
		public TerminalNode TX() { return getToken(PlSqlParser.TX, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public TerminalNode TYPES() { return getToken(PlSqlParser.TYPES, 0); }
		public TerminalNode TZ_OFFSET() { return getToken(PlSqlParser.TZ_OFFSET, 0); }
		public TerminalNode UB2() { return getToken(PlSqlParser.UB2, 0); }
		public TerminalNode UBA() { return getToken(PlSqlParser.UBA, 0); }
		public TerminalNode UID() { return getToken(PlSqlParser.UID, 0); }
		public TerminalNode UNARCHIVED() { return getToken(PlSqlParser.UNARCHIVED, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PlSqlParser.UNBOUNDED, 0); }
		public TerminalNode UNBOUND() { return getToken(PlSqlParser.UNBOUND, 0); }
		public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
		public TerminalNode UNDO() { return getToken(PlSqlParser.UNDO, 0); }
		public TerminalNode UNDROP() { return getToken(PlSqlParser.UNDROP, 0); }
		public TerminalNode UNIFORM() { return getToken(PlSqlParser.UNIFORM, 0); }
		public TerminalNode UNISTR() { return getToken(PlSqlParser.UNISTR, 0); }
		public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
		public TerminalNode UNLOAD() { return getToken(PlSqlParser.UNLOAD, 0); }
		public TerminalNode UNLOCK() { return getToken(PlSqlParser.UNLOCK, 0); }
		public TerminalNode UNNEST_INNERJ_DISTINCT_VIEW() { return getToken(PlSqlParser.UNNEST_INNERJ_DISTINCT_VIEW, 0); }
		public TerminalNode UNNEST() { return getToken(PlSqlParser.UNNEST, 0); }
		public TerminalNode UNNEST_NOSEMIJ_NODISTINCTVIEW() { return getToken(PlSqlParser.UNNEST_NOSEMIJ_NODISTINCTVIEW, 0); }
		public TerminalNode UNNEST_SEMIJ_VIEW() { return getToken(PlSqlParser.UNNEST_SEMIJ_VIEW, 0); }
		public TerminalNode UNPACKED() { return getToken(PlSqlParser.UNPACKED, 0); }
		public TerminalNode UNPIVOT() { return getToken(PlSqlParser.UNPIVOT, 0); }
		public TerminalNode UNPROTECTED() { return getToken(PlSqlParser.UNPROTECTED, 0); }
		public TerminalNode UNQUIESCE() { return getToken(PlSqlParser.UNQUIESCE, 0); }
		public TerminalNode UNRECOVERABLE() { return getToken(PlSqlParser.UNRECOVERABLE, 0); }
		public TerminalNode UNRESTRICTED() { return getToken(PlSqlParser.UNRESTRICTED, 0); }
		public TerminalNode UNTIL() { return getToken(PlSqlParser.UNTIL, 0); }
		public TerminalNode UNUSABLE() { return getToken(PlSqlParser.UNUSABLE, 0); }
		public TerminalNode UNUSED() { return getToken(PlSqlParser.UNUSED, 0); }
		public TerminalNode UPDATABLE() { return getToken(PlSqlParser.UPDATABLE, 0); }
		public TerminalNode UPDATED() { return getToken(PlSqlParser.UPDATED, 0); }
		public TerminalNode UPDATEXML() { return getToken(PlSqlParser.UPDATEXML, 0); }
		public TerminalNode UPD_INDEXES() { return getToken(PlSqlParser.UPD_INDEXES, 0); }
		public TerminalNode UPD_JOININDEX() { return getToken(PlSqlParser.UPD_JOININDEX, 0); }
		public TerminalNode UPGRADE() { return getToken(PlSqlParser.UPGRADE, 0); }
		public TerminalNode UPPER() { return getToken(PlSqlParser.UPPER, 0); }
		public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
		public TerminalNode UROWID() { return getToken(PlSqlParser.UROWID, 0); }
		public TerminalNode USAGE() { return getToken(PlSqlParser.USAGE, 0); }
		public TerminalNode USE_ANTI() { return getToken(PlSqlParser.USE_ANTI, 0); }
		public TerminalNode USE_CONCAT() { return getToken(PlSqlParser.USE_CONCAT, 0); }
		public TerminalNode USE_HASH_AGGREGATION() { return getToken(PlSqlParser.USE_HASH_AGGREGATION, 0); }
		public TerminalNode USE_HASH_GBY_FOR_PUSHDOWN() { return getToken(PlSqlParser.USE_HASH_GBY_FOR_PUSHDOWN, 0); }
		public TerminalNode USE_HASH() { return getToken(PlSqlParser.USE_HASH, 0); }
		public TerminalNode USE_INVISIBLE_INDEXES() { return getToken(PlSqlParser.USE_INVISIBLE_INDEXES, 0); }
		public TerminalNode USE_MERGE_CARTESIAN() { return getToken(PlSqlParser.USE_MERGE_CARTESIAN, 0); }
		public TerminalNode USE_MERGE() { return getToken(PlSqlParser.USE_MERGE, 0); }
		public TerminalNode USE() { return getToken(PlSqlParser.USE, 0); }
		public TerminalNode USE_NL() { return getToken(PlSqlParser.USE_NL, 0); }
		public TerminalNode USE_NL_WITH_INDEX() { return getToken(PlSqlParser.USE_NL_WITH_INDEX, 0); }
		public TerminalNode USE_PRIVATE_OUTLINES() { return getToken(PlSqlParser.USE_PRIVATE_OUTLINES, 0); }
		public TerminalNode USER_DEFINED() { return getToken(PlSqlParser.USER_DEFINED, 0); }
		public TerminalNode USERENV() { return getToken(PlSqlParser.USERENV, 0); }
		public TerminalNode USERGROUP() { return getToken(PlSqlParser.USERGROUP, 0); }
		public TerminalNode USER() { return getToken(PlSqlParser.USER, 0); }
		public TerminalNode USER_RECYCLEBIN() { return getToken(PlSqlParser.USER_RECYCLEBIN, 0); }
		public TerminalNode USERS() { return getToken(PlSqlParser.USERS, 0); }
		public TerminalNode USE_SEMI() { return getToken(PlSqlParser.USE_SEMI, 0); }
		public TerminalNode USE_STORED_OUTLINES() { return getToken(PlSqlParser.USE_STORED_OUTLINES, 0); }
		public TerminalNode USE_TTT_FOR_GSETS() { return getToken(PlSqlParser.USE_TTT_FOR_GSETS, 0); }
		public TerminalNode USE_WEAK_NAME_RESL() { return getToken(PlSqlParser.USE_WEAK_NAME_RESL, 0); }
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode VALIDATE() { return getToken(PlSqlParser.VALIDATE, 0); }
		public TerminalNode VALIDATION() { return getToken(PlSqlParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public TerminalNode VARIANCE() { return getToken(PlSqlParser.VARIANCE, 0); }
		public TerminalNode VAR_POP() { return getToken(PlSqlParser.VAR_POP, 0); }
		public TerminalNode VARRAY() { return getToken(PlSqlParser.VARRAY, 0); }
		public TerminalNode VARRAYS() { return getToken(PlSqlParser.VARRAYS, 0); }
		public TerminalNode VAR_SAMP() { return getToken(PlSqlParser.VAR_SAMP, 0); }
		public TerminalNode VARYING() { return getToken(PlSqlParser.VARYING, 0); }
		public TerminalNode VECTOR_READ() { return getToken(PlSqlParser.VECTOR_READ, 0); }
		public TerminalNode VECTOR_READ_TRACE() { return getToken(PlSqlParser.VECTOR_READ_TRACE, 0); }
		public TerminalNode VERIFY() { return getToken(PlSqlParser.VERIFY, 0); }
		public TerminalNode VERSIONING() { return getToken(PlSqlParser.VERSIONING, 0); }
		public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
		public TerminalNode VERSIONS_ENDSCN() { return getToken(PlSqlParser.VERSIONS_ENDSCN, 0); }
		public TerminalNode VERSIONS_ENDTIME() { return getToken(PlSqlParser.VERSIONS_ENDTIME, 0); }
		public TerminalNode VERSIONS() { return getToken(PlSqlParser.VERSIONS, 0); }
		public TerminalNode VERSIONS_OPERATION() { return getToken(PlSqlParser.VERSIONS_OPERATION, 0); }
		public TerminalNode VERSIONS_STARTSCN() { return getToken(PlSqlParser.VERSIONS_STARTSCN, 0); }
		public TerminalNode VERSIONS_STARTTIME() { return getToken(PlSqlParser.VERSIONS_STARTTIME, 0); }
		public TerminalNode VERSIONS_XID() { return getToken(PlSqlParser.VERSIONS_XID, 0); }
		public TerminalNode VIRTUAL() { return getToken(PlSqlParser.VIRTUAL, 0); }
		public TerminalNode VISIBLE() { return getToken(PlSqlParser.VISIBLE, 0); }
		public TerminalNode VOLUME() { return getToken(PlSqlParser.VOLUME, 0); }
		public TerminalNode VSIZE() { return getToken(PlSqlParser.VSIZE, 0); }
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public TerminalNode WALLET() { return getToken(PlSqlParser.WALLET, 0); }
		public TerminalNode WELLFORMED() { return getToken(PlSqlParser.WELLFORMED, 0); }
		public TerminalNode WHENEVER() { return getToken(PlSqlParser.WHENEVER, 0); }
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public TerminalNode WHITESPACE() { return getToken(PlSqlParser.WHITESPACE, 0); }
		public TerminalNode WIDTH_BUCKET() { return getToken(PlSqlParser.WIDTH_BUCKET, 0); }
		public TerminalNode WITHIN() { return getToken(PlSqlParser.WITHIN, 0); }
		public TerminalNode WITHOUT() { return getToken(PlSqlParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
		public TerminalNode WRAPPED() { return getToken(PlSqlParser.WRAPPED, 0); }
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public TerminalNode XDB_FASTPATH_INSERT() { return getToken(PlSqlParser.XDB_FASTPATH_INSERT, 0); }
		public TerminalNode X_DYN_PRUNE() { return getToken(PlSqlParser.X_DYN_PRUNE, 0); }
		public TerminalNode XID() { return getToken(PlSqlParser.XID, 0); }
		public TerminalNode XML2OBJECT() { return getToken(PlSqlParser.XML2OBJECT, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(PlSqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCAST() { return getToken(PlSqlParser.XMLCAST, 0); }
		public TerminalNode XMLCDATA() { return getToken(PlSqlParser.XMLCDATA, 0); }
		public TerminalNode XMLCOLATTVAL() { return getToken(PlSqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLCOMMENT() { return getToken(PlSqlParser.XMLCOMMENT, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PlSqlParser.XMLCONCAT, 0); }
		public TerminalNode XMLDIFF() { return getToken(PlSqlParser.XMLDIFF, 0); }
		public TerminalNode XML_DML_RWT_STMT() { return getToken(PlSqlParser.XML_DML_RWT_STMT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PlSqlParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS2() { return getToken(PlSqlParser.XMLEXISTS2, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PlSqlParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(PlSqlParser.XMLFOREST, 0); }
		public TerminalNode XMLINDEX_REWRITE_IN_SELECT() { return getToken(PlSqlParser.XMLINDEX_REWRITE_IN_SELECT, 0); }
		public TerminalNode XMLINDEX_REWRITE() { return getToken(PlSqlParser.XMLINDEX_REWRITE, 0); }
		public TerminalNode XMLINDEX_SEL_IDX_TBL() { return getToken(PlSqlParser.XMLINDEX_SEL_IDX_TBL, 0); }
		public TerminalNode XMLISNODE() { return getToken(PlSqlParser.XMLISNODE, 0); }
		public TerminalNode XMLISVALID() { return getToken(PlSqlParser.XMLISVALID, 0); }
		public TerminalNode XML() { return getToken(PlSqlParser.XML, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(PlSqlParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(PlSqlParser.XMLPARSE, 0); }
		public TerminalNode XMLPATCH() { return getToken(PlSqlParser.XMLPATCH, 0); }
		public TerminalNode XMLPI() { return getToken(PlSqlParser.XMLPI, 0); }
		public TerminalNode XMLQUERY() { return getToken(PlSqlParser.XMLQUERY, 0); }
		public TerminalNode XMLQUERYVAL() { return getToken(PlSqlParser.XMLQUERYVAL, 0); }
		public TerminalNode XMLROOT() { return getToken(PlSqlParser.XMLROOT, 0); }
		public TerminalNode XMLSCHEMA() { return getToken(PlSqlParser.XMLSCHEMA, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PlSqlParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(PlSqlParser.XMLTABLE, 0); }
		public TerminalNode XMLTRANSFORMBLOB() { return getToken(PlSqlParser.XMLTRANSFORMBLOB, 0); }
		public TerminalNode XMLTRANSFORM() { return getToken(PlSqlParser.XMLTRANSFORM, 0); }
		public TerminalNode XMLTYPE() { return getToken(PlSqlParser.XMLTYPE, 0); }
		public TerminalNode XPATHTABLE() { return getToken(PlSqlParser.XPATHTABLE, 0); }
		public TerminalNode XS_SYS_CONTEXT() { return getToken(PlSqlParser.XS_SYS_CONTEXT, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode YEAROFWEEK() { return getToken(PlSqlParser.YEAROFWEEK, 0); }
		public TerminalNode YES() { return getToken(PlSqlParser.YES, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public Non_reserved_keywords_pre12cContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_reserved_keywords_pre12c; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNon_reserved_keywords_pre12c(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNon_reserved_keywords_pre12c(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitNon_reserved_keywords_pre12c(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_reserved_keywords_pre12cContext non_reserved_keywords_pre12c() throws RecognitionException {
		Non_reserved_keywords_pre12cContext _localctx = new Non_reserved_keywords_pre12cContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_non_reserved_keywords_pre12c);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1626);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 5463616014945309046L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -2307609062889751181L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -2468150501968453637L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & 1792007140690489871L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -1311391920391258369L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -4074923142184370433L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -2946761570410318273L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 9198307397586103867L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & -3495505809999857697L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1837961512690523153L) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & -3819492289063950465L) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & -4647714678838968323L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8643252099097818095L) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & -2595216329851938833L) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & -1134698450502669L) != 0) || ((((_la - 964)) & ~0x3f) == 0 && ((1L << (_la - 964)) & -2524324809500786689L) != 0) || ((((_la - 1028)) & ~0x3f) == 0 && ((1L << (_la - 1028)) & -2105433942487663617L) != 0) || ((((_la - 1092)) & ~0x3f) == 0 && ((1L << (_la - 1092)) & -5205319218228167235L) != 0) || ((((_la - 1157)) & ~0x3f) == 0 && ((1L << (_la - 1157)) & -2270080294371508481L) != 0) || ((((_la - 1221)) & ~0x3f) == 0 && ((1L << (_la - 1221)) & -6485198179188081939L) != 0) || ((((_la - 1286)) & ~0x3f) == 0 && ((1L << (_la - 1286)) & 1835231124520769787L) != 0) || ((((_la - 1350)) & ~0x3f) == 0 && ((1L << (_la - 1350)) & -432636354993496129L) != 0) || ((((_la - 1415)) & ~0x3f) == 0 && ((1L << (_la - 1415)) & -165507286306392193L) != 0) || ((((_la - 1479)) & ~0x3f) == 0 && ((1L << (_la - 1479)) & 9221049850840201135L) != 0) || ((((_la - 1543)) & ~0x3f) == 0 && ((1L << (_la - 1543)) & -883207184950100365L) != 0) || ((((_la - 1607)) & ~0x3f) == 0 && ((1L << (_la - 1607)) & -13343459913859L) != 0) || ((((_la - 1672)) & ~0x3f) == 0 && ((1L << (_la - 1672)) & -2305851978181783553L) != 0) || ((((_la - 1736)) & ~0x3f) == 0 && ((1L << (_la - 1736)) & -1095114655007117L) != 0) || ((((_la - 1800)) & ~0x3f) == 0 && ((1L << (_la - 1800)) & -563224831329281L) != 0) || ((((_la - 1864)) & ~0x3f) == 0 && ((1L << (_la - 1864)) & -1L) != 0) || ((((_la - 1928)) & ~0x3f) == 0 && ((1L << (_la - 1928)) & 9155818042444218367L) != 0) || ((((_la - 1992)) & ~0x3f) == 0 && ((1L << (_la - 1992)) & -4756927115010162945L) != 0) || ((((_la - 2056)) & ~0x3f) == 0 && ((1L << (_la - 2056)) & -1225265110231564355L) != 0) || ((((_la - 2121)) & ~0x3f) == 0 && ((1L << (_la - 2121)) & -3170798147963457601L) != 0) || ((((_la - 2185)) & ~0x3f) == 0 && ((1L << (_la - 2185)) & 2305842459385952711L) != 0) || ((((_la - 2249)) & ~0x3f) == 0 && ((1L << (_la - 2249)) & -4629755396276351001L) != 0) || ((((_la - 2313)) & ~0x3f) == 0 && ((1L << (_la - 2313)) & 7L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 71:
			return logical_expression_sempred((Logical_expressionContext)_localctx, predIndex);
		case 75:
			return relational_expression_sempred((Relational_expressionContext)_localctx, predIndex);
		case 80:
			return concatenation_sempred((ConcatenationContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean logical_expression_sempred(Logical_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 2);
		case 1:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean relational_expression_sempred(Relational_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean concatenation_sempred(ConcatenationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3:
			return precpred(_ctx, 3);
		case 4:
			return precpred(_ctx, 2);
		case 5:
			return precpred(_ctx, 1);
		}
		return true;
	}

	public static final String _serializedATN =
		"\u0004\u0001\u0938\u065d\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0001\u0000\u0001\u0000\u0003\u0000\u0101"+
		"\b\u0000\u0005\u0000\u0103\b\u0000\n\u0000\f\u0000\u0106\t\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0003\u0001\u0119"+
		"\b\u0001\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0005\u0002\u0121\b\u0002\n\u0002\f\u0002\u0124\t\u0002\u0001\u0002"+
		"\u0001\u0002\u0003\u0002\u0128\b\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0003\u0002\u012e\b\u0002\u0001\u0002\u0003\u0002\u0131\b"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0003\u0001"+
		"\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0005"+
		"\u0003\u013e\b\u0003\n\u0003\f\u0003\u0141\t\u0003\u0001\u0003\u0001\u0003"+
		"\u0003\u0003\u0145\b\u0003\u0001\u0003\u0001\u0003\u0003\u0003\u0149\b"+
		"\u0003\u0001\u0003\u0003\u0003\u014c\b\u0003\u0001\u0003\u0001\u0003\u0001"+
		"\u0003\u0001\u0003\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0005\u0003"+
		"\u0005\u0156\b\u0005\u0001\u0005\u0003\u0005\u0159\b\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0005\u0006\u0164\b\u0006\n\u0006\f\u0006\u0167"+
		"\t\u0006\u0001\u0006\u0001\u0006\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0005\u0007\u0171\b\u0007\n\u0007\f\u0007"+
		"\u0174\t\u0007\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b"+
		"\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\n\u0001\n\u0001\n\u0005"+
		"\n\u0185\b\n\n\n\f\n\u0188\t\n\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\f\u0001\f\u0001\r\u0001\r\u0001\r\u0001\r\u0005\r\u0194\b"+
		"\r\n\r\f\r\u0197\t\r\u0001\r\u0001\r\u0003\r\u019b\b\r\u0001\u000e\u0001"+
		"\u000e\u0001\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u01a2\b\u000f\u0001"+
		"\u000f\u0001\u000f\u0003\u000f\u01a6\b\u000f\u0003\u000f\u01a8\b\u000f"+
		"\u0001\u000f\u0003\u000f\u01ab\b\u000f\u0001\u000f\u0003\u000f\u01ae\b"+
		"\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u01b3\b\u000f\u0001"+
		"\u000f\u0001\u000f\u0003\u000f\u01b7\b\u000f\u0001\u000f\u0001\u000f\u0003"+
		"\u000f\u01bb\b\u000f\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011\u0001"+
		"\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0003\u0011\u01c5\b\u0011\u0003"+
		"\u0011\u01c7\b\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0003\u0011\u01cc"+
		"\b\u0011\u0001\u0012\u0004\u0012\u01cf\b\u0012\u000b\u0012\f\u0012\u01d0"+
		"\u0001\u0012\u0001\u0012\u0004\u0012\u01d5\b\u0012\u000b\u0012\f\u0012"+
		"\u01d6\u0001\u0012\u0001\u0012\u0003\u0012\u01db\b\u0012\u0001\u0013\u0001"+
		"\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u01e2\b\u0013\u0001"+
		"\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001"+
		"\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001"+
		"\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u01f4\b\u0013\u0001"+
		"\u0014\u0001\u0014\u0003\u0014\u01f8\b\u0014\u0001\u0014\u0001\u0014\u0001"+
		"\u0014\u0003\u0014\u01fd\b\u0014\u0001\u0014\u0003\u0014\u0200\b\u0014"+
		"\u0001\u0014\u0003\u0014\u0203\b\u0014\u0001\u0014\u0003\u0014\u0206\b"+
		"\u0014\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001"+
		"\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001"+
		"\u0016\u0001\u0017\u0001\u0017\u0005\u0017\u0216\b\u0017\n\u0017\f\u0017"+
		"\u0219\t\u0017\u0001\u0017\u0003\u0017\u021c\b\u0017\u0001\u0017\u0003"+
		"\u0017\u021f\b\u0017\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0019\u0004"+
		"\u0019\u0225\b\u0019\u000b\u0019\f\u0019\u0226\u0001\u001a\u0001\u001a"+
		"\u0001\u001b\u0001\u001b\u0003\u001b\u022d\b\u001b\u0001\u001b\u0001\u001b"+
		"\u0001\u001b\u0003\u001b\u0232\b\u001b\u0001\u001b\u0003\u001b\u0235\b"+
		"\u001b\u0001\u001b\u0001\u001b\u0001\u001c\u0001\u001c\u0001\u001c\u0004"+
		"\u001c\u023c\b\u001c\u000b\u001c\f\u001c\u023d\u0001\u001d\u0001\u001d"+
		"\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d"+
		"\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u024b\b\u001d\u0001\u001e"+
		"\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001f\u0001\u001f\u0001 \u0001"+
		" \u0001!\u0001!\u0001!\u0001!\u0001!\u0005!\u025a\b!\n!\f!\u025d\t!\u0001"+
		"!\u0003!\u0260\b!\u0001!\u0001!\u0001!\u0001\"\u0001\"\u0001\"\u0001\""+
		"\u0001\"\u0001#\u0001#\u0001#\u0001$\u0001$\u0001$\u0001$\u0003$\u0271"+
		"\b$\u0001$\u0001$\u0001$\u0001$\u0001$\u0003$\u0278\b$\u0001%\u0001%\u0001"+
		"%\u0003%\u027d\b%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001"+
		"%\u0001%\u0003%\u0288\b%\u0001%\u0003%\u028b\b%\u0001%\u0001%\u0001%\u0001"+
		"%\u0003%\u0291\b%\u0003%\u0293\b%\u0001&\u0001&\u0001\'\u0001\'\u0001"+
		"(\u0001(\u0001)\u0001)\u0003)\u029d\b)\u0001*\u0001*\u0003*\u02a1\b*\u0001"+
		"+\u0003+\u02a4\b+\u0001+\u0001+\u0003+\u02a8\b+\u0001,\u0001,\u0001,\u0001"+
		",\u0004,\u02ae\b,\u000b,\f,\u02af\u0003,\u02b2\b,\u0001,\u0001,\u0003"+
		",\u02b6\b,\u0001-\u0001-\u0001-\u0001-\u0005-\u02bc\b-\n-\f-\u02bf\t-"+
		"\u0001-\u0001-\u0001-\u0001.\u0003.\u02c5\b.\u0001.\u0004.\u02c8\b.\u000b"+
		".\f.\u02c9\u0001.\u0001.\u0001/\u0001/\u00010\u00010\u00010\u00010\u0001"+
		"0\u00010\u00010\u00030\u02d7\b0\u00011\u00011\u00012\u00012\u00052\u02dd"+
		"\b2\n2\f2\u02e0\t2\u00013\u00013\u00013\u00013\u00013\u00033\u02e7\b3"+
		"\u00014\u00014\u00034\u02eb\b4\u00014\u00014\u00034\u02ef\b4\u00014\u0001"+
		"4\u00015\u00015\u00055\u02f5\b5\n5\f5\u02f8\t5\u00015\u00015\u00016\u0001"+
		"6\u00056\u02fe\b6\n6\f6\u0301\t6\u00017\u00017\u00017\u00017\u00017\u0005"+
		"7\u0308\b7\n7\f7\u030b\t7\u00017\u00017\u00018\u00018\u00018\u00038\u0312"+
		"\b8\u00018\u00018\u00038\u0316\b8\u00019\u00019\u00059\u031a\b9\n9\f9"+
		"\u031d\t9\u00019\u00019\u0001:\u0001:\u0005:\u0323\b:\n:\f:\u0326\t:\u0001"+
		";\u0001;\u0001;\u0005;\u032b\b;\n;\f;\u032e\t;\u0001;\u0001;\u0001<\u0001"+
		"<\u0001<\u0005<\u0335\b<\n<\f<\u0338\t<\u0001=\u0001=\u0005=\u033c\b="+
		"\n=\f=\u033f\t=\u0001=\u0001=\u0001>\u0001>\u0005>\u0345\b>\n>\f>\u0348"+
		"\t>\u0001?\u0001?\u0005?\u034c\b?\n?\f?\u034f\t?\u0001?\u0001?\u0001@"+
		"\u0001@\u0001@\u0005@\u0356\b@\n@\f@\u0359\t@\u0001@\u0001@\u0001A\u0001"+
		"A\u0001A\u0005A\u0360\bA\nA\fA\u0363\tA\u0001B\u0001B\u0001B\u0005B\u0368"+
		"\bB\nB\fB\u036b\tB\u0001B\u0001B\u0001C\u0001C\u0001C\u0005C\u0372\bC"+
		"\nC\fC\u0375\tC\u0001D\u0001D\u0001E\u0001E\u0001E\u0005E\u037c\bE\nE"+
		"\fE\u037f\tE\u0001F\u0001F\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001"+
		"G\u0001G\u0001G\u0005G\u038c\bG\nG\fG\u038f\tG\u0001H\u0003H\u0392\bH"+
		"\u0001H\u0001H\u0001H\u0003H\u0397\bH\u0001H\u0005H\u039a\bH\nH\fH\u039d"+
		"\tH\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0003"+
		"I\u03a8\bI\u0001I\u0001I\u0003I\u03ac\bI\u0001I\u0001I\u0001I\u0005I\u03b1"+
		"\bI\nI\fI\u03b4\tI\u0001I\u0001I\u0003I\u03b8\bI\u0001J\u0001J\u0001J"+
		"\u0003J\u03bd\bJ\u0001J\u0003J\u03c0\bJ\u0001K\u0001K\u0001K\u0001K\u0001"+
		"K\u0001K\u0001K\u0005K\u03c9\bK\nK\fK\u03cc\tK\u0001L\u0001L\u0003L\u03d0"+
		"\bL\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0003L\u03da"+
		"\bL\u0003L\u03dc\bL\u0003L\u03de\bL\u0001M\u0001M\u0001M\u0001M\u0001"+
		"M\u0001M\u0001M\u0001M\u0003M\u03e8\bM\u0001M\u0001M\u0003M\u03ec\bM\u0003"+
		"M\u03ee\bM\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0005"+
		"N\u03f8\bN\nN\fN\u03fb\tN\u0001N\u0001N\u0001N\u0001N\u0001N\u0003N\u0402"+
		"\bN\u0001O\u0001O\u0001O\u0001O\u0001P\u0001P\u0001P\u0001P\u0001P\u0001"+
		"P\u0001P\u0003P\u040f\bP\u0001P\u0003P\u0412\bP\u0001P\u0001P\u0001P\u0003"+
		"P\u0417\bP\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001"+
		"P\u0001P\u0005P\u0423\bP\nP\fP\u0426\tP\u0001Q\u0001Q\u0001Q\u0001Q\u0001"+
		"Q\u0003Q\u042d\bQ\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0003Q\u0435"+
		"\bQ\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0003Q\u043c\bQ\u0001Q\u0001Q\u0001"+
		"Q\u0001Q\u0001Q\u0003Q\u0443\bQ\u0001R\u0001R\u0001S\u0001S\u0001S\u0001"+
		"S\u0001S\u0001S\u0001S\u0001S\u0001S\u0001S\u0001S\u0001S\u0001S\u0001"+
		"S\u0001S\u0001S\u0003S\u0457\bS\u0001T\u0001T\u0001T\u0001T\u0001T\u0001"+
		"T\u0001T\u0001T\u0003T\u0461\bT\u0001T\u0001T\u0001T\u0001T\u0001T\u0001"+
		"T\u0001T\u0001T\u0003T\u046b\bT\u0001T\u0001T\u0001T\u0001T\u0003T\u0471"+
		"\bT\u0003T\u0473\bT\u0001T\u0001T\u0001T\u0001T\u0001T\u0001T\u0001T\u0001"+
		"T\u0001T\u0003T\u047e\bT\u0001U\u0001U\u0003U\u0482\bU\u0001V\u0003V\u0485"+
		"\bV\u0001V\u0001V\u0001V\u0004V\u048a\bV\u000bV\fV\u048b\u0001V\u0003"+
		"V\u048f\bV\u0001V\u0001V\u0003V\u0493\bV\u0001V\u0003V\u0496\bV\u0001"+
		"W\u0001W\u0001W\u0001W\u0001W\u0003W\u049d\bW\u0001X\u0003X\u04a0\bX\u0001"+
		"X\u0001X\u0004X\u04a4\bX\u000bX\fX\u04a5\u0001X\u0003X\u04a9\bX\u0001"+
		"X\u0001X\u0003X\u04ad\bX\u0001X\u0003X\u04b0\bX\u0001Y\u0001Y\u0001Y\u0001"+
		"Y\u0001Y\u0003Y\u04b7\bY\u0001Z\u0001Z\u0001Z\u0003Z\u04bc\bZ\u0001[\u0001"+
		"[\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0005[\u04c8"+
		"\b[\n[\f[\u04cb\t[\u0001[\u0001[\u0001[\u0001[\u0001[\u0003[\u04d2\b["+
		"\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001"+
		"\\\u0003\\\u04dd\b\\\u0001]\u0001]\u0001]\u0005]\u04e2\b]\n]\f]\u04e5"+
		"\t]\u0001]\u0001]\u0003]\u04e9\b]\u0001^\u0001^\u0001_\u0001_\u0001`\u0001"+
		"`\u0001`\u0005`\u04f2\b`\n`\f`\u04f5\t`\u0001a\u0001a\u0001a\u0005a\u04fa"+
		"\ba\na\fa\u04fd\ta\u0001b\u0001b\u0001c\u0001c\u0003c\u0503\bc\u0001c"+
		"\u0001c\u0001c\u0003c\u0508\bc\u0001c\u0003c\u050b\bc\u0001d\u0001d\u0001"+
		"d\u0003d\u0510\bd\u0001e\u0001e\u0003e\u0514\be\u0001f\u0001f\u0003f\u0518"+
		"\bf\u0001g\u0001g\u0001h\u0001h\u0001h\u0005h\u051f\bh\nh\fh\u0522\th"+
		"\u0001i\u0001i\u0001j\u0001j\u0001j\u0005j\u0529\bj\nj\fj\u052c\tj\u0001"+
		"k\u0001k\u0001k\u0001k\u0005k\u0532\bk\nk\fk\u0535\tk\u0003k\u0537\bk"+
		"\u0001k\u0001k\u0001l\u0001l\u0001l\u0001l\u0003l\u053f\bl\u0001l\u0001"+
		"l\u0001m\u0001m\u0003m\u0545\bm\u0001m\u0001m\u0003m\u0549\bm\u0003m\u054b"+
		"\bm\u0001n\u0001n\u0003n\u054f\bn\u0001o\u0001o\u0001o\u0003o\u0554\b"+
		"o\u0001o\u0001o\u0001o\u0003o\u0559\bo\u0003o\u055b\bo\u0001o\u0003o\u055e"+
		"\bo\u0001o\u0001o\u0001p\u0001p\u0001q\u0001q\u0001q\u0003q\u0567\bq\u0001"+
		"q\u0003q\u056a\bq\u0001q\u0001q\u0001q\u0003q\u056f\bq\u0003q\u0571\b"+
		"q\u0001q\u0001q\u0005q\u0575\bq\nq\fq\u0578\tq\u0001r\u0001r\u0001r\u0005"+
		"r\u057d\br\nr\fr\u0580\tr\u0001s\u0001s\u0003s\u0584\bs\u0001s\u0001s"+
		"\u0001s\u0005s\u0589\bs\ns\fs\u058c\ts\u0001s\u0001s\u0003s\u0590\bs\u0001"+
		"s\u0003s\u0593\bs\u0001t\u0001t\u0003t\u0597\bt\u0001t\u0001t\u0001t\u0005"+
		"t\u059c\bt\nt\ft\u059f\tt\u0001u\u0001u\u0001u\u0003u\u05a4\bu\u0001u"+
		"\u0001u\u0001u\u0001u\u0003u\u05aa\bu\u0001u\u0001u\u0001u\u0001u\u0003"+
		"u\u05b0\bu\u0001u\u0001u\u0001u\u0001u\u0003u\u05b6\bu\u0001u\u0001u\u0001"+
		"u\u0003u\u05bb\bu\u0003u\u05bd\bu\u0001u\u0003u\u05c0\bu\u0001u\u0001"+
		"u\u0001u\u0001u\u0001u\u0001u\u0001u\u0001u\u0003u\u05ca\bu\u0001u\u0003"+
		"u\u05cd\bu\u0003u\u05cf\bu\u0003u\u05d1\bu\u0001u\u0001u\u0001u\u0001"+
		"u\u0001u\u0001u\u0001u\u0001u\u0001u\u0001u\u0001u\u0001u\u0003u\u05df"+
		"\bu\u0001v\u0001v\u0001w\u0001w\u0001w\u0001x\u0001x\u0001x\u0003x\u05e9"+
		"\bx\u0001y\u0001y\u0003y\u05ed\by\u0001y\u0001y\u0001z\u0001z\u0003z\u05f3"+
		"\bz\u0001{\u0001{\u0001{\u0001{\u0001|\u0001|\u0001|\u0001|\u0001|\u0001"+
		"|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001"+
		"|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001"+
		"|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001"+
		"|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001"+
		"|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001"+
		"|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001"+
		"|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001"+
		"|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001"+
		"|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0003|\u0657"+
		"\b|\u0001}\u0001}\u0001~\u0001~\u0001~\u000f\u0165\u0172\u02f6\u02ff\u031b"+
		"\u0324\u032c\u0336\u033d\u0346\u034d\u0357\u0361\u0369\u0373\u0003\u008e"+
		"\u0096\u00a0\u007f\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014"+
		"\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfh"+
		"jlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092"+
		"\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa"+
		"\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2"+
		"\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da"+
		"\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2"+
		"\u00f4\u00f6\u00f8\u00fa\u00fc\u0000\u0018\u0002\u0000BB\u02dc\u02dc\u0002"+
		"\u0000\u02da\u02da\u0887\u0887\u0002\u0000\u02b0\u02b0\u04d7\u04d7\u0002"+
		"\u0000\u0170\u0170\u0921\u0921\u0001\u0001\u092c\u092c\u0002\u0000\u013a"+
		"\u013a\u05e7\u05e7\u0002\u0000\u036a\u036a\u068e\u068e\u0002\u0000\u031d"+
		"\u031f\u0321\u0321\u0001\u0000\u0929\u092a\u0002\u0000\u01de\u01de\u080b"+
		"\u080b\u0002\u0000\u091b\u091b\u091f\u091f\u0004\u0000\u0917\u0917\u091c"+
		"\u091d\u0926\u0926\u092d\u092d\u0004\u0000\u0159\u0159\u039b\u039b\u060d"+
		"\u060d\u08c9\u08c9\u0001\u0000\u091c\u091d\u0002\u0000\u00ac\u00ac\u08a5"+
		"\u08a5\t\u0000\u0159\u015a\u01ab\u01ab\u0276\u0276\u0380\u0380\u039b\u039b"+
		"\u0575\u0575\u060d\u060d\u088e\u088e\u08c9\u08ca\u0004\u0000%%55\u01f4"+
		"\u01f4\u0650\u0650\u0001\u0000\u0514\u0515\u0002\u0000\u009c\u009c\u00b9"+
		"\u00b9\u000e\u0000vv\u0087\u0087\u008d\u008d\u009c\u009c\u0157\u0157\u0168"+
		"\u0168\u01ac\u01ac\u022f\u022f\u02d6\u02d7\u0484\u0484\u064e\u064e\u0689"+
		"\u0689\u07da\u07da\u086c\u086c\u0006\u0000\u0159\u0159\u0276\u0276\u0380"+
		"\u0380\u039b\u039b\u060d\u060d\u08c9\u08c9\u0001\u0000\u0912\u0913\u00fe"+
		"\u0000\u0007\u0007\t\u000b\r\r\u000f\u000f\u0012\u0013\u001c\u001c\u001f"+
		"\u001f**,,..23::<=??GGII[[^^`addijnnqq\u0082\u0082\u0093\u0093\u00a1\u00a3"+
		"\u00a7\u00a8\u00af\u00af\u00c4\u00c8\u00cb\u00cb\u00d2\u00d3\u00d5\u00d5"+
		"\u00e8\u00e9\u00ef\u00f0\u00f8\u00fa\u00fd\u00ff\u0112\u0115\u011b\u011b"+
		"\u011d\u011f\u0131\u0131\u0134\u0135\u0139\u0139\u013c\u013c\u0151\u0151"+
		"\u0153\u0153\u0155\u0156\u015b\u015b\u0161\u0161\u016b\u016b\u0172\u0173"+
		"\u0177\u0177\u017b\u017c\u0187\u0188\u018e\u018e\u0192\u0192\u0194\u0194"+
		"\u0199\u0199\u01a3\u01a3\u01b6\u01b7\u01bd\u01bd\u01c2\u01c2\u01c8\u01c8"+
		"\u01cc\u01cc\u01ce\u01ce\u01db\u01db\u01e3\u01e3\u01e5\u01e5\u01f3\u01f3"+
		"\u01ff\u01ff\u0205\u0205\u020b\u020b\u0210\u0211\u0213\u0214\u0216\u0216"+
		"\u0218\u0219\u021d\u021d\u021f\u0220\u022b\u022b\u0231\u0231\u023d\u023d"+
		"\u024a\u024a\u024c\u024c\u0251\u0251\u0261\u0261\u026e\u026f\u0277\u0278"+
		"\u027b\u027b\u0287\u0287\u028b\u028c\u029c\u029c\u02af\u02af\u02b8\u02b8"+
		"\u02ba\u02ba\u02bd\u02bd\u02cf\u02cf\u02dd\u02dd\u02e5\u02f3\u02f5\u02f5"+
		"\u02fe\u02fe\u0300\u0300\u0306\u0306\u030c\u030d\u0317\u0317\u031a\u031a"+
		"\u0323\u0323\u0332\u0332\u0334\u0334\u033d\u033d\u0343\u0343\u034f\u034f"+
		"\u0351\u0351\u0355\u0358\u0363\u0363\u036b\u036f\u0376\u0376\u0381\u0381"+
		"\u038e\u038e\u0392\u0392\u0394\u0394\u0398\u0398\u039d\u039d\u03a3\u03a3"+
		"\u03b6\u03b6\u03e0\u03e1\u03e5\u03e5\u03e7\u03e7\u03ee\u03ee\u03f0\u03f0"+
		"\u03f7\u03f7\u03fc\u03fd\u0401\u0401\u040e\u040e\u0414\u0416\u0426\u0426"+
		"\u042c\u042c\u0437\u0439\u043c\u043c\u043e\u0440\u0445\u0445\u044a\u044a"+
		"\u044d\u044d\u0454\u0454\u045c\u045c\u046d\u046d\u0474\u0474\u0476\u0478"+
		"\u047f\u047f\u048d\u048d\u0493\u0493\u049a\u049a\u049c\u049d\u04b1\u04b3"+
		"\u04bc\u04c1\u04c6\u04c6\u04ea\u04eb\u04ed\u04ed\u04ef\u04f0\u04fe\u04fe"+
		"\u0500\u0501\u0503\u0503\u0505\u0505\u0517\u0517\u051a\u051b\u052e\u052e"+
		"\u0532\u0536\u053d\u053d\u053f\u0540\u0543\u0544\u054c\u054c\u0553\u0553"+
		"\u0555\u0555\u0557\u0558\u055c\u055c\u0566\u0566\u0569\u056b\u0571\u0571"+
		"\u0576\u0576\u057f\u057f\u058e\u058e\u059a\u059a\u05ba\u05ba\u05bd\u05bd"+
		"\u05cd\u05cd\u05e3\u05e3\u05e9\u05e9\u05f5\u05f5\u05fa\u05fa\u0606\u0606"+
		"\u0609\u0609\u060e\u060f\u0623\u0623\u0625\u0625\u0627\u0627\u0636\u0637"+
		"\u063d\u063d\u0653\u0654\u0661\u0661\u0665\u0666\u0668\u0668\u0671\u0672"+
		"\u0687\u0687\u0694\u0695\u069d\u069d\u06a7\u06a7\u06ab\u06ab\u06ad\u06ad"+
		"\u06b3\u06b3\u06c5\u06c5\u06ca\u06cb\u06cf\u06d0\u06e6\u06e6\u06f2\u06f2"+
		"\u06f5\u06f9\u0712\u0712\u072e\u072e\u0739\u0739\u07bc\u07be\u07c7\u07c7"+
		"\u07d0\u07d0\u07d6\u07d7\u07e9\u07e9\u0801\u0801\u0806\u0806\u080e\u080e"+
		"\u0816\u0816\u081b\u081b\u0826\u0826\u082d\u082d\u0832\u0832\u0840\u0840"+
		"\u0844\u0844\u0848\u0848\u084f\u084f\u0855\u0855\u085b\u085b\u085d\u085d"+
		"\u085f\u0864\u0866\u0866\u0868\u0868\u0875\u0878\u0884\u0884\u0886\u0886"+
		"\u088d\u088e\u0898\u0898\u089c\u089c\u08c6\u08c6\u08c8\u08c8\u08cd\u08cd"+
		"\u08d5\u08e1\u08e3\u08e3\u08e5\u08e5\u08e7\u08e8\u08fa\u08fa\u0911\u0911"+
		"\u015a\u0000\u0001\u0002\u0004\u0006\b\b\f\f\u000e\u000e\u0010\u0011\u0014"+
		"\u001b\u001d\u001e  $$&(++--//114469;;>>@ADFHHJQSXZZ\\\\__ccfhkmops|~"+
		"\u0081\u0083\u008c\u008e\u0092\u0094\u0098\u009a\u00a0\u00a4\u00a5\u00a9"+
		"\u00ac\u00ae\u00ae\u00b0\u00b5\u00b7\u00b8\u00ba\u00bc\u00be\u00c3\u00c9"+
		"\u00c9\u00cc\u00d0\u00d4\u00d4\u00d6\u00e7\u00ea\u00ee\u00f1\u00f4\u00f6"+
		"\u00f7\u00fb\u00fc\u0100\u0107\u0109\u010f\u0111\u0111\u0116\u011a\u011c"+
		"\u011c\u0120\u012f\u0132\u0133\u0136\u0138\u013a\u013b\u013d\u0147\u0149"+
		"\u014f\u0152\u0152\u0154\u0154\u0158\u015a\u015c\u0160\u0162\u0167\u0169"+
		"\u016a\u016c\u016f\u0171\u0171\u0174\u0176\u0178\u017a\u017e\u0185\u0189"+
		"\u018a\u018c\u018d\u018f\u0191\u0193\u0193\u0195\u0198\u019a\u019c\u019e"+
		"\u019f\u01a1\u01a2\u01a4\u01af\u01b1\u01b1\u01b3\u01b4\u01b8\u01ba\u01bc"+
		"\u01bc\u01be\u01c1\u01c3\u01c5\u01c9\u01cb\u01cd\u01cd\u01cf\u01d2\u01d4"+
		"\u01da\u01dd\u01e2\u01e4\u01e4\u01e6\u01e9\u01ec\u01ef\u01f1\u01f2\u01f5"+
		"\u01f5\u01f7\u01fe\u0200\u0204\u0206\u020a\u020c\u020f\u0212\u0212\u0215"+
		"\u0215\u0217\u0217\u021a\u021c\u021e\u021e\u0222\u022a\u022c\u022e\u0230"+
		"\u0230\u0232\u0236\u0238\u023b\u023e\u0243\u0245\u0249\u024d\u0250\u0252"+
		"\u0255\u0258\u0258\u025a\u0260\u0262\u0265\u0267\u026d\u0271\u0276\u0279"+
		"\u027a\u027d\u0286\u0288\u028a\u028d\u029a\u029d\u02ab\u02ad\u02ae\u02b1"+
		"\u02b7\u02b9\u02b9\u02bb\u02bb\u02be\u02c0\u02c2\u02cd\u02d0\u02d3\u02d5"+
		"\u02d6\u02d9\u02db\u02de\u02e4\u02f7\u02fd\u02ff\u02ff\u0302\u0305\u0307"+
		"\u030b\u030e\u0316\u0318\u0319\u031b\u0320\u0322\u0322\u0324\u0331\u0333"+
		"\u0333\u0336\u033c\u033e\u0340\u0344\u0347\u0349\u034e\u0350\u0350\u0352"+
		"\u0354\u0359\u0362\u0364\u036a\u0370\u0375\u0377\u037d\u037f\u0380\u0382"+
		"\u0385\u0388\u038d\u038f\u0391\u0395\u0397\u0399\u039c\u039e\u039f\u03a1"+
		"\u03a2\u03a4\u03ae\u03b0\u03b5\u03b7\u03df\u03e2\u03e4\u03e6\u03e6\u03e8"+
		"\u03ed\u03ef\u03ef\u03f2\u03f6\u03f8\u03fb\u03fe\u0400\u0402\u040d\u040f"+
		"\u0413\u0417\u0425\u0427\u042b\u042d\u0436\u043a\u043b\u043d\u043d\u0441"+
		"\u0444\u0446\u0449\u044b\u044c\u044e\u0453\u0455\u045b\u045d\u0469\u046b"+
		"\u046c\u046e\u0473\u0475\u0475\u047a\u047e\u0480\u0481\u0483\u0483\u0485"+
		"\u048c\u048e\u0492\u0495\u0499\u049b\u049b\u049e\u049e\u04a0\u04a0\u04a2"+
		"\u04ad\u04af\u04b0\u04b5\u04bb\u04c2\u04c5\u04c7\u04c8\u04ca\u04cc\u04ce"+
		"\u04ce\u04d0\u04d6\u04d8\u04db\u04dd\u04df\u04e1\u04e2\u04e4\u04e5\u04e7"+
		"\u04e9\u04ec\u04ec\u04ee\u04ee\u04f1\u04fd\u04ff\u04ff\u0502\u0502\u0504"+
		"\u0504\u0506\u0507\u0509\u050d\u0511\u0512\u0516\u0516\u0518\u0519\u051c"+
		"\u051e\u0521\u0527\u0529\u052d\u0530\u0531\u0539\u053c\u053e\u053e\u0541"+
		"\u0542\u0546\u054b\u054d\u0552\u0554\u0554\u0556\u0556\u055a\u055b\u055d"+
		"\u0565\u0567\u0568\u056d\u0570\u0572\u0575\u0577\u057e\u0581\u0585\u0587"+
		"\u058d\u058f\u0591\u0593\u0599\u059b\u05b8\u05bb\u05bc\u05be\u05bf\u05c1"+
		"\u05ca\u05cc\u05cc\u05ce\u05d1\u05d3\u05d4\u05d6\u05dd\u05df\u05e2\u05e4"+
		"\u05e8\u05ea\u05f4\u05f6\u05f9\u05fb\u0605\u0607\u0608\u060b\u060d\u0610"+
		"\u0617\u061a\u061f\u0621\u0621\u0624\u0624\u0626\u0626\u0628\u062c\u062e"+
		"\u0631\u0633\u0634\u0638\u063c\u063e\u0640\u0643\u0647\u0649\u064d\u064f"+
		"\u0652\u0655\u065a\u065d\u0660\u0662\u0664\u0667\u0667\u0669\u066b\u066d"+
		"\u0670\u0673\u0686\u0688\u0693\u0696\u069a\u069c\u069c\u069e\u06a5\u06a7"+
		"\u06aa\u06ac\u06ac\u06ae\u06b2\u06b4\u06c4\u06c6\u06c9\u06cc\u06ce\u06d1"+
		"\u06e5\u06e7\u06f1\u06f3\u06f4\u06fa\u0711\u0713\u072d\u072f\u0738\u073a"+
		"\u07bb\u07c0\u07c6\u07c8\u07cf\u07d1\u07d5\u07d8\u07d8\u07da\u07da\u07dd"+
		"\u07de\u07e0\u07e8\u07ea\u07f9\u07fb\u0800\u0802\u0805\u0807\u0808\u080a"+
		"\u080d\u080f\u0815\u0817\u081a\u081c\u081f\u0822\u0825\u0827\u082c\u082e"+
		"\u0831\u0833\u0837\u0839\u083f\u0841\u0843\u0845\u0847\u0849\u084e\u0850"+
		"\u0854\u0856\u085a\u085c\u085c\u085e\u085e\u0865\u0865\u0867\u0867\u086a"+
		"\u086a\u086e\u0874\u0879\u0882\u0885\u0885\u0887\u088b\u088f\u0891\u0894"+
		"\u0897\u089a\u089b\u089d\u089e\u08a0\u08a2\u08a4\u08af\u08b1\u08c5\u08c9"+
		"\u08cb\u08ce\u08d4\u08e6\u08e6\u08e9\u08f1\u08f3\u08f4\u08f7\u08fe\u0900"+
		"\u0906\u0908\u090b\u074f\u0000\u0104\u0001\u0000\u0000\u0000\u0002\u0118"+
		"\u0001\u0000\u0000\u0000\u0004\u011a\u0001\u0000\u0000\u0000\u0006\u0136"+
		"\u0001\u0000\u0000\u0000\b\u0151\u0001\u0000\u0000\u0000\n\u0155\u0001"+
		"\u0000\u0000\u0000\f\u015d\u0001\u0000\u0000\u0000\u000e\u016a\u0001\u0000"+
		"\u0000\u0000\u0010\u0175\u0001\u0000\u0000\u0000\u0012\u017c\u0001\u0000"+
		"\u0000\u0000\u0014\u0181\u0001\u0000\u0000\u0000\u0016\u0189\u0001\u0000"+
		"\u0000\u0000\u0018\u018d\u0001\u0000\u0000\u0000\u001a\u019a\u0001\u0000"+
		"\u0000\u0000\u001c\u019c\u0001\u0000\u0000\u0000\u001e\u019e\u0001\u0000"+
		"\u0000\u0000 \u01bc\u0001\u0000\u0000\u0000\"\u01be\u0001\u0000\u0000"+
		"\u0000$\u01da\u0001\u0000\u0000\u0000&\u01f3\u0001\u0000\u0000\u0000("+
		"\u01f7\u0001\u0000\u0000\u0000*\u0207\u0001\u0000\u0000\u0000,\u020c\u0001"+
		"\u0000\u0000\u0000.\u0213\u0001\u0000\u0000\u00000\u0220\u0001\u0000\u0000"+
		"\u00002\u0224\u0001\u0000\u0000\u00004\u0228\u0001\u0000\u0000\u00006"+
		"\u022a\u0001\u0000\u0000\u00008\u023b\u0001\u0000\u0000\u0000:\u024a\u0001"+
		"\u0000\u0000\u0000<\u024c\u0001\u0000\u0000\u0000>\u0250\u0001\u0000\u0000"+
		"\u0000@\u0252\u0001\u0000\u0000\u0000B\u0254\u0001\u0000\u0000\u0000D"+
		"\u0264\u0001\u0000\u0000\u0000F\u0269\u0001\u0000\u0000\u0000H\u0270\u0001"+
		"\u0000\u0000\u0000J\u0292\u0001\u0000\u0000\u0000L\u0294\u0001\u0000\u0000"+
		"\u0000N\u0296\u0001\u0000\u0000\u0000P\u0298\u0001\u0000\u0000\u0000R"+
		"\u029a\u0001\u0000\u0000\u0000T\u029e\u0001\u0000\u0000\u0000V\u02a3\u0001"+
		"\u0000\u0000\u0000X\u02a9\u0001\u0000\u0000\u0000Z\u02b7\u0001\u0000\u0000"+
		"\u0000\\\u02c4\u0001\u0000\u0000\u0000^\u02cd\u0001\u0000\u0000\u0000"+
		"`\u02d6\u0001\u0000\u0000\u0000b\u02d8\u0001\u0000\u0000\u0000d\u02da"+
		"\u0001\u0000\u0000\u0000f\u02e6\u0001\u0000\u0000\u0000h\u02ee\u0001\u0000"+
		"\u0000\u0000j\u02f2\u0001\u0000\u0000\u0000l\u02fb\u0001\u0000\u0000\u0000"+
		"n\u0302\u0001\u0000\u0000\u0000p\u0315\u0001\u0000\u0000\u0000r\u0317"+
		"\u0001\u0000\u0000\u0000t\u0320\u0001\u0000\u0000\u0000v\u0327\u0001\u0000"+
		"\u0000\u0000x\u0331\u0001\u0000\u0000\u0000z\u0339\u0001\u0000\u0000\u0000"+
		"|\u0342\u0001\u0000\u0000\u0000~\u0349\u0001\u0000\u0000\u0000\u0080\u0352"+
		"\u0001\u0000\u0000\u0000\u0082\u035c\u0001\u0000\u0000\u0000\u0084\u0364"+
		"\u0001\u0000\u0000\u0000\u0086\u036e\u0001\u0000\u0000\u0000\u0088\u0376"+
		"\u0001\u0000\u0000\u0000\u008a\u0378\u0001\u0000\u0000\u0000\u008c\u0380"+
		"\u0001\u0000\u0000\u0000\u008e\u0382\u0001\u0000\u0000\u0000\u0090\u0391"+
		"\u0001\u0000\u0000\u0000\u0092\u03b7\u0001\u0000\u0000\u0000\u0094\u03b9"+
		"\u0001\u0000\u0000\u0000\u0096\u03c1\u0001\u0000\u0000\u0000\u0098\u03cd"+
		"\u0001\u0000\u0000\u0000\u009a\u03ed\u0001\u0000\u0000\u0000\u009c\u0401"+
		"\u0001\u0000\u0000\u0000\u009e\u0403\u0001\u0000\u0000\u0000\u00a0\u0407"+
		"\u0001\u0000\u0000\u0000\u00a2\u0442\u0001\u0000\u0000\u0000\u00a4\u0444"+
		"\u0001\u0000\u0000\u0000\u00a6\u0456\u0001\u0000\u0000\u0000\u00a8\u047d"+
		"\u0001\u0000\u0000\u0000\u00aa\u0481\u0001\u0000\u0000\u0000\u00ac\u0484"+
		"\u0001\u0000\u0000\u0000\u00ae\u0497\u0001\u0000\u0000\u0000\u00b0\u049f"+
		"\u0001\u0000\u0000\u0000\u00b2\u04b1\u0001\u0000\u0000\u0000\u00b4\u04b8"+
		"\u0001\u0000\u0000\u0000\u00b6\u04d1\u0001\u0000\u0000\u0000\u00b8\u04d3"+
		"\u0001\u0000\u0000\u0000\u00ba\u04de\u0001\u0000\u0000\u0000\u00bc\u04ea"+
		"\u0001\u0000\u0000\u0000\u00be\u04ec\u0001\u0000\u0000\u0000\u00c0\u04ee"+
		"\u0001\u0000\u0000\u0000\u00c2\u04f6\u0001\u0000\u0000\u0000\u00c4\u04fe"+
		"\u0001\u0000\u0000\u0000\u00c6\u050a\u0001\u0000\u0000\u0000\u00c8\u050c"+
		"\u0001\u0000\u0000\u0000\u00ca\u0513\u0001\u0000\u0000\u0000\u00cc\u0517"+
		"\u0001\u0000\u0000\u0000\u00ce\u0519\u0001\u0000\u0000\u0000\u00d0\u051b"+
		"\u0001\u0000\u0000\u0000\u00d2\u0523\u0001\u0000\u0000\u0000\u00d4\u0525"+
		"\u0001\u0000\u0000\u0000\u00d6\u052d\u0001\u0000\u0000\u0000\u00d8\u053e"+
		"\u0001\u0000\u0000\u0000\u00da\u054a\u0001\u0000\u0000\u0000\u00dc\u054c"+
		"\u0001\u0000\u0000\u0000\u00de\u0550\u0001\u0000\u0000\u0000\u00e0\u0561"+
		"\u0001\u0000\u0000\u0000\u00e2\u0566\u0001\u0000\u0000\u0000\u00e4\u0579"+
		"\u0001\u0000\u0000\u0000\u00e6\u0583\u0001\u0000\u0000\u0000\u00e8\u0596"+
		"\u0001\u0000\u0000\u0000\u00ea\u05de\u0001\u0000\u0000\u0000\u00ec\u05e0"+
		"\u0001\u0000\u0000\u0000\u00ee\u05e2\u0001\u0000\u0000\u0000\u00f0\u05e8"+
		"\u0001\u0000\u0000\u0000\u00f2\u05ec\u0001\u0000\u0000\u0000\u00f4\u05f2"+
		"\u0001\u0000\u0000\u0000\u00f6\u05f4\u0001\u0000\u0000\u0000\u00f8\u0656"+
		"\u0001\u0000\u0000\u0000\u00fa\u0658\u0001\u0000\u0000\u0000\u00fc\u065a"+
		"\u0001\u0000\u0000\u0000\u00fe\u0100\u0003\u0002\u0001\u0000\u00ff\u0101"+
		"\u0005\u092c\u0000\u0000\u0100\u00ff\u0001\u0000\u0000\u0000\u0100\u0101"+
		"\u0001\u0000\u0000\u0000\u0101\u0103\u0001\u0000\u0000\u0000\u0102\u00fe"+
		"\u0001\u0000\u0000\u0000\u0103\u0106\u0001\u0000\u0000\u0000\u0104\u0102"+
		"\u0001\u0000\u0000\u0000\u0104\u0105\u0001\u0000\u0000\u0000\u0105\u0107"+
		"\u0001\u0000\u0000\u0000\u0106\u0104\u0001\u0000\u0000\u0000\u0107\u0108"+
		"\u0005\u0000\u0000\u0001\u0108\u0001\u0001\u0000\u0000\u0000\u0109\u0119"+
		"\u0003\n\u0005\u0000\u010a\u0119\u0003\u0080@\u0000\u010b\u0119\u0003"+
		"V+\u0000\u010c\u0119\u0003\u0006\u0003\u0000\u010d\u0119\u0003\b\u0004"+
		"\u0000\u010e\u0119\u0003\f\u0006\u0000\u010f\u0119\u0003\u0010\b\u0000"+
		"\u0110\u0119\u0003~?\u0000\u0111\u0119\u0003j5\u0000\u0112\u0119\u0003"+
		"z=\u0000\u0113\u0119\u0003r9\u0000\u0114\u0119\u0003v;\u0000\u0115\u0119"+
		"\u0003\u0084B\u0000\u0116\u0119\u0003*\u0015\u0000\u0117\u0119\u0003,"+
		"\u0016\u0000\u0118\u0109\u0001\u0000\u0000\u0000\u0118\u010a\u0001\u0000"+
		"\u0000\u0000\u0118\u010b\u0001\u0000\u0000\u0000\u0118\u010c\u0001\u0000"+
		"\u0000\u0000\u0118\u010d\u0001\u0000\u0000\u0000\u0118\u010e\u0001\u0000"+
		"\u0000\u0000\u0118\u010f\u0001\u0000\u0000\u0000\u0118\u0110\u0001\u0000"+
		"\u0000\u0000\u0118\u0111\u0001\u0000\u0000\u0000\u0118\u0112\u0001\u0000"+
		"\u0000\u0000\u0118\u0113\u0001\u0000\u0000\u0000\u0118\u0114\u0001\u0000"+
		"\u0000\u0000\u0118\u0115\u0001\u0000\u0000\u0000\u0118\u0116\u0001\u0000"+
		"\u0000\u0000\u0118\u0117\u0001\u0000\u0000\u0000\u0119\u0003\u0001\u0000"+
		"\u0000\u0000\u011a\u011b\u0005\u0248\u0000\u0000\u011b\u0127\u0003\u00f2"+
		"y\u0000\u011c\u011d\u0005\u0918\u0000\u0000\u011d\u0122\u0003.\u0017\u0000"+
		"\u011e\u011f\u0005\u091e\u0000\u0000\u011f\u0121\u0003.\u0017\u0000\u0120"+
		"\u011e\u0001\u0000\u0000\u0000\u0121\u0124\u0001\u0000\u0000\u0000\u0122"+
		"\u0120\u0001\u0000\u0000\u0000\u0122\u0123\u0001\u0000\u0000\u0000\u0123"+
		"\u0125\u0001\u0000\u0000\u0000\u0124\u0122\u0001\u0000\u0000\u0000\u0125"+
		"\u0126\u0005\u0919\u0000\u0000\u0126\u0128\u0001\u0000\u0000\u0000\u0127"+
		"\u011c\u0001\u0000\u0000\u0000\u0127\u0128\u0001\u0000\u0000\u0000\u0128"+
		"\u0129\u0001\u0000\u0000\u0000\u0129\u012a\u0005\u05db\u0000\u0000\u012a"+
		"\u012b\u0003\u00dam\u0000\u012b\u012d\u0007\u0000\u0000\u0000\u012c\u012e"+
		"\u0005\u0169\u0000\u0000\u012d\u012c\u0001\u0000\u0000\u0000\u012d\u012e"+
		"\u0001\u0000\u0000\u0000\u012e\u0130\u0001\u0000\u0000\u0000\u012f\u0131"+
		"\u00032\u0019\u0000\u0130\u012f\u0001\u0000\u0000\u0000\u0130\u0131\u0001"+
		"\u0000\u0000\u0000\u0131\u0132\u0001\u0000\u0000\u0000\u0132\u0133\u0003"+
		"X,\u0000\u0133\u0134\u0001\u0000\u0000\u0000\u0134\u0135\u0005\u092c\u0000"+
		"\u0000\u0135\u0005\u0001\u0000\u0000\u0000\u0136\u0137\u0005\u0130\u0000"+
		"\u0000\u0137\u0138\u0005\u0560\u0000\u0000\u0138\u0144\u0003\u00c4b\u0000"+
		"\u0139\u013a\u0005\u0918\u0000\u0000\u013a\u013f\u0003.\u0017\u0000\u013b"+
		"\u013c\u0005\u091e\u0000\u0000\u013c\u013e\u0003.\u0017\u0000\u013d\u013b"+
		"\u0001\u0000\u0000\u0000\u013e\u0141\u0001\u0000\u0000\u0000\u013f\u013d"+
		"\u0001\u0000\u0000\u0000\u013f\u0140\u0001\u0000\u0000\u0000\u0140\u0142"+
		"\u0001\u0000\u0000\u0000\u0141\u013f\u0001\u0000\u0000\u0000\u0142\u0143"+
		"\u0005\u0919\u0000\u0000\u0143\u0145\u0001\u0000\u0000\u0000\u0144\u0139"+
		"\u0001\u0000\u0000\u0000\u0144\u0145\u0001\u0000\u0000\u0000\u0145\u0146"+
		"\u0001\u0000\u0000\u0000\u0146\u0148\u0007\u0000\u0000\u0000\u0147\u0149"+
		"\u0005\u0169\u0000\u0000\u0148\u0147\u0001\u0000\u0000\u0000\u0148\u0149"+
		"\u0001\u0000\u0000\u0000\u0149\u014b\u0001\u0000\u0000\u0000\u014a\u014c"+
		"\u00032\u0019\u0000\u014b\u014a\u0001\u0000\u0000\u0000\u014b\u014c\u0001"+
		"\u0000\u0000\u0000\u014c\u014d\u0001\u0000\u0000\u0000\u014d\u014e\u0003"+
		"X,\u0000\u014e\u014f\u0001\u0000\u0000\u0000\u014f\u0150\u0005\u092c\u0000"+
		"\u0000\u0150\u0007\u0001\u0000\u0000\u0000\u0151\u0152\u0005\u0130\u0000"+
		"\u0000\u0152\u0153\u0003\u0004\u0002\u0000\u0153\t\u0001\u0000\u0000\u0000"+
		"\u0154\u0156\u0005\u0169\u0000\u0000\u0155\u0154\u0001\u0000\u0000\u0000"+
		"\u0155\u0156\u0001\u0000\u0000\u0000\u0156\u0158\u0001\u0000\u0000\u0000"+
		"\u0157\u0159\u00032\u0019\u0000\u0158\u0157\u0001\u0000\u0000\u0000\u0158"+
		"\u0159\u0001\u0000\u0000\u0000\u0159\u015a\u0001\u0000\u0000\u0000\u015a"+
		"\u015b\u0003X,\u0000\u015b\u015c\u0005\u092c\u0000\u0000\u015c\u000b\u0001"+
		"\u0000\u0000\u0000\u015d\u015e\u0005\u0130\u0000\u0000\u015e\u015f\u0005"+
		"\u07c5\u0000\u0000\u015f\u0160\u0003\u0018\f\u0000\u0160\u0161\u0005B"+
		"\u0000\u0000\u0161\u0165\u0005\u0618\u0000\u0000\u0162\u0164\t\u0000\u0000"+
		"\u0000\u0163\u0162\u0001\u0000\u0000\u0000\u0164\u0167\u0001\u0000\u0000"+
		"\u0000\u0165\u0166\u0001\u0000\u0000\u0000\u0165\u0163\u0001\u0000\u0000"+
		"\u0000\u0166\u0168\u0001\u0000\u0000\u0000\u0167\u0165\u0001\u0000\u0000"+
		"\u0000\u0168\u0169\u0005\u092c\u0000\u0000\u0169\r\u0001\u0000\u0000\u0000"+
		"\u016a\u016b\u0005\u0130\u0000\u0000\u016b\u016c\u0005\u07c5\u0000\u0000"+
		"\u016c\u016d\u0003\u0018\f\u0000\u016d\u016e\u0005B\u0000\u0000\u016e"+
		"\u0172\u0005\u0618\u0000\u0000\u016f\u0171\t\u0000\u0000\u0000\u0170\u016f"+
		"\u0001\u0000\u0000\u0000\u0171\u0174\u0001\u0000\u0000\u0000\u0172\u0173"+
		"\u0001\u0000\u0000\u0000\u0172\u0170\u0001\u0000\u0000\u0000\u0173\u000f"+
		"\u0001\u0000\u0000\u0000\u0174\u0172\u0001\u0000\u0000\u0000\u0175\u0176"+
		"\u0005\u0130\u0000\u0000\u0176\u0177\u0005\u07c5\u0000\u0000\u0177\u0178"+
		"\u0003\u0018\f\u0000\u0178\u0179\u0003\u001a\r\u0000\u0179\u017a\u0003"+
		"\u0012\t\u0000\u017a\u017b\u0005\u092c\u0000\u0000\u017b\u0011\u0001\u0000"+
		"\u0000\u0000\u017c\u017d\u0005\u0899\u0000\u0000\u017d\u017e\u0005\u0918"+
		"\u0000\u0000\u017e\u017f\u0003\u0014\n\u0000\u017f\u0180\u0005\u0919\u0000"+
		"\u0000\u0180\u0013\u0001\u0000\u0000\u0000\u0181\u0186\u0003\u0016\u000b"+
		"\u0000\u0182\u0183\u0005\u091e\u0000\u0000\u0183\u0185\u0003\u0016\u000b"+
		"\u0000\u0184\u0182\u0001\u0000\u0000\u0000\u0185\u0188\u0001\u0000\u0000"+
		"\u0000\u0186\u0184\u0001\u0000\u0000\u0000\u0186\u0187\u0001\u0000\u0000"+
		"\u0000\u0187\u0015\u0001\u0000\u0000\u0000\u0188\u0186\u0001\u0000\u0000"+
		"\u0000\u0189\u018a\u0005\u0914\u0000\u0000\u018a\u018b\u0005\u092e\u0000"+
		"\u0000\u018b\u018c\u0005\u0914\u0000\u0000\u018c\u0017\u0001\u0000\u0000"+
		"\u0000\u018d\u018e\u0003\u00f2y\u0000\u018e\u0019\u0001\u0000\u0000\u0000"+
		"\u018f\u0190\u0005\u0918\u0000\u0000\u0190\u0195\u0003\u001c\u000e\u0000"+
		"\u0191\u0192\u0005\u091e\u0000\u0000\u0192\u0194\u0003\u001c\u000e\u0000"+
		"\u0193\u0191\u0001\u0000\u0000\u0000\u0194\u0197\u0001\u0000\u0000\u0000"+
		"\u0195\u0193\u0001\u0000\u0000\u0000\u0195\u0196\u0001\u0000\u0000\u0000"+
		"\u0196\u0198\u0001\u0000\u0000\u0000\u0197\u0195\u0001\u0000\u0000\u0000"+
		"\u0198\u0199\u0005\u0919\u0000\u0000\u0199\u019b\u0001\u0000\u0000\u0000"+
		"\u019a\u018f\u0001\u0000\u0000\u0000\u019a\u019b\u0001\u0000\u0000\u0000"+
		"\u019b\u001b\u0001\u0000\u0000\u0000\u019c\u019d\u0003\u001e\u000f\u0000"+
		"\u019d\u001d\u0001\u0000\u0000\u0000\u019e\u01a7\u0003\u00d0h\u0000\u019f"+
		"\u01a2\u0003\u00dcn\u0000\u01a0\u01a2\u0003\u00f8|\u0000\u01a1\u019f\u0001"+
		"\u0000\u0000\u0000\u01a1\u01a0\u0001\u0000\u0000\u0000\u01a2\u01a5\u0001"+
		"\u0000\u0000\u0000\u01a3\u01a4\u0005\u08d6\u0000\u0000\u01a4\u01a6\u0003"+
		" \u0010\u0000\u01a5\u01a3\u0001\u0000\u0000\u0000\u01a5\u01a6\u0001\u0000"+
		"\u0000\u0000\u01a6\u01a8\u0001\u0000\u0000\u0000\u01a7\u01a1\u0001\u0000"+
		"\u0000\u0000\u01a7\u01a8\u0001\u0000\u0000\u0000\u01a8\u01aa\u0001\u0000"+
		"\u0000\u0000\u01a9\u01ab\u0005\u0651\u0000\u0000\u01aa\u01a9\u0001\u0000"+
		"\u0000\u0000\u01aa\u01ab\u0001\u0000\u0000\u0000\u01ab\u01ad\u0001\u0000"+
		"\u0000\u0000\u01ac\u01ae\u0007\u0001\u0000\u0000\u01ad\u01ac\u0001\u0000"+
		"\u0000\u0000\u01ad\u01ae\u0001\u0000\u0000\u0000\u01ae\u01b6\u0001\u0000"+
		"\u0000\u0000\u01af\u01b2\u0005\u0170\u0000\u0000\u01b0\u01b1\u0005\u04a1"+
		"\u0000\u0000\u01b1\u01b3\u0005\u0482\u0000\u0000\u01b2\u01b0\u0001\u0000"+
		"\u0000\u0000\u01b2\u01b3\u0001\u0000\u0000\u0000\u01b3\u01b4\u0001\u0000"+
		"\u0000\u0000\u01b4\u01b7\u0003\u008cF\u0000\u01b5\u01b7\u0003\"\u0011"+
		"\u0000\u01b6\u01af\u0001\u0000\u0000\u0000\u01b6\u01b5\u0001\u0000\u0000"+
		"\u0000\u01b6\u01b7\u0001\u0000\u0000\u0000\u01b7\u01ba\u0001\u0000\u0000"+
		"\u0000\u01b8\u01b9\u0005\u01d1\u0000\u0000\u01b9\u01bb\u0003(\u0014\u0000"+
		"\u01ba\u01b8\u0001\u0000\u0000\u0000\u01ba\u01bb\u0001\u0000\u0000\u0000"+
		"\u01bb\u001f\u0001\u0000\u0000\u0000\u01bc\u01bd\u0003\u00f4z\u0000\u01bd"+
		"!\u0001\u0000\u0000\u0000\u01be\u01c6\u0005\u0250\u0000\u0000\u01bf\u01c7"+
		"\u0005+\u0000\u0000\u01c0\u01c1\u0005\u0099\u0000\u0000\u01c1\u01c4\u0005"+
		"\u0170\u0000\u0000\u01c2\u01c3\u0005\u04a1\u0000\u0000\u01c3\u01c5\u0005"+
		"\u0482\u0000\u0000\u01c4\u01c2\u0001\u0000\u0000\u0000\u01c4\u01c5\u0001"+
		"\u0000\u0000\u0000\u01c5\u01c7\u0001\u0000\u0000\u0000\u01c6\u01bf\u0001"+
		"\u0000\u0000\u0000\u01c6\u01c0\u0001\u0000\u0000\u0000\u01c6\u01c7\u0001"+
		"\u0000\u0000\u0000\u01c7\u01c8\u0001\u0000\u0000\u0000\u01c8\u01c9\u0005"+
		"B\u0000\u0000\u01c9\u01cb\u0005\u027e\u0000\u0000\u01ca\u01cc\u0003$\u0012"+
		"\u0000\u01cb\u01ca\u0001\u0000\u0000\u0000\u01cb\u01cc\u0001\u0000\u0000"+
		"\u0000\u01cc#\u0001\u0000\u0000\u0000\u01cd\u01cf\u0003&\u0013\u0000\u01ce"+
		"\u01cd\u0001\u0000\u0000\u0000\u01cf\u01d0\u0001\u0000\u0000\u0000\u01d0"+
		"\u01ce\u0001\u0000\u0000\u0000\u01d0\u01d1\u0001\u0000\u0000\u0000\u01d1"+
		"\u01db\u0001\u0000\u0000\u0000\u01d2\u01d4\u0005\u0918\u0000\u0000\u01d3"+
		"\u01d5\u0003&\u0013\u0000\u01d4\u01d3\u0001\u0000\u0000\u0000\u01d5\u01d6"+
		"\u0001\u0000\u0000\u0000\u01d6\u01d4\u0001\u0000\u0000\u0000\u01d6\u01d7"+
		"\u0001\u0000\u0000\u0000\u01d7\u01d8\u0001\u0000\u0000\u0000\u01d8\u01d9"+
		"\u0005\u0919\u0000\u0000\u01d9\u01db\u0001\u0000\u0000\u0000\u01da\u01ce"+
		"\u0001\u0000\u0000\u0000\u01da\u01d2\u0001\u0000\u0000\u0000\u01db%\u0001"+
		"\u0000\u0000\u0000\u01dc\u01dd\u0005\u066c\u0000\u0000\u01dd\u01e1\u0005"+
		"\u0899\u0000\u0000\u01de\u01e2\u0003\u00ecv\u0000\u01df\u01e0\u0005\u0322"+
		"\u0000\u0000\u01e0\u01e2\u0005\u086a\u0000\u0000\u01e1\u01de\u0001\u0000"+
		"\u0000\u0000\u01e1\u01df\u0001\u0000\u0000\u0000\u01e2\u01f4\u0001\u0000"+
		"\u0000\u0000\u01e3\u01e4\u0005\u0291\u0000\u0000\u01e4\u01e5\u0005\u0099"+
		"\u0000\u0000\u01e5\u01f4\u0003\u00ecv\u0000\u01e6\u01e7\u0005\u0366\u0000"+
		"\u0000\u01e7\u01f4\u0003\u00ecv\u0000\u01e8\u01f4\u0005\u041b\u0000\u0000"+
		"\u01e9\u01ea\u0005\u0382\u0000\u0000\u01ea\u01f4\u0003\u00ecv\u0000\u01eb"+
		"\u01f4\u0005\u041e\u0000\u0000\u01ec\u01f4\u0005\u014a\u0000\u0000\u01ed"+
		"\u01f4\u0005\u03fb\u0000\u0000\u01ee\u01ef\u0005\u009d\u0000\u0000\u01ef"+
		"\u01f4\u0003\u00ecv\u0000\u01f0\u01f4\u0005\u03ea\u0000\u0000\u01f1\u01f4"+
		"\u0005\u04c9\u0000\u0000\u01f2\u01f4\u0005\u042d\u0000\u0000\u01f3\u01dc"+
		"\u0001\u0000\u0000\u0000\u01f3\u01e3\u0001\u0000\u0000\u0000\u01f3\u01e6"+
		"\u0001\u0000\u0000\u0000\u01f3\u01e8\u0001\u0000\u0000\u0000\u01f3\u01e9"+
		"\u0001\u0000\u0000\u0000\u01f3\u01eb\u0001\u0000\u0000\u0000\u01f3\u01ec"+
		"\u0001\u0000\u0000\u0000\u01f3\u01ed\u0001\u0000\u0000\u0000\u01f3\u01ee"+
		"\u0001\u0000\u0000\u0000\u01f3\u01f0\u0001\u0000\u0000\u0000\u01f3\u01f1"+
		"\u0001\u0000\u0000\u0000\u01f3\u01f2\u0001\u0000\u0000\u0000\u01f4\'\u0001"+
		"\u0000\u0000\u0000\u01f5\u01f6\u0005\u085e\u0000\u0000\u01f6\u01f8\u0005"+
		"\u0914\u0000\u0000\u01f7\u01f5\u0001\u0000\u0000\u0000\u01f7\u01f8\u0001"+
		"\u0000\u0000\u0000\u01f8\u01fc\u0001\u0000\u0000\u0000\u01f9\u01fa\u0005"+
		"\u027c\u0000\u0000\u01fa\u01fb\u0005\u0099\u0000\u0000\u01fb\u01fd\u0005"+
		"\u0937\u0000\u0000\u01fc\u01f9\u0001\u0000\u0000\u0000\u01fc\u01fd\u0001"+
		"\u0000\u0000\u0000\u01fd\u01ff\u0001\u0000\u0000\u0000\u01fe\u0200\u0005"+
		"\u0914\u0000\u0000\u01ff\u01fe\u0001\u0000\u0000\u0000\u01ff\u0200\u0001"+
		"\u0000\u0000\u0000\u0200\u0205\u0001\u0000\u0000\u0000\u0201\u0203\u0005"+
		"\u042a\u0000\u0000\u0202\u0201\u0001\u0000\u0000\u0000\u0202\u0203\u0001"+
		"\u0000\u0000\u0000\u0203\u0204\u0001\u0000\u0000\u0000\u0204\u0206\u0005"+
		"\u05f6\u0000\u0000\u0205\u0202\u0001\u0000\u0000\u0000\u0205\u0206\u0001"+
		"\u0000\u0000\u0000\u0206)\u0001\u0000\u0000\u0000\u0207\u0208\u0005\u080b"+
		"\u0000\u0000\u0208\u0209\u0005\u07c5\u0000\u0000\u0209\u020a\u0003\u00d2"+
		"i\u0000\u020a\u020b\u0005\u092c\u0000\u0000\u020b+\u0001\u0000\u0000\u0000"+
		"\u020c\u020d\u0005\u05f3\u0000\u0000\u020d\u020e\u0005\u04a1\u0000\u0000"+
		"\u020e\u020f\u0005\u00e1\u0000\u0000\u020f\u0210\u0003\u00d0h\u0000\u0210"+
		"\u0211\u0005\u02dc\u0000\u0000\u0211\u0212\u0003\u00f0x\u0000\u0212-\u0001"+
		"\u0000\u0000\u0000\u0213\u0217\u0003\u00bc^\u0000\u0214\u0216\u0007\u0002"+
		"\u0000\u0000\u0215\u0214\u0001\u0000\u0000\u0000\u0216\u0219\u0001\u0000"+
		"\u0000\u0000\u0217\u0215\u0001\u0000\u0000\u0000\u0217\u0218\u0001\u0000"+
		"\u0000\u0000\u0218\u021b\u0001\u0000\u0000\u0000\u0219\u0217\u0001\u0000"+
		"\u0000\u0000\u021a\u021c\u0003\u00dam\u0000\u021b\u021a\u0001\u0000\u0000"+
		"\u0000\u021b\u021c\u0001\u0000\u0000\u0000\u021c\u021e\u0001\u0000\u0000"+
		"\u0000\u021d\u021f\u00030\u0018\u0000\u021e\u021d\u0001\u0000\u0000\u0000"+
		"\u021e\u021f\u0001\u0000\u0000\u0000\u021f/\u0001\u0000\u0000\u0000\u0220"+
		"\u0221\u0007\u0003\u0000\u0000\u0221\u0222\u0003\u008cF\u0000\u02221\u0001"+
		"\u0000\u0000\u0000\u0223\u0225\u00034\u001a\u0000\u0224\u0223\u0001\u0000"+
		"\u0000\u0000\u0225\u0226\u0001\u0000\u0000\u0000\u0226\u0224\u0001\u0000"+
		"\u0000\u0000\u0226\u0227\u0001\u0000\u0000\u0000\u02273\u0001\u0000\u0000"+
		"\u0000\u0228\u0229\u00036\u001b\u0000\u02295\u0001\u0000\u0000\u0000\u022a"+
		"\u022c\u0003\u00f2y\u0000\u022b\u022d\u0005\u010c\u0000\u0000\u022c\u022b"+
		"\u0001\u0000\u0000\u0000\u022c\u022d\u0001\u0000\u0000\u0000\u022d\u022e"+
		"\u0001\u0000\u0000\u0000\u022e\u0231\u0003\u00dam\u0000\u022f\u0230\u0005"+
		"\u046a\u0000\u0000\u0230\u0232\u0005\u0482\u0000\u0000\u0231\u022f\u0001"+
		"\u0000\u0000\u0000\u0231\u0232\u0001\u0000\u0000\u0000\u0232\u0234\u0001"+
		"\u0000\u0000\u0000\u0233\u0235\u00030\u0018\u0000\u0234\u0233\u0001\u0000"+
		"\u0000\u0000\u0234\u0235\u0001\u0000\u0000\u0000\u0235\u0236\u0001\u0000"+
		"\u0000\u0000\u0236\u0237\u0005\u092c\u0000\u0000\u02377\u0001\u0000\u0000"+
		"\u0000\u0238\u0239\u0003:\u001d\u0000\u0239\u023a\u0007\u0004\u0000\u0000"+
		"\u023a\u023c\u0001\u0000\u0000\u0000\u023b\u0238\u0001\u0000\u0000\u0000"+
		"\u023c\u023d\u0001\u0000\u0000\u0000\u023d\u023b\u0001\u0000\u0000\u0000"+
		"\u023d\u023e\u0001\u0000\u0000\u0000\u023e9\u0001\u0000\u0000\u0000\u023f"+
		"\u024b\u0003X,\u0000\u0240\u024b\u0003\\.\u0000\u0241\u024b\u0003<\u001e"+
		"\u0000\u0242\u024b\u0003>\u001f\u0000\u0243\u024b\u0003@ \u0000\u0244"+
		"\u024b\u0003B!\u0000\u0245\u024b\u0003H$\u0000\u0246\u024b\u0003R)\u0000"+
		"\u0247\u024b\u0003T*\u0000\u0248\u024b\u0003^/\u0000\u0249\u024b\u0003"+
		"V+\u0000\u024a\u023f\u0001\u0000\u0000\u0000\u024a\u0240\u0001\u0000\u0000"+
		"\u0000\u024a\u0241\u0001\u0000\u0000\u0000\u024a\u0242\u0001\u0000\u0000"+
		"\u0000\u024a\u0243\u0001\u0000\u0000\u0000\u024a\u0244\u0001\u0000\u0000"+
		"\u0000\u024a\u0245\u0001\u0000\u0000\u0000\u024a\u0246\u0001\u0000\u0000"+
		"\u0000\u024a\u0247\u0001\u0000\u0000\u0000\u024a\u0248\u0001\u0000\u0000"+
		"\u0000\u024a\u0249\u0001\u0000\u0000\u0000\u024b;\u0001\u0000\u0000\u0000"+
		"\u024c\u024d\u0003\u00e4r\u0000\u024d\u024e\u0005\u0921\u0000\u0000\u024e"+
		"\u024f\u0003\u008cF\u0000\u024f=\u0001\u0000\u0000\u0000\u0250\u0251\u0005"+
		"\u0119\u0000\u0000\u0251?\u0001\u0000\u0000\u0000\u0252\u0253\u0005\u01f6"+
		"\u0000\u0000\u0253A\u0001\u0000\u0000\u0000\u0254\u0255\u0005\u0282\u0000"+
		"\u0000\u0255\u0256\u0003\u0088D\u0000\u0256\u0257\u0005\u07d2\u0000\u0000"+
		"\u0257\u025b\u00038\u001c\u0000\u0258\u025a\u0003D\"\u0000\u0259\u0258"+
		"\u0001\u0000\u0000\u0000\u025a\u025d\u0001\u0000\u0000\u0000\u025b\u0259"+
		"\u0001\u0000\u0000\u0000\u025b\u025c\u0001\u0000\u0000\u0000\u025c\u025f"+
		"\u0001\u0000\u0000\u0000\u025d\u025b\u0001\u0000\u0000\u0000\u025e\u0260"+
		"\u0003F#\u0000\u025f\u025e\u0001\u0000\u0000\u0000\u025f\u0260\u0001\u0000"+
		"\u0000\u0000\u0260\u0261\u0001\u0000\u0000\u0000\u0261\u0262\u0005\u01d3"+
		"\u0000\u0000\u0262\u0263\u0005\u0282\u0000\u0000\u0263C\u0001\u0000\u0000"+
		"\u0000\u0264\u0265\u0005\u01c7\u0000\u0000\u0265\u0266\u0003\u0088D\u0000"+
		"\u0266\u0267\u0005\u07d2\u0000\u0000\u0267\u0268\u00038\u001c\u0000\u0268"+
		"E\u0001\u0000\u0000\u0000\u0269\u026a\u0005\u01c6\u0000\u0000\u026a\u026b"+
		"\u00038\u001c\u0000\u026bG\u0001\u0000\u0000\u0000\u026c\u026d\u0005\u0893"+
		"\u0000\u0000\u026d\u0271\u0003\u0088D\u0000\u026e\u026f\u0005\u023c\u0000"+
		"\u0000\u026f\u0271\u0003J%\u0000\u0270\u026c\u0001\u0000\u0000\u0000\u0270"+
		"\u026e\u0001\u0000\u0000\u0000\u0270\u0271\u0001\u0000\u0000\u0000\u0271"+
		"\u0272\u0001\u0000\u0000\u0000\u0272\u0273\u0005\u0342\u0000\u0000\u0273"+
		"\u0274\u00038\u001c\u0000\u0274\u0275\u0005\u01d3\u0000\u0000\u0275\u0277"+
		"\u0005\u0342\u0000\u0000\u0276\u0278\u0003\u00be_\u0000\u0277\u0276\u0001"+
		"\u0000\u0000\u0000\u0277\u0278\u0001\u0000\u0000\u0000\u0278I\u0001\u0000"+
		"\u0000\u0000\u0279\u027a\u0003\u00c8d\u0000\u027a\u027c\u0005\u02b0\u0000"+
		"\u0000\u027b\u027d\u0005\u05dd\u0000\u0000\u027c\u027b\u0001\u0000\u0000"+
		"\u0000\u027c\u027d\u0001\u0000\u0000\u0000\u027d\u027e\u0001\u0000\u0000"+
		"\u0000\u027e\u027f\u0003N\'\u0000\u027f\u0280\u0005\u0910\u0000\u0000"+
		"\u0280\u0281\u0003P(\u0000\u0281\u0293\u0001\u0000\u0000\u0000\u0282\u0283"+
		"\u0003\u00ccf\u0000\u0283\u0290\u0005\u02b0\u0000\u0000\u0284\u028a\u0003"+
		"\u00cae\u0000\u0285\u0287\u0005\u0918\u0000\u0000\u0286\u0288\u0003\u008a"+
		"E\u0000\u0287\u0286\u0001\u0000\u0000\u0000\u0287\u0288\u0001\u0000\u0000"+
		"\u0000\u0288\u0289\u0001\u0000\u0000\u0000\u0289\u028b\u0005\u0919\u0000"+
		"\u0000\u028a\u0285\u0001\u0000\u0000\u0000\u028a\u028b\u0001\u0000\u0000"+
		"\u0000\u028b\u0291\u0001\u0000\u0000\u0000\u028c\u028d\u0005\u0918\u0000"+
		"\u0000\u028d\u028e\u0003b1\u0000\u028e\u028f\u0005\u0919\u0000\u0000\u028f"+
		"\u0291\u0001\u0000\u0000\u0000\u0290\u0284\u0001\u0000\u0000\u0000\u0290"+
		"\u028c\u0001\u0000\u0000\u0000\u0291\u0293\u0001\u0000\u0000\u0000\u0292"+
		"\u0279\u0001\u0000\u0000\u0000\u0292\u0282\u0001\u0000\u0000\u0000\u0293"+
		"K\u0001\u0000\u0000\u0000\u0294\u0295\u0003d2\u0000\u0295M\u0001\u0000"+
		"\u0000\u0000\u0296\u0297\u0003\u00a0P\u0000\u0297O\u0001\u0000\u0000\u0000"+
		"\u0298\u0299\u0003\u00a0P\u0000\u0299Q\u0001\u0000\u0000\u0000\u029a\u029c"+
		"\u0005\u0580\u0000\u0000\u029b\u029d\u0003\u00c2a\u0000\u029c\u029b\u0001"+
		"\u0000\u0000\u0000\u029c\u029d\u0001\u0000\u0000\u0000\u029dS\u0001\u0000"+
		"\u0000\u0000\u029e\u02a0\u0005\u05db\u0000\u0000\u029f\u02a1\u0003\u008c"+
		"F\u0000\u02a0\u029f\u0001\u0000\u0000\u0000\u02a0\u02a1\u0001\u0000\u0000"+
		"\u0000\u02a1U\u0001\u0000\u0000\u0000\u02a2\u02a4\u0005\u00a4\u0000\u0000"+
		"\u02a3\u02a2\u0001\u0000\u0000\u0000\u02a3\u02a4\u0001\u0000\u0000\u0000"+
		"\u02a4\u02a5\u0001\u0000\u0000\u0000\u02a5\u02a7\u0003\u00ba]\u0000\u02a6"+
		"\u02a8\u0003\u00d6k\u0000\u02a7\u02a6\u0001\u0000\u0000\u0000\u02a7\u02a8"+
		"\u0001\u0000\u0000\u0000\u02a8W\u0001\u0000\u0000\u0000\u02a9\u02aa\u0005"+
		"m\u0000\u0000\u02aa\u02b1\u00038\u001c\u0000\u02ab\u02ad\u0005\u01ea\u0000"+
		"\u0000\u02ac\u02ae\u0003Z-\u0000\u02ad\u02ac\u0001\u0000\u0000\u0000\u02ae"+
		"\u02af\u0001\u0000\u0000\u0000\u02af\u02ad\u0001\u0000\u0000\u0000\u02af"+
		"\u02b0\u0001\u0000\u0000\u0000\u02b0\u02b2\u0001\u0000\u0000\u0000\u02b1"+
		"\u02ab\u0001\u0000\u0000\u0000\u02b1\u02b2\u0001\u0000\u0000\u0000\u02b2"+
		"\u02b3\u0001\u0000\u0000\u0000\u02b3\u02b5\u0005\u01d3\u0000\u0000\u02b4"+
		"\u02b6\u0003\u00be_\u0000\u02b5\u02b4\u0001\u0000\u0000\u0000\u02b5\u02b6"+
		"\u0001\u0000\u0000\u0000\u02b6Y\u0001\u0000\u0000\u0000\u02b7\u02b8\u0005"+
		"\u0891\u0000\u0000\u02b8\u02bd\u0003\u00c2a\u0000\u02b9\u02ba\u0005\u04cd"+
		"\u0000\u0000\u02ba\u02bc\u0003\u00c2a\u0000\u02bb\u02b9\u0001\u0000\u0000"+
		"\u0000\u02bc\u02bf\u0001\u0000\u0000\u0000\u02bd\u02bb\u0001\u0000\u0000"+
		"\u0000\u02bd\u02be\u0001\u0000\u0000\u0000\u02be\u02c0\u0001\u0000\u0000"+
		"\u0000\u02bf\u02bd\u0001\u0000\u0000\u0000\u02c0\u02c1\u0005\u07d2\u0000"+
		"\u0000\u02c1\u02c2\u00038\u001c\u0000\u02c2[\u0001\u0000\u0000\u0000\u02c3"+
		"\u02c5\u0005\u0169\u0000\u0000\u02c4\u02c3\u0001\u0000\u0000\u0000\u02c4"+
		"\u02c5\u0001\u0000\u0000\u0000\u02c5\u02c7\u0001\u0000\u0000\u0000\u02c6"+
		"\u02c8\u00034\u001a\u0000\u02c7\u02c6\u0001\u0000\u0000\u0000\u02c8\u02c9"+
		"\u0001\u0000\u0000\u0000\u02c9\u02c7\u0001\u0000\u0000\u0000\u02c9\u02ca"+
		"\u0001\u0000\u0000\u0000\u02ca\u02cb\u0001\u0000\u0000\u0000\u02cb\u02cc"+
		"\u0003X,\u0000\u02cc]\u0001\u0000\u0000\u0000\u02cd\u02ce\u0003`0\u0000"+
		"\u02ce_\u0001\u0000\u0000\u0000\u02cf\u02d7\u0003\u0086C\u0000\u02d0\u02d7"+
		"\u0003b1\u0000\u02d1\u02d7\u0003t:\u0000\u02d2\u02d7\u0003x<\u0000\u02d3"+
		"\u02d7\u0003|>\u0000\u02d4\u02d7\u0003\u000e\u0007\u0000\u02d5\u02d7\u0003"+
		"\u0082A\u0000\u02d6\u02cf\u0001\u0000\u0000\u0000\u02d6\u02d0\u0001\u0000"+
		"\u0000\u0000\u02d6\u02d1\u0001\u0000\u0000\u0000\u02d6\u02d2\u0001\u0000"+
		"\u0000\u0000\u02d6\u02d3\u0001\u0000\u0000\u0000\u02d6\u02d4\u0001\u0000"+
		"\u0000\u0000\u02d6\u02d5\u0001\u0000\u0000\u0000\u02d7a\u0001\u0000\u0000"+
		"\u0000\u02d8\u02d9\u0003L&\u0000\u02d9c\u0001\u0000\u0000\u0000\u02da"+
		"\u02de\u0003f3\u0000\u02db\u02dd\u0003h4\u0000\u02dc\u02db\u0001\u0000"+
		"\u0000\u0000\u02dd\u02e0\u0001\u0000\u0000\u0000\u02de\u02dc\u0001\u0000"+
		"\u0000\u0000\u02de\u02df\u0001\u0000\u0000\u0000\u02dfe\u0001\u0000\u0000"+
		"\u0000\u02e0\u02de\u0001\u0000\u0000\u0000\u02e1\u02e7\u0003l6\u0000\u02e2"+
		"\u02e3\u0005\u0918\u0000\u0000\u02e3\u02e4\u0003d2\u0000\u02e4\u02e5\u0005"+
		"\u0919\u0000\u0000\u02e5\u02e7\u0001\u0000\u0000\u0000\u02e6\u02e1\u0001"+
		"\u0000\u0000\u0000\u02e6\u02e2\u0001\u0000\u0000\u0000\u02e7g\u0001\u0000"+
		"\u0000\u0000\u02e8\u02ea\u0005\u0820\u0000\u0000\u02e9\u02eb\u0005%\u0000"+
		"\u0000\u02ea\u02e9\u0001\u0000\u0000\u0000\u02ea\u02eb\u0001\u0000\u0000"+
		"\u0000\u02eb\u02ef\u0001\u0000\u0000\u0000\u02ec\u02ef\u0005\u02d4\u0000"+
		"\u0000\u02ed\u02ef\u0005\u037e\u0000\u0000\u02ee\u02e8\u0001\u0000\u0000"+
		"\u0000\u02ee\u02ec\u0001\u0000\u0000\u0000\u02ee\u02ed\u0001\u0000\u0000"+
		"\u0000\u02ef\u02f0\u0001\u0000\u0000\u0000\u02f0\u02f1\u0003f3\u0000\u02f1"+
		"i\u0001\u0000\u0000\u0000\u02f2\u02f6\u0005\u0618\u0000\u0000\u02f3\u02f5"+
		"\t\u0000\u0000\u0000\u02f4\u02f3\u0001\u0000\u0000\u0000\u02f5\u02f8\u0001"+
		"\u0000\u0000\u0000\u02f6\u02f7\u0001\u0000\u0000\u0000\u02f6\u02f4\u0001"+
		"\u0000\u0000\u0000\u02f7\u02f9\u0001\u0000\u0000\u0000\u02f8\u02f6\u0001"+
		"\u0000\u0000\u0000\u02f9\u02fa\u0005\u092c\u0000\u0000\u02fak\u0001\u0000"+
		"\u0000\u0000\u02fb\u02ff\u0005\u0618\u0000\u0000\u02fc\u02fe\t\u0000\u0000"+
		"\u0000\u02fd\u02fc\u0001\u0000\u0000\u0000\u02fe\u0301\u0001\u0000\u0000"+
		"\u0000\u02ff\u0300\u0001\u0000\u0000\u0000\u02ff\u02fd\u0001\u0000\u0000"+
		"\u0000\u0300m\u0001\u0000\u0000\u0000\u0301\u02ff\u0001\u0000\u0000\u0000"+
		"\u0302\u0303\u0007\u0005\u0000\u0000\u0303\u0304\u0005\u0918\u0000\u0000"+
		"\u0304\u0309\u0003p8\u0000\u0305\u0306\u0005\u091e\u0000\u0000\u0306\u0308"+
		"\u0003p8\u0000\u0307\u0305\u0001\u0000\u0000\u0000\u0308\u030b\u0001\u0000"+
		"\u0000\u0000\u0309\u0307\u0001\u0000\u0000\u0000\u0309\u030a\u0001\u0000"+
		"\u0000\u0000\u030a\u030c\u0001\u0000\u0000\u0000\u030b\u0309\u0001\u0000"+
		"\u0000\u0000\u030c\u030d\u0005\u0919\u0000\u0000\u030do\u0001\u0000\u0000"+
		"\u0000\u030e\u0316\u0003n7\u0000\u030f\u0311\u0005\u0918\u0000\u0000\u0310"+
		"\u0312\u0003\u008aE\u0000\u0311\u0310\u0001\u0000\u0000\u0000\u0311\u0312"+
		"\u0001\u0000\u0000\u0000\u0312\u0313\u0001\u0000\u0000\u0000\u0313\u0316"+
		"\u0005\u0919\u0000\u0000\u0314\u0316\u0003\u008cF\u0000\u0315\u030e\u0001"+
		"\u0000\u0000\u0000\u0315\u030f\u0001\u0000\u0000\u0000\u0315\u0314\u0001"+
		"\u0000\u0000\u0000\u0316q\u0001\u0000\u0000\u0000\u0317\u031b\u0005\u0838"+
		"\u0000\u0000\u0318\u031a\t\u0000\u0000\u0000\u0319\u0318\u0001\u0000\u0000"+
		"\u0000\u031a\u031d\u0001\u0000\u0000\u0000\u031b\u031c\u0001\u0000\u0000"+
		"\u0000\u031b\u0319\u0001\u0000\u0000\u0000\u031c\u031e\u0001\u0000\u0000"+
		"\u0000\u031d\u031b\u0001\u0000\u0000\u0000\u031e\u031f\u0005\u092c\u0000"+
		"\u0000\u031fs\u0001\u0000\u0000\u0000\u0320\u0324\u0005\u0838\u0000\u0000"+
		"\u0321\u0323\t\u0000\u0000\u0000\u0322\u0321\u0001\u0000\u0000\u0000\u0323"+
		"\u0326\u0001\u0000\u0000\u0000\u0324\u0325\u0001\u0000\u0000\u0000\u0324"+
		"\u0322\u0001\u0000\u0000\u0000\u0325u\u0001\u0000\u0000\u0000\u0326\u0324"+
		"\u0001\u0000\u0000\u0000\u0327\u0328\u0005\u017d\u0000\u0000\u0328\u032c"+
		"\u0005\u0244\u0000\u0000\u0329\u032b\t\u0000\u0000\u0000\u032a\u0329\u0001"+
		"\u0000\u0000\u0000\u032b\u032e\u0001\u0000\u0000\u0000\u032c\u032d\u0001"+
		"\u0000\u0000\u0000\u032c\u032a\u0001\u0000\u0000\u0000\u032d\u032f\u0001"+
		"\u0000\u0000\u0000\u032e\u032c\u0001\u0000\u0000\u0000\u032f\u0330\u0005"+
		"\u092c\u0000\u0000\u0330w\u0001\u0000\u0000\u0000\u0331\u0332\u0005\u017d"+
		"\u0000\u0000\u0332\u0336\u0005\u0244\u0000\u0000\u0333\u0335\t\u0000\u0000"+
		"\u0000\u0334\u0333\u0001\u0000\u0000\u0000\u0335\u0338\u0001\u0000\u0000"+
		"\u0000\u0336\u0337\u0001\u0000\u0000\u0000\u0336\u0334\u0001\u0000\u0000"+
		"\u0000\u0337y\u0001\u0000\u0000\u0000\u0338\u0336\u0001\u0000\u0000\u0000"+
		"\u0339\u033d\u0005\u02c1\u0000\u0000\u033a\u033c\t\u0000\u0000\u0000\u033b"+
		"\u033a\u0001\u0000\u0000\u0000\u033c\u033f\u0001\u0000\u0000\u0000\u033d"+
		"\u033e\u0001\u0000\u0000\u0000\u033d\u033b\u0001\u0000\u0000\u0000\u033e"+
		"\u0340\u0001\u0000\u0000\u0000\u033f\u033d\u0001\u0000\u0000\u0000\u0340"+
		"\u0341\u0005\u092c\u0000\u0000\u0341{\u0001\u0000\u0000\u0000\u0342\u0346"+
		"\u0005\u02c1\u0000\u0000\u0343\u0345\t\u0000\u0000\u0000\u0344\u0343\u0001"+
		"\u0000\u0000\u0000\u0345\u0348\u0001\u0000\u0000\u0000\u0346\u0347\u0001"+
		"\u0000\u0000\u0000\u0346\u0344\u0001\u0000\u0000\u0000\u0347}\u0001\u0000"+
		"\u0000\u0000\u0348\u0346\u0001\u0000\u0000\u0000\u0349\u034d\u0005\u062d"+
		"\u0000\u0000\u034a\u034c\t\u0000\u0000\u0000\u034b\u034a\u0001\u0000\u0000"+
		"\u0000\u034c\u034f\u0001\u0000\u0000\u0000\u034d\u034e\u0001\u0000\u0000"+
		"\u0000\u034d\u034b\u0001\u0000\u0000\u0000\u034e\u0350\u0001\u0000\u0000"+
		"\u0000\u034f\u034d\u0001\u0000\u0000\u0000\u0350\u0351\u0005\u092c\u0000"+
		"\u0000\u0351\u007f\u0001\u0000\u0000\u0000\u0352\u0353\u0005\u080b\u0000"+
		"\u0000\u0353\u0357\u0005\u07c5\u0000\u0000\u0354\u0356\t\u0000\u0000\u0000"+
		"\u0355\u0354\u0001\u0000\u0000\u0000\u0356\u0359\u0001\u0000\u0000\u0000"+
		"\u0357\u0358\u0001\u0000\u0000\u0000\u0357\u0355\u0001\u0000\u0000\u0000"+
		"\u0358\u035a\u0001\u0000\u0000\u0000\u0359\u0357\u0001\u0000\u0000\u0000"+
		"\u035a\u035b\u0005\u092c\u0000\u0000\u035b\u0081\u0001\u0000\u0000\u0000"+
		"\u035c\u035d\u0005\u080b\u0000\u0000\u035d\u0361\u0005\u07c5\u0000\u0000"+
		"\u035e\u0360\t\u0000\u0000\u0000\u035f\u035e\u0001\u0000\u0000\u0000\u0360"+
		"\u0363\u0001\u0000\u0000\u0000\u0361\u0362\u0001\u0000\u0000\u0000\u0361"+
		"\u035f\u0001\u0000\u0000\u0000\u0362\u0083\u0001\u0000\u0000\u0000\u0363"+
		"\u0361\u0001\u0000\u0000\u0000\u0364\u0365\u0005\u0374\u0000\u0000\u0365"+
		"\u0369\u0005\u02d8\u0000\u0000\u0366\u0368\t\u0000\u0000\u0000\u0367\u0366"+
		"\u0001\u0000\u0000\u0000\u0368\u036b\u0001\u0000\u0000\u0000\u0369\u036a"+
		"\u0001\u0000\u0000\u0000\u0369\u0367\u0001\u0000\u0000\u0000\u036a\u036c"+
		"\u0001\u0000\u0000\u0000\u036b\u0369\u0001\u0000\u0000\u0000\u036c\u036d"+
		"\u0005\u092c\u0000\u0000\u036d\u0085\u0001\u0000\u0000\u0000\u036e\u036f"+
		"\u0005\u0374\u0000\u0000\u036f\u0373\u0005\u02d8\u0000\u0000\u0370\u0372"+
		"\t\u0000\u0000\u0000\u0371\u0370\u0001\u0000\u0000\u0000\u0372\u0375\u0001"+
		"\u0000\u0000\u0000\u0373\u0374\u0001\u0000\u0000\u0000\u0373\u0371\u0001"+
		"\u0000\u0000\u0000\u0374\u0087\u0001\u0000\u0000\u0000\u0375\u0373\u0001"+
		"\u0000\u0000\u0000\u0376\u0377\u0003\u008cF\u0000\u0377\u0089\u0001\u0000"+
		"\u0000\u0000\u0378\u037d\u0003\u008cF\u0000\u0379\u037a\u0005\u091e\u0000"+
		"\u0000\u037a\u037c\u0003\u008cF\u0000\u037b\u0379\u0001\u0000\u0000\u0000"+
		"\u037c\u037f\u0001\u0000\u0000\u0000\u037d\u037b\u0001\u0000\u0000\u0000"+
		"\u037d\u037e\u0001\u0000\u0000\u0000\u037e\u008b\u0001\u0000\u0000\u0000"+
		"\u037f\u037d\u0001\u0000\u0000\u0000\u0380\u0381\u0003\u008eG\u0000\u0381"+
		"\u008d\u0001\u0000\u0000\u0000\u0382\u0383\u0006G\uffff\uffff\u0000\u0383"+
		"\u0384\u0003\u0090H\u0000\u0384\u038d\u0001\u0000\u0000\u0000\u0385\u0386"+
		"\n\u0002\u0000\u0000\u0386\u0387\u00050\u0000\u0000\u0387\u038c\u0003"+
		"\u008eG\u0003\u0388\u0389\n\u0001\u0000\u0000\u0389\u038a\u0005\u04cd"+
		"\u0000\u0000\u038a\u038c\u0003\u008eG\u0002\u038b\u0385\u0001\u0000\u0000"+
		"\u0000\u038b\u0388\u0001\u0000\u0000\u0000\u038c\u038f\u0001\u0000\u0000"+
		"\u0000\u038d\u038b\u0001\u0000\u0000\u0000\u038d\u038e\u0001\u0000\u0000"+
		"\u0000\u038e\u008f\u0001\u0000\u0000\u0000\u038f\u038d\u0001\u0000\u0000"+
		"\u0000\u0390\u0392\u0005\u046a\u0000\u0000\u0391\u0390\u0001\u0000\u0000"+
		"\u0000\u0391\u0392\u0001\u0000\u0000\u0000\u0392\u0393\u0001\u0000\u0000"+
		"\u0000\u0393\u039b\u0003\u0094J\u0000\u0394\u0396\u0005\u02dc\u0000\u0000"+
		"\u0395\u0397\u0005\u046a\u0000\u0000\u0396\u0395\u0001\u0000\u0000\u0000"+
		"\u0396\u0397\u0001\u0000\u0000\u0000\u0397\u0398\u0001\u0000\u0000\u0000"+
		"\u0398\u039a\u0003\u0092I\u0000\u0399\u0394\u0001\u0000\u0000\u0000\u039a"+
		"\u039d\u0001\u0000\u0000\u0000\u039b\u0399\u0001\u0000\u0000\u0000\u039b"+
		"\u039c\u0001\u0000\u0000\u0000\u039c\u0091\u0001\u0000\u0000\u0000\u039d"+
		"\u039b\u0001\u0000\u0000\u0000\u039e\u03b8\u0005\u0482\u0000\u0000\u039f"+
		"\u03b8\u0005\u03a9\u0000\u0000\u03a0\u03b8\u0005\u054f\u0000\u0000\u03a1"+
		"\u03b8\u0005\u02ad\u0000\u0000\u03a2\u03a3\u0005#\u0000\u0000\u03a3\u03b8"+
		"\u0005\u062d\u0000\u0000\u03a4\u03b8\u0005\u01cb\u0000\u0000\u03a5\u03a7"+
		"\u0005\u0494\u0000\u0000\u03a6\u03a8\u0005\u0812\u0000\u0000\u03a7\u03a6"+
		"\u0001\u0000\u0000\u0000\u03a7\u03a8\u0001\u0000\u0000\u0000\u03a8\u03a9"+
		"\u0001\u0000\u0000\u0000\u03a9\u03ab\u0005\u0918\u0000\u0000\u03aa\u03ac"+
		"\u0005\u04a0\u0000\u0000\u03ab\u03aa\u0001\u0000\u0000\u0000\u03ab\u03ac"+
		"\u0001\u0000\u0000\u0000\u03ac\u03ad\u0001\u0000\u0000\u0000\u03ad\u03b2"+
		"\u0003\u00dam\u0000\u03ae\u03af\u0005\u091e\u0000\u0000\u03af\u03b1\u0003"+
		"\u00dam\u0000\u03b0\u03ae\u0001\u0000\u0000\u0000\u03b1\u03b4\u0001\u0000"+
		"\u0000\u0000\u03b2\u03b0\u0001\u0000\u0000\u0000\u03b2\u03b3\u0001\u0000"+
		"\u0000\u0000\u03b3\u03b5\u0001\u0000\u0000\u0000\u03b4\u03b2\u0001\u0000"+
		"\u0000\u0000\u03b5\u03b6\u0005\u0919\u0000\u0000\u03b6\u03b8\u0001\u0000"+
		"\u0000\u0000\u03b7\u039e\u0001\u0000\u0000\u0000\u03b7\u039f\u0001\u0000"+
		"\u0000\u0000\u03b7\u03a0\u0001\u0000\u0000\u0000\u03b7\u03a1\u0001\u0000"+
		"\u0000\u0000\u03b7\u03a2\u0001\u0000\u0000\u0000\u03b7\u03a4\u0001\u0000"+
		"\u0000\u0000\u03b7\u03a5\u0001\u0000\u0000\u0000\u03b8\u0093\u0001\u0000"+
		"\u0000\u0000\u03b9\u03bf\u0003\u0096K\u0000\u03ba\u03bc\u0007\u0006\u0000"+
		"\u0000\u03bb\u03bd\u0005\u0494\u0000\u0000\u03bc\u03bb\u0001\u0000\u0000"+
		"\u0000\u03bc\u03bd\u0001\u0000\u0000\u0000\u03bd\u03be\u0001\u0000\u0000"+
		"\u0000\u03be\u03c0\u0003\u00a0P\u0000\u03bf\u03ba\u0001\u0000\u0000\u0000"+
		"\u03bf\u03c0\u0001\u0000\u0000\u0000\u03c0\u0095\u0001\u0000\u0000\u0000"+
		"\u03c1\u03c2\u0006K\uffff\uffff\u0000\u03c2\u03c3\u0003\u0098L\u0000\u03c3"+
		"\u03ca\u0001\u0000\u0000\u0000\u03c4\u03c5\n\u0002\u0000\u0000\u03c5\u03c6"+
		"\u0003\u009aM\u0000\u03c6\u03c7\u0003\u0096K\u0003\u03c7\u03c9\u0001\u0000"+
		"\u0000\u0000\u03c8\u03c4\u0001\u0000\u0000\u0000\u03c9\u03cc\u0001\u0000"+
		"\u0000\u0000\u03ca\u03c8\u0001\u0000\u0000\u0000\u03ca\u03cb\u0001\u0000"+
		"\u0000\u0000\u03cb\u0097\u0001\u0000\u0000\u0000\u03cc\u03ca\u0001\u0000"+
		"\u0000\u0000\u03cd\u03dd\u0003\u00a0P\u0000\u03ce\u03d0\u0005\u046a\u0000"+
		"\u0000\u03cf\u03ce\u0001\u0000\u0000\u0000\u03cf\u03d0\u0001\u0000\u0000"+
		"\u0000\u03d0\u03db\u0001\u0000\u0000\u0000\u03d1\u03d2\u0005\u02b0\u0000"+
		"\u0000\u03d2\u03dc\u0003\u009cN\u0000\u03d3\u03d4\u0005r\u0000\u0000\u03d4"+
		"\u03dc\u0003\u009eO\u0000\u03d5\u03d6\u0007\u0007\u0000\u0000\u03d6\u03d9"+
		"\u0003\u00a0P\u0000\u03d7\u03d8\u0005\u01e1\u0000\u0000\u03d8\u03da\u0003"+
		"\u00a0P\u0000\u03d9\u03d7\u0001\u0000\u0000\u0000\u03d9\u03da\u0001\u0000"+
		"\u0000\u0000\u03da\u03dc\u0001\u0000\u0000\u0000\u03db\u03d1\u0001\u0000"+
		"\u0000\u0000\u03db\u03d3\u0001\u0000\u0000\u0000\u03db\u03d5\u0001\u0000"+
		"\u0000\u0000\u03dc\u03de\u0001\u0000\u0000\u0000\u03dd\u03cf\u0001\u0000"+
		"\u0000\u0000\u03dd\u03de\u0001\u0000\u0000\u0000\u03de\u0099\u0001\u0000"+
		"\u0000\u0000\u03df\u03ee\u0005\u092e\u0000\u0000\u03e0\u03e8\u0005\u0925"+
		"\u0000\u0000\u03e1\u03e2\u0005\u092a\u0000\u0000\u03e2\u03e8\u0005\u0929"+
		"\u0000\u0000\u03e3\u03e4\u0005\u0928\u0000\u0000\u03e4\u03e8\u0005\u092e"+
		"\u0000\u0000\u03e5\u03e6\u0005\u0926\u0000\u0000\u03e6\u03e8\u0005\u092e"+
		"\u0000\u0000\u03e7\u03e0\u0001\u0000\u0000\u0000\u03e7\u03e1\u0001\u0000"+
		"\u0000\u0000\u03e7\u03e3\u0001\u0000\u0000\u0000\u03e7\u03e5\u0001\u0000"+
		"\u0000\u0000\u03e8\u03ee\u0001\u0000\u0000\u0000\u03e9\u03eb\u0007\b\u0000"+
		"\u0000\u03ea\u03ec\u0005\u092e\u0000\u0000\u03eb\u03ea\u0001\u0000\u0000"+
		"\u0000\u03eb\u03ec\u0001\u0000\u0000\u0000\u03ec\u03ee\u0001\u0000\u0000"+
		"\u0000\u03ed\u03df\u0001\u0000\u0000\u0000\u03ed\u03e7\u0001\u0000\u0000"+
		"\u0000\u03ed\u03e9\u0001\u0000\u0000\u0000\u03ee\u009b\u0001\u0000\u0000"+
		"\u0000\u03ef\u03f0\u0005\u0918\u0000\u0000\u03f0\u03f1\u0003d2\u0000\u03f1"+
		"\u03f2\u0005\u0919\u0000\u0000\u03f2\u0402\u0001\u0000\u0000\u0000\u03f3"+
		"\u03f4\u0005\u0918\u0000\u0000\u03f4\u03f9\u0003\u00a0P\u0000\u03f5\u03f6"+
		"\u0005\u091e\u0000\u0000\u03f6\u03f8\u0003\u00a0P\u0000\u03f7\u03f5\u0001"+
		"\u0000\u0000\u0000\u03f8\u03fb\u0001\u0000\u0000\u0000\u03f9\u03f7\u0001"+
		"\u0000\u0000\u0000\u03f9\u03fa\u0001\u0000\u0000\u0000\u03fa\u03fc\u0001"+
		"\u0000\u0000\u0000\u03fb\u03f9\u0001\u0000\u0000\u0000\u03fc\u03fd\u0005"+
		"\u0919\u0000\u0000\u03fd\u0402\u0001\u0000\u0000\u0000\u03fe\u0402\u0003"+
		"\u00eau\u0000\u03ff\u0402\u0003\u00e2q\u0000\u0400\u0402\u0003\u00e4r"+
		"\u0000\u0401\u03ef\u0001\u0000\u0000\u0000\u0401\u03f3\u0001\u0000\u0000"+
		"\u0000\u0401\u03fe\u0001\u0000\u0000\u0000\u0401\u03ff\u0001\u0000\u0000"+
		"\u0000\u0401\u0400\u0001\u0000\u0000\u0000\u0402\u009d\u0001\u0000\u0000"+
		"\u0000\u0403\u0404\u0003\u00a0P\u0000\u0404\u0405\u00050\u0000\u0000\u0405"+
		"\u0406\u0003\u00a0P\u0000\u0406\u009f\u0001\u0000\u0000\u0000\u0407\u0408"+
		"\u0006P\uffff\uffff\u0000\u0408\u0411\u0003\u00a4R\u0000\u0409\u040e\u0005"+
		"O\u0000\u0000\u040a\u040f\u0005\u032d\u0000\u0000\u040b\u040c\u0005\u07de"+
		"\u0000\u0000\u040c\u040d\u0005\u08ce\u0000\u0000\u040d\u040f\u0003\u00a0"+
		"P\u0000\u040e\u040a\u0001\u0000\u0000\u0000\u040e\u040b\u0001\u0000\u0000"+
		"\u0000\u040f\u0412\u0001\u0000\u0000\u0000\u0410\u0412\u0003\u00a2Q\u0000"+
		"\u0411\u0409\u0001\u0000\u0000\u0000\u0411\u0410\u0001\u0000\u0000\u0000"+
		"\u0411\u0412\u0001\u0000\u0000\u0000\u0412\u0416\u0001\u0000\u0000\u0000"+
		"\u0413\u0414\u0005\u04a1\u0000\u0000\u0414\u0415\u0005\u04d9\u0000\u0000"+
		"\u0415\u0417\u0007\t\u0000\u0000\u0416\u0413\u0001\u0000\u0000\u0000\u0416"+
		"\u0417\u0001\u0000\u0000\u0000\u0417\u0424\u0001\u0000\u0000\u0000\u0418"+
		"\u0419\n\u0003\u0000\u0000\u0419\u041a\u0007\n\u0000\u0000\u041a\u0423"+
		"\u0003\u00a0P\u0004\u041b\u041c\n\u0002\u0000\u0000\u041c\u041d\u0007"+
		"\u000b\u0000\u0000\u041d\u0423\u0003\u00a0P\u0003\u041e\u041f\n\u0001"+
		"\u0000\u0000\u041f\u0420\u0005\u092d\u0000\u0000\u0420\u0421\u0005\u092d"+
		"\u0000\u0000\u0421\u0423\u0003\u00a0P\u0002\u0422\u0418\u0001\u0000\u0000"+
		"\u0000\u0422\u041b\u0001\u0000\u0000\u0000\u0422\u041e\u0001\u0000\u0000"+
		"\u0000\u0423\u0426\u0001\u0000\u0000\u0000\u0424\u0422\u0001\u0000\u0000"+
		"\u0000\u0424\u0425\u0001\u0000\u0000\u0000\u0425\u00a1\u0001\u0000\u0000"+
		"\u0000\u0426\u0424\u0001\u0000\u0000\u0000\u0427\u042c\u0005\u0159\u0000"+
		"\u0000\u0428\u0429\u0005\u0918\u0000\u0000\u0429\u042a\u0003\u00a0P\u0000"+
		"\u042a\u042b\u0005\u0919\u0000\u0000\u042b\u042d\u0001\u0000\u0000\u0000"+
		"\u042c\u0428\u0001\u0000\u0000\u0000\u042c\u042d\u0001\u0000\u0000\u0000"+
		"\u042d\u042e\u0001\u0000\u0000\u0000\u042e\u042f\u0005\u07fa\u0000\u0000"+
		"\u042f\u0434\u0005\u060d\u0000\u0000\u0430\u0431\u0005\u0918\u0000\u0000"+
		"\u0431\u0432\u0003\u00a0P\u0000\u0432\u0433\u0005\u0919\u0000\u0000\u0433"+
		"\u0435\u0001\u0000\u0000\u0000\u0434\u0430\u0001\u0000\u0000\u0000\u0434"+
		"\u0435\u0001\u0000\u0000\u0000\u0435\u0443\u0001\u0000\u0000\u0000\u0436"+
		"\u043b\u0005\u08c9\u0000\u0000\u0437\u0438\u0005\u0918\u0000\u0000\u0438"+
		"\u0439\u0003\u00a0P\u0000\u0439\u043a\u0005\u0919\u0000\u0000\u043a\u043c"+
		"\u0001\u0000\u0000\u0000\u043b\u0437\u0001\u0000\u0000\u0000\u043b\u043c"+
		"\u0001\u0000\u0000\u0000\u043c\u043d\u0001\u0000\u0000\u0000\u043d\u043e"+
		"\u0005\u07fa\u0000\u0000\u043e\u0443\u0005\u039b\u0000\u0000\u043f\u0440"+
		"\u0003\u00a0P\u0000\u0440\u0441\u0007\f\u0000\u0000\u0441\u0443\u0001"+
		"\u0000\u0000\u0000\u0442\u0427\u0001\u0000\u0000\u0000\u0442\u0436\u0001"+
		"\u0000\u0000\u0000\u0442\u043f\u0001\u0000\u0000\u0000\u0443\u00a3\u0001"+
		"\u0000\u0000\u0000\u0444\u0445\u0003\u00a6S\u0000\u0445\u00a5\u0001\u0000"+
		"\u0000\u0000\u0446\u0447\u0007\r\u0000\u0000\u0447\u0457\u0003\u00a6S"+
		"\u0000\u0448\u0449\u0005\u0559\u0000\u0000\u0449\u0457\u0003\u00a6S\u0000"+
		"\u044a\u044b\u0005\u0107\u0000\u0000\u044b\u0457\u0003\u00a6S\u0000\u044c"+
		"\u044d\u0005\u03bf\u0000\u0000\u044d\u0457\u0003\u00a6S\u0000\u044e\u044f"+
		"\u0005\u01a0\u0000\u0000\u044f\u0457\u0003\u00a6S\u0000\u0450\u0451\u0005"+
		"%\u0000\u0000\u0451\u0457\u0003\u00a6S\u0000\u0452\u0457\u0003\u00aaU"+
		"\u0000\u0453\u0457\u0003\u00b8\\\u0000\u0454\u0457\u0003\u00a8T\u0000"+
		"\u0455\u0457\u0003\u00b6[\u0000\u0456\u0446\u0001\u0000\u0000\u0000\u0456"+
		"\u0448\u0001\u0000\u0000\u0000\u0456\u044a\u0001\u0000\u0000\u0000\u0456"+
		"\u044c\u0001\u0000\u0000\u0000\u0456\u044e\u0001\u0000\u0000\u0000\u0456"+
		"\u0450\u0001\u0000\u0000\u0000\u0456\u0452\u0001\u0000\u0000\u0000\u0456"+
		"\u0453\u0001\u0000\u0000\u0000\u0456\u0454\u0001\u0000\u0000\u0000\u0456"+
		"\u0455\u0001\u0000\u0000\u0000\u0457\u00a7\u0001\u0000\u0000\u0000\u0458"+
		"\u0459\u0007\u000e\u0000\u0000\u0459\u0460\u0005\u0918\u0000\u0000\u045a"+
		"\u045b\u0005\u03a4\u0000\u0000\u045b\u045c\u0005\u0918\u0000\u0000\u045c"+
		"\u045d\u0003d2\u0000\u045d\u045e\u0005\u0919\u0000\u0000\u045e\u0461\u0001"+
		"\u0000\u0000\u0000\u045f\u0461\u0003\u00a0P\u0000\u0460\u045a\u0001\u0000"+
		"\u0000\u0000\u0460\u045f\u0001\u0000\u0000\u0000\u0461\u0462\u0001\u0000"+
		"\u0000\u0000\u0462\u0463\u0005B\u0000\u0000\u0463\u046a\u0003\u00dam\u0000"+
		"\u0464\u0465\u0005\u0170\u0000\u0000\u0465\u0466\u0003\u00a0P\u0000\u0466"+
		"\u0467\u0005\u04a1\u0000\u0000\u0467\u0468\u0005\u011d\u0000\u0000\u0468"+
		"\u0469\u0005\u01de\u0000\u0000\u0469\u046b\u0001\u0000\u0000\u0000\u046a"+
		"\u0464\u0001\u0000\u0000\u0000\u046a\u046b\u0001\u0000\u0000\u0000\u046b"+
		"\u0472\u0001\u0000\u0000\u0000\u046c\u046d\u0005\u091e\u0000\u0000\u046d"+
		"\u0470\u0003\u00f0x\u0000\u046e\u046f\u0005\u091e\u0000\u0000\u046f\u0471"+
		"\u0003\u00f0x\u0000\u0470\u046e\u0001\u0000\u0000\u0000\u0470\u0471\u0001"+
		"\u0000\u0000\u0000\u0471\u0473\u0001\u0000\u0000\u0000\u0472\u046c\u0001"+
		"\u0000\u0000\u0000\u0472\u0473\u0001\u0000\u0000\u0000\u0473\u0474\u0001"+
		"\u0000\u0000\u0000\u0474\u0475\u0005\u0919\u0000\u0000\u0475\u047e\u0001"+
		"\u0000\u0000\u0000\u0476\u0477\u0005\u0206\u0000\u0000\u0477\u0478\u0005"+
		"\u0918\u0000\u0000\u0478\u0479\u0007\u000f\u0000\u0000\u0479\u047a\u0005"+
		"\u0244\u0000\u0000\u047a\u047b\u0003\u008cF\u0000\u047b\u047c\u0005\u0919"+
		"\u0000\u0000\u047c\u047e\u0001\u0000\u0000\u0000\u047d\u0458\u0001\u0000"+
		"\u0000\u0000\u047d\u0476\u0001\u0000\u0000\u0000\u047e\u00a9\u0001\u0000"+
		"\u0000\u0000\u047f\u0482\u0003\u00b0X\u0000\u0480\u0482\u0003\u00acV\u0000"+
		"\u0481\u047f\u0001\u0000\u0000\u0000\u0481\u0480\u0001\u0000\u0000\u0000"+
		"\u0482\u00ab\u0001\u0000\u0000\u0000\u0483\u0485\u0003\u00be_\u0000\u0484"+
		"\u0483\u0001\u0000\u0000\u0000\u0484\u0485\u0001\u0000\u0000\u0000\u0485"+
		"\u0486\u0001\u0000\u0000\u0000\u0486\u0487\u0005\u00ab\u0000\u0000\u0487"+
		"\u0489\u0003\u008cF\u0000\u0488\u048a\u0003\u00aeW\u0000\u0489\u0488\u0001"+
		"\u0000\u0000\u0000\u048a\u048b\u0001\u0000\u0000\u0000\u048b\u0489\u0001"+
		"\u0000\u0000\u0000\u048b\u048c\u0001\u0000\u0000\u0000\u048c\u048e\u0001"+
		"\u0000\u0000\u0000\u048d\u048f\u0003\u00b4Z\u0000\u048e\u048d\u0001\u0000"+
		"\u0000\u0000\u048e\u048f\u0001\u0000\u0000\u0000\u048f\u0490\u0001\u0000"+
		"\u0000\u0000\u0490\u0492\u0005\u01d3\u0000\u0000\u0491\u0493\u0005\u00ab"+
		"\u0000\u0000\u0492\u0491\u0001\u0000\u0000\u0000\u0492\u0493\u0001\u0000"+
		"\u0000\u0000\u0493\u0495\u0001\u0000\u0000\u0000\u0494\u0496\u0003\u00be"+
		"_\u0000\u0495\u0494\u0001\u0000\u0000\u0000\u0495\u0496\u0001\u0000\u0000"+
		"\u0000\u0496\u00ad\u0001\u0000\u0000\u0000\u0497\u0498\u0005\u0891\u0000"+
		"\u0000\u0498\u0499\u0003\u008cF\u0000\u0499\u049c\u0005\u07d2\u0000\u0000"+
		"\u049a\u049d\u00038\u001c\u0000\u049b\u049d\u0003\u008cF\u0000\u049c\u049a"+
		"\u0001\u0000\u0000\u0000\u049c\u049b\u0001\u0000\u0000\u0000\u049d\u00af"+
		"\u0001\u0000\u0000\u0000\u049e\u04a0\u0003\u00be_\u0000\u049f\u049e\u0001"+
		"\u0000\u0000\u0000\u049f\u04a0\u0001\u0000\u0000\u0000\u04a0\u04a1\u0001"+
		"\u0000\u0000\u0000\u04a1\u04a3\u0005\u00ab\u0000\u0000\u04a2\u04a4\u0003"+
		"\u00b2Y\u0000\u04a3\u04a2\u0001\u0000\u0000\u0000\u04a4\u04a5\u0001\u0000"+
		"\u0000\u0000\u04a5\u04a3\u0001\u0000\u0000\u0000\u04a5\u04a6\u0001\u0000"+
		"\u0000\u0000\u04a6\u04a8\u0001\u0000\u0000\u0000\u04a7\u04a9\u0003\u00b4"+
		"Z\u0000\u04a8\u04a7\u0001\u0000\u0000\u0000\u04a8\u04a9\u0001\u0000\u0000"+
		"\u0000\u04a9\u04aa\u0001\u0000\u0000\u0000\u04aa\u04ac\u0005\u01d3\u0000"+
		"\u0000\u04ab\u04ad\u0005\u00ab\u0000\u0000\u04ac\u04ab\u0001\u0000\u0000"+
		"\u0000\u04ac\u04ad\u0001\u0000\u0000\u0000\u04ad\u04af\u0001\u0000\u0000"+
		"\u0000\u04ae\u04b0\u0003\u00be_\u0000\u04af\u04ae\u0001\u0000\u0000\u0000"+
		"\u04af\u04b0\u0001\u0000\u0000\u0000\u04b0\u00b1\u0001\u0000\u0000\u0000"+
		"\u04b1\u04b2\u0005\u0891\u0000\u0000\u04b2\u04b3\u0003\u008cF\u0000\u04b3"+
		"\u04b6\u0005\u07d2\u0000\u0000\u04b4\u04b7\u00038\u001c\u0000\u04b5\u04b7"+
		"\u0003\u008cF\u0000\u04b6\u04b4\u0001\u0000\u0000\u0000\u04b6\u04b5\u0001"+
		"\u0000\u0000\u0000\u04b7\u00b3\u0001\u0000\u0000\u0000\u04b8\u04bb\u0005"+
		"\u01c6\u0000\u0000\u04b9\u04bc\u00038\u001c\u0000\u04ba\u04bc\u0003\u008c"+
		"F\u0000\u04bb\u04b9\u0001\u0000\u0000\u0000\u04bb\u04ba\u0001\u0000\u0000"+
		"\u0000\u04bc\u00b5\u0001\u0000\u0000\u0000\u04bd\u04be\u0003\u00e8t\u0000"+
		"\u04be\u04bf\u0003\u00f6{\u0000\u04bf\u04d2\u0001\u0000\u0000\u0000\u04c0"+
		"\u04d2\u0003\u00e2q\u0000\u04c1\u04d2\u0003\u00eau\u0000\u04c2\u04d2\u0003"+
		"\u00e4r\u0000\u04c3\u04c4\u0005\u0918\u0000\u0000\u04c4\u04c5\u0003d2"+
		"\u0000\u04c5\u04c9\u0005\u0919\u0000\u0000\u04c6\u04c8\u0003h4\u0000\u04c7"+
		"\u04c6\u0001\u0000\u0000\u0000\u04c8\u04cb\u0001\u0000\u0000\u0000\u04c9"+
		"\u04c7\u0001\u0000\u0000\u0000\u04c9\u04ca\u0001\u0000\u0000\u0000\u04ca"+
		"\u04d2\u0001\u0000\u0000\u0000\u04cb\u04c9\u0001\u0000\u0000\u0000\u04cc"+
		"\u04cd\u0005\u0918\u0000\u0000\u04cd\u04ce\u0003\u008aE\u0000\u04ce\u04cf"+
		"\u0005\u0919\u0000\u0000\u04cf\u04d2\u0001\u0000\u0000\u0000\u04d0\u04d2"+
		"\u0003\u00f0x\u0000\u04d1\u04bd\u0001\u0000\u0000\u0000\u04d1\u04c0\u0001"+
		"\u0000\u0000\u0000\u04d1\u04c1\u0001\u0000\u0000\u0000\u04d1\u04c2\u0001"+
		"\u0000\u0000\u0000\u04d1\u04c3\u0001\u0000\u0000\u0000\u04d1\u04cc\u0001"+
		"\u0000\u0000\u0000\u04d1\u04d0\u0001\u0000\u0000\u0000\u04d2\u00b7\u0001"+
		"\u0000\u0000\u0000\u04d3\u04dc\u0007\u0010\u0000\u0000\u04d4\u04d5\u0005"+
		"\u0918\u0000\u0000\u04d5\u04d6\u0003L&\u0000\u04d6\u04d7\u0005\u0919\u0000"+
		"\u0000\u04d7\u04dd\u0001\u0000\u0000\u0000\u04d8\u04d9\u0005\u0918\u0000"+
		"\u0000\u04d9\u04da\u0003\u008cF\u0000\u04da\u04db\u0005\u0919\u0000\u0000"+
		"\u04db\u04dd\u0001\u0000\u0000\u0000\u04dc\u04d4\u0001\u0000\u0000\u0000"+
		"\u04dc\u04d8\u0001\u0000\u0000\u0000\u04dd\u00b9\u0001\u0000\u0000\u0000"+
		"\u04de\u04e3\u0003\u00f2y\u0000\u04df\u04e0\u0005\u0911\u0000\u0000\u04e0"+
		"\u04e2\u0003\u00f4z\u0000\u04e1\u04df\u0001\u0000\u0000\u0000\u04e2\u04e5"+
		"\u0001\u0000\u0000\u0000\u04e3\u04e1\u0001\u0000\u0000\u0000\u04e3\u04e4"+
		"\u0001\u0000\u0000\u0000\u04e4\u04e8\u0001\u0000\u0000\u0000\u04e5\u04e3"+
		"\u0001\u0000\u0000\u0000\u04e6\u04e7\u0005\u0920\u0000\u0000\u04e7\u04e9"+
		"\u0003\u00ceg\u0000\u04e8\u04e6\u0001\u0000\u0000\u0000\u04e8\u04e9\u0001"+
		"\u0000\u0000\u0000\u04e9\u00bb\u0001\u0000\u0000\u0000\u04ea\u04eb\u0003"+
		"\u00f2y\u0000\u04eb\u00bd\u0001\u0000\u0000\u0000\u04ec\u04ed\u0003\u00f4"+
		"z\u0000\u04ed\u00bf\u0001\u0000\u0000\u0000\u04ee\u04f3\u0003\u00f4z\u0000"+
		"\u04ef\u04f0\u0005\u0911\u0000\u0000\u04f0\u04f2\u0003\u00f4z\u0000\u04f1"+
		"\u04ef\u0001\u0000\u0000\u0000\u04f2\u04f5\u0001\u0000\u0000\u0000\u04f3"+
		"\u04f1\u0001\u0000\u0000\u0000\u04f3\u04f4\u0001\u0000\u0000\u0000\u04f4"+
		"\u00c1\u0001\u0000\u0000\u0000\u04f5\u04f3\u0001\u0000\u0000\u0000\u04f6"+
		"\u04fb\u0003\u00f2y\u0000\u04f7\u04f8\u0005\u0911\u0000\u0000\u04f8\u04fa"+
		"\u0003\u00f4z\u0000\u04f9\u04f7\u0001\u0000\u0000\u0000\u04fa\u04fd\u0001"+
		"\u0000\u0000\u0000\u04fb\u04f9\u0001\u0000\u0000\u0000\u04fb\u04fc\u0001"+
		"\u0000\u0000\u0000\u04fc\u00c3\u0001\u0000\u0000\u0000\u04fd\u04fb\u0001"+
		"\u0000\u0000\u0000\u04fe\u04ff\u0003\u00f2y\u0000\u04ff\u00c5\u0001\u0000"+
		"\u0000\u0000\u0500\u0501\u0005\u0931\u0000\u0000\u0501\u0503\u0003\u00d4"+
		"j\u0000\u0502\u0500\u0001\u0000\u0000\u0000\u0502\u0503\u0001\u0000\u0000"+
		"\u0000\u0503\u0504\u0001\u0000\u0000\u0000\u0504\u0507\u0003\u00f4z\u0000"+
		"\u0505\u0506\u0005\u0911\u0000\u0000\u0506\u0508\u0003\u00f4z\u0000\u0507"+
		"\u0505\u0001\u0000\u0000\u0000\u0507\u0508\u0001\u0000\u0000\u0000\u0508"+
		"\u050b\u0001\u0000\u0000\u0000\u0509\u050b\u0003\u00e2q\u0000\u050a\u0502"+
		"\u0001\u0000\u0000\u0000\u050a\u0509\u0001\u0000\u0000\u0000\u050b\u00c7"+
		"\u0001\u0000\u0000\u0000\u050c\u050f\u0003\u00f2y\u0000\u050d\u050e\u0005"+
		"\u0911\u0000\u0000\u050e\u0510\u0003\u00f4z\u0000\u050f\u050d\u0001\u0000"+
		"\u0000\u0000\u050f\u0510\u0001\u0000\u0000\u0000\u0510\u00c9\u0001\u0000"+
		"\u0000\u0000\u0511\u0514\u0003\u00e4r\u0000\u0512\u0514\u0003\u00e2q\u0000"+
		"\u0513\u0511\u0001\u0000\u0000\u0000\u0513\u0512\u0001\u0000\u0000\u0000"+
		"\u0514\u00cb\u0001\u0000\u0000\u0000\u0515\u0518\u0003\u00f2y\u0000\u0516"+
		"\u0518\u0003\u00e2q\u0000\u0517\u0515\u0001\u0000\u0000\u0000\u0517\u0516"+
		"\u0001\u0000\u0000\u0000\u0518\u00cd\u0001\u0000\u0000\u0000\u0519\u051a"+
		"\u0003\u00f2y\u0000\u051a\u00cf\u0001\u0000\u0000\u0000\u051b\u0520\u0003"+
		"\u00f2y\u0000\u051c\u051d\u0005\u0911\u0000\u0000\u051d\u051f\u0003\u00f4"+
		"z\u0000\u051e\u051c\u0001\u0000\u0000\u0000\u051f\u0522\u0001\u0000\u0000"+
		"\u0000\u0520\u051e\u0001\u0000\u0000\u0000\u0520\u0521\u0001\u0000\u0000"+
		"\u0000\u0521\u00d1\u0001\u0000\u0000\u0000\u0522\u0520\u0001\u0000\u0000"+
		"\u0000\u0523\u0524\u0003\u00f2y\u0000\u0524\u00d3\u0001\u0000\u0000\u0000"+
		"\u0525\u052a\u0003\u00f4z\u0000\u0526\u0527\u0005\u0911\u0000\u0000\u0527"+
		"\u0529\u0003\u00f4z\u0000\u0528\u0526\u0001\u0000\u0000\u0000\u0529\u052c"+
		"\u0001\u0000\u0000\u0000\u052a\u0528\u0001\u0000\u0000\u0000\u052a\u052b"+
		"\u0001\u0000\u0000\u0000\u052b\u00d5\u0001\u0000\u0000\u0000\u052c\u052a"+
		"\u0001\u0000\u0000\u0000\u052d\u0536\u0005\u0918\u0000\u0000\u052e\u0533"+
		"\u0003\u00d8l\u0000\u052f\u0530\u0005\u091e\u0000\u0000\u0530\u0532\u0003"+
		"\u00d8l\u0000\u0531\u052f\u0001\u0000\u0000\u0000\u0532\u0535\u0001\u0000"+
		"\u0000\u0000\u0533\u0531\u0001\u0000\u0000\u0000\u0533\u0534\u0001\u0000"+
		"\u0000\u0000\u0534\u0537\u0001\u0000\u0000\u0000\u0535\u0533\u0001\u0000"+
		"\u0000\u0000\u0536\u052e\u0001\u0000\u0000\u0000\u0536\u0537\u0001\u0000"+
		"\u0000\u0000\u0537\u0538\u0001\u0000\u0000\u0000\u0538\u0539\u0005\u0919"+
		"\u0000\u0000\u0539\u00d7\u0001\u0000\u0000\u0000\u053a\u053b\u0003\u00f2"+
		"y\u0000\u053b\u053c\u0005\u092e\u0000\u0000\u053c\u053d\u0005\u0929\u0000"+
		"\u0000\u053d\u053f\u0001\u0000\u0000\u0000\u053e\u053a\u0001\u0000\u0000"+
		"\u0000\u053e\u053f\u0001\u0000\u0000\u0000\u053f\u0540\u0001\u0000\u0000"+
		"\u0000\u0540\u0541\u0003\u008cF\u0000\u0541\u00d9\u0001\u0000\u0000\u0000"+
		"\u0542\u054b\u0003\u00dcn\u0000\u0543\u0545\u0005\u05a3\u0000\u0000\u0544"+
		"\u0543\u0001\u0000\u0000\u0000\u0544\u0545\u0001\u0000\u0000\u0000\u0545"+
		"\u0546\u0001\u0000\u0000\u0000\u0546\u0548\u0003\u00c0`\u0000\u0547\u0549"+
		"\u0007\u0011\u0000\u0000\u0548\u0547\u0001\u0000\u0000\u0000\u0548\u0549"+
		"\u0001\u0000\u0000\u0000\u0549\u054b\u0001\u0000\u0000\u0000\u054a\u0542"+
		"\u0001\u0000\u0000\u0000\u054a\u0544\u0001\u0000\u0000\u0000\u054b\u00db"+
		"\u0001\u0000\u0000\u0000\u054c\u054e\u0003\u00e0p\u0000\u054d\u054f\u0003"+
		"\u00deo\u0000\u054e\u054d\u0001\u0000\u0000\u0000\u054e\u054f\u0001\u0000"+
		"\u0000\u0000\u054f\u00dd\u0001\u0000\u0000\u0000\u0550\u0553\u0005\u0918"+
		"\u0000\u0000\u0551\u0554\u0003\u00ecv\u0000\u0552\u0554\u0005\u091b\u0000"+
		"\u0000\u0553\u0551\u0001\u0000\u0000\u0000\u0553\u0552\u0001\u0000\u0000"+
		"\u0000\u0554\u055a\u0001\u0000\u0000\u0000\u0555\u0558\u0005\u091e\u0000"+
		"\u0000\u0556\u0559\u0003\u00ecv\u0000\u0557\u0559\u0003\u00eew\u0000\u0558"+
		"\u0556\u0001\u0000\u0000\u0000\u0558\u0557\u0001\u0000\u0000\u0000\u0559"+
		"\u055b\u0001\u0000\u0000\u0000\u055a\u0555\u0001\u0000\u0000\u0000\u055a"+
		"\u055b\u0001\u0000\u0000\u0000\u055b\u055d\u0001\u0000\u0000\u0000\u055c"+
		"\u055e\u0007\u0012\u0000\u0000\u055d\u055c\u0001\u0000\u0000\u0000\u055d"+
		"\u055e\u0001\u0000\u0000\u0000\u055e\u055f\u0001\u0000\u0000\u0000\u055f"+
		"\u0560\u0005\u0919\u0000\u0000\u0560\u00df\u0001\u0000\u0000\u0000\u0561"+
		"\u0562\u0007\u0013\u0000\u0000\u0562\u00e1\u0001\u0000\u0000\u0000\u0563"+
		"\u0567\u0005\u0924\u0000\u0000\u0564\u0565\u0005\u092b\u0000\u0000\u0565"+
		"\u0567\u0005\u0912\u0000\u0000\u0566\u0563\u0001\u0000\u0000\u0000\u0566"+
		"\u0564\u0001\u0000\u0000\u0000\u0567\u0570\u0001\u0000\u0000\u0000\u0568"+
		"\u056a\u0005\u02ab\u0000\u0000\u0569\u0568\u0001\u0000\u0000\u0000\u0569"+
		"\u056a\u0001\u0000\u0000\u0000\u056a\u056e\u0001\u0000\u0000\u0000\u056b"+
		"\u056f\u0005\u0924\u0000\u0000\u056c\u056d\u0005\u092b\u0000\u0000\u056d"+
		"\u056f\u0005\u0912\u0000\u0000\u056e\u056b\u0001\u0000\u0000\u0000\u056e"+
		"\u056c\u0001\u0000\u0000\u0000\u056f\u0571\u0001\u0000\u0000\u0000\u0570"+
		"\u0569\u0001\u0000\u0000\u0000\u0570\u0571\u0001\u0000\u0000\u0000\u0571"+
		"\u0576\u0001\u0000\u0000\u0000\u0572\u0573\u0005\u0911\u0000\u0000\u0573"+
		"\u0575\u0003\u00e6s\u0000\u0574\u0572\u0001\u0000\u0000\u0000\u0575\u0578"+
		"\u0001\u0000\u0000\u0000\u0576\u0574\u0001\u0000\u0000\u0000\u0576\u0577"+
		"\u0001\u0000\u0000\u0000\u0577\u00e3\u0001\u0000\u0000\u0000\u0578\u0576"+
		"\u0001\u0000\u0000\u0000\u0579\u057e\u0003\u00e6s\u0000\u057a\u057b\u0005"+
		"\u0911\u0000\u0000\u057b\u057d\u0003\u00e6s\u0000\u057c\u057a\u0001\u0000"+
		"\u0000\u0000\u057d\u0580\u0001\u0000\u0000\u0000\u057e\u057c\u0001\u0000"+
		"\u0000\u0000\u057e\u057f\u0001\u0000\u0000\u0000\u057f\u00e5\u0001\u0000"+
		"\u0000\u0000\u0580\u057e\u0001\u0000\u0000\u0000\u0581\u0582\u0005\u0931"+
		"\u0000\u0000\u0582\u0584\u0003\u00d4j\u0000\u0583\u0581\u0001\u0000\u0000"+
		"\u0000\u0583\u0584\u0001\u0000\u0000\u0000\u0584\u0585\u0001\u0000\u0000"+
		"\u0000\u0585\u058a\u0003\u00f4z\u0000\u0586\u0587\u0005\u0911\u0000\u0000"+
		"\u0587\u0589\u0003\u00f4z\u0000\u0588\u0586\u0001\u0000\u0000\u0000\u0589"+
		"\u058c\u0001\u0000\u0000\u0000\u058a\u0588\u0001\u0000\u0000\u0000\u058a"+
		"\u058b\u0001\u0000\u0000\u0000\u058b\u058f\u0001\u0000\u0000\u0000\u058c"+
		"\u058a\u0001\u0000\u0000\u0000\u058d\u058e\u0005\u0920\u0000\u0000\u058e"+
		"\u0590\u0003\u00ceg\u0000\u058f\u058d\u0001\u0000\u0000\u0000\u058f\u0590"+
		"\u0001\u0000\u0000\u0000\u0590\u0592\u0001\u0000\u0000\u0000\u0591\u0593"+
		"\u0003\u00d6k\u0000\u0592\u0591\u0001\u0000\u0000\u0000\u0592\u0593\u0001"+
		"\u0000\u0000\u0000\u0593\u00e7\u0001\u0000\u0000\u0000\u0594\u0595\u0005"+
		"\u0931\u0000\u0000\u0595\u0597\u0003\u00d4j\u0000\u0596\u0594\u0001\u0000"+
		"\u0000\u0000\u0596\u0597\u0001\u0000\u0000\u0000\u0597\u0598\u0001\u0000"+
		"\u0000\u0000\u0598\u059d\u0003\u00f4z\u0000\u0599\u059a\u0005\u0911\u0000"+
		"\u0000\u059a\u059c\u0003\u00f4z\u0000\u059b\u0599\u0001\u0000\u0000\u0000"+
		"\u059c\u059f\u0001\u0000\u0000\u0000\u059d\u059b\u0001\u0000\u0000\u0000"+
		"\u059d\u059e\u0001\u0000\u0000\u0000\u059e\u00e9\u0001\u0000\u0000\u0000"+
		"\u059f\u059d\u0001\u0000\u0000\u0000\u05a0\u05a3\u0005\u07da\u0000\u0000"+
		"\u05a1\u05a4\u0003\u00f0x\u0000\u05a2\u05a4\u0003\u00e2q\u0000\u05a3\u05a1"+
		"\u0001\u0000\u0000\u0000\u05a3\u05a2\u0001\u0000\u0000\u0000\u05a4\u05a9"+
		"\u0001\u0000\u0000\u0000\u05a5\u05a6\u0005O\u0000\u0000\u05a6\u05a7\u0005"+
		"\u07de\u0000\u0000\u05a7\u05a8\u0005\u08ce\u0000\u0000\u05a8\u05aa\u0003"+
		"\u00f0x\u0000\u05a9\u05a5\u0001\u0000\u0000\u0000\u05a9\u05aa\u0001\u0000"+
		"\u0000\u0000\u05aa\u05df\u0001\u0000\u0000\u0000\u05ab\u05af\u0005\u02d5"+
		"\u0000\u0000\u05ac\u05b0\u0003\u00f0x\u0000\u05ad\u05b0\u0003\u00e2q\u0000"+
		"\u05ae\u05b0\u0003\u00e6s\u0000\u05af\u05ac\u0001\u0000\u0000\u0000\u05af"+
		"\u05ad\u0001\u0000\u0000\u0000\u05af\u05ae\u0001\u0000\u0000\u0000\u05b0"+
		"\u05b1\u0001\u0000\u0000\u0000\u05b1\u05bf\u0007\u0014\u0000\u0000\u05b2"+
		"\u05b5\u0005\u0918\u0000\u0000\u05b3\u05b6\u0005\u0912\u0000\u0000\u05b4"+
		"\u05b6\u0003\u00e2q\u0000\u05b5\u05b3\u0001\u0000\u0000\u0000\u05b5\u05b4"+
		"\u0001\u0000\u0000\u0000\u05b6\u05bc\u0001\u0000\u0000\u0000\u05b7\u05ba"+
		"\u0005\u091e\u0000\u0000\u05b8\u05bb\u0005\u0912\u0000\u0000\u05b9\u05bb"+
		"\u0003\u00e2q\u0000\u05ba\u05b8\u0001\u0000\u0000\u0000\u05ba\u05b9\u0001"+
		"\u0000\u0000\u0000\u05bb\u05bd\u0001\u0000\u0000\u0000\u05bc\u05b7\u0001"+
		"\u0000\u0000\u0000\u05bc\u05bd\u0001\u0000\u0000\u0000\u05bd\u05be\u0001"+
		"\u0000\u0000\u0000\u05be\u05c0\u0005\u0919\u0000\u0000\u05bf\u05b2\u0001"+
		"\u0000\u0000\u0000\u05bf\u05c0\u0001\u0000\u0000\u0000\u05c0\u05d0\u0001"+
		"\u0000\u0000\u0000\u05c1\u05ce\u0005\u07fa\u0000\u0000\u05c2\u05cf\u0005"+
		"\u0159\u0000\u0000\u05c3\u05cf\u0005\u0276\u0000\u0000\u05c4\u05cf\u0005"+
		"\u0380\u0000\u0000\u05c5\u05cc\u0005\u060d\u0000\u0000\u05c6\u05c9\u0005"+
		"\u0918\u0000\u0000\u05c7\u05ca\u0005\u0912\u0000\u0000\u05c8\u05ca\u0003"+
		"\u00e2q\u0000\u05c9\u05c7\u0001\u0000\u0000\u0000\u05c9\u05c8\u0001\u0000"+
		"\u0000\u0000\u05ca\u05cb\u0001\u0000\u0000\u0000\u05cb\u05cd\u0005\u0919"+
		"\u0000\u0000\u05cc\u05c6\u0001\u0000\u0000\u0000\u05cc\u05cd\u0001\u0000"+
		"\u0000\u0000\u05cd\u05cf\u0001\u0000\u0000\u0000\u05ce\u05c2\u0001\u0000"+
		"\u0000\u0000\u05ce\u05c3\u0001\u0000\u0000\u0000\u05ce\u05c4\u0001\u0000"+
		"\u0000\u0000\u05ce\u05c5\u0001\u0000\u0000\u0000\u05cf\u05d1\u0001\u0000"+
		"\u0000\u0000\u05d0\u05c1\u0001\u0000\u0000\u0000\u05d0\u05d1\u0001\u0000"+
		"\u0000\u0000\u05d1\u05df\u0001\u0000\u0000\u0000\u05d2\u05df\u0003\u00ec"+
		"v\u0000\u05d3\u05d4\u0005\u0157\u0000\u0000\u05d4\u05df\u0003\u00f0x\u0000"+
		"\u05d5\u05df\u0003\u00f0x\u0000\u05d6\u05df\u0005\u0482\u0000\u0000\u05d7"+
		"\u05df\u0005\u080a\u0000\u0000\u05d8\u05df\u0005\u0212\u0000\u0000\u05d9"+
		"\u05df\u0005\u0160\u0000\u0000\u05da\u05df\u0005\u062b\u0000\u0000\u05db"+
		"\u05df\u0005\u0382\u0000\u0000\u05dc\u05df\u0005\u0366\u0000\u0000\u05dd"+
		"\u05df\u0005\u0170\u0000\u0000\u05de\u05a0\u0001\u0000\u0000\u0000\u05de"+
		"\u05ab\u0001\u0000\u0000\u0000\u05de\u05d2\u0001\u0000\u0000\u0000\u05de"+
		"\u05d3\u0001\u0000\u0000\u0000\u05de\u05d5\u0001\u0000\u0000\u0000\u05de"+
		"\u05d6\u0001\u0000\u0000\u0000\u05de\u05d7\u0001\u0000\u0000\u0000\u05de"+
		"\u05d8\u0001\u0000\u0000\u0000\u05de\u05d9\u0001\u0000\u0000\u0000\u05de"+
		"\u05da\u0001\u0000\u0000\u0000\u05de\u05db\u0001\u0000\u0000\u0000\u05de"+
		"\u05dc\u0001\u0000\u0000\u0000\u05de\u05dd\u0001\u0000\u0000\u0000\u05df"+
		"\u00eb\u0001\u0000\u0000\u0000\u05e0\u05e1\u0007\u0015\u0000\u0000\u05e1"+
		"\u00ed\u0001\u0000\u0000\u0000\u05e2\u05e3\u0005\u091d\u0000\u0000\u05e3"+
		"\u05e4\u0003\u00ecv\u0000\u05e4\u00ef\u0001\u0000\u0000\u0000\u05e5\u05e9"+
		"\u0003\u00c6c\u0000\u05e6\u05e9\u0005\u0914\u0000\u0000\u05e7\u05e9\u0005"+
		"\u090d\u0000\u0000\u05e8\u05e5\u0001\u0000\u0000\u0000\u05e8\u05e6\u0001"+
		"\u0000\u0000\u0000\u05e8\u05e7\u0001\u0000\u0000\u0000\u05e9\u00f1\u0001"+
		"\u0000\u0000\u0000\u05ea\u05eb\u0005\u0931\u0000\u0000\u05eb\u05ed\u0003"+
		"\u00d4j\u0000\u05ec\u05ea\u0001\u0000\u0000\u0000\u05ec\u05ed\u0001\u0000"+
		"\u0000\u0000\u05ed\u05ee\u0001\u0000\u0000\u0000\u05ee\u05ef\u0003\u00f4"+
		"z\u0000\u05ef\u00f3\u0001\u0000\u0000\u0000\u05f0\u05f3\u0003\u00f8|\u0000"+
		"\u05f1\u05f3\u0005\u0915\u0000\u0000\u05f2\u05f0\u0001\u0000\u0000\u0000"+
		"\u05f2\u05f1\u0001\u0000\u0000\u0000\u05f3\u00f5\u0001\u0000\u0000\u0000"+
		"\u05f4\u05f5\u0005\u0918\u0000\u0000\u05f5\u05f6\u0005\u091c\u0000\u0000"+
		"\u05f6\u05f7\u0005\u0919\u0000\u0000\u05f7\u00f7\u0001\u0000\u0000\u0000"+
		"\u05f8\u0657\u0003\u00fc~\u0000\u05f9\u0657\u0003\u00fa}\u0000\u05fa\u0657"+
		"\u0005\u0937\u0000\u0000\u05fb\u0657\u0005\u0003\u0000\u0000\u05fc\u0657"+
		"\u0005#\u0000\u0000\u05fd\u0657\u0005!\u0000\u0000\u05fe\u0657\u0005\""+
		"\u0000\u0000\u05ff\u0657\u0005-\u0000\u0000\u0600\u0657\u0005]\u0000\u0000"+
		"\u0601\u0657\u0005b\u0000\u0000\u0602\u0657\u0005h\u0000\u0000\u0603\u0657"+
		"\u0005}\u0000\u0000\u0604\u0657\u0005\u008d\u0000\u0000\u0605\u0657\u0005"+
		"\u00ca\u0000\u0000\u0606\u0657\u0005\u00b9\u0000\u0000\u0607\u0657\u0005"+
		"\u00d1\u0000\u0000\u0608\u0657\u0005\u0110\u0000\u0000\u0609\u0657\u0005"+
		"\u0148\u0000\u0000\u060a\u0657\u0005\u00ad\u0000\u0000\u060b\u0657\u0005"+
		"\u0168\u0000\u0000\u060c\u0657\u0005\u017d\u0000\u0000\u060d\u0657\u0005"+
		"\u018b\u0000\u0000\u060e\u0657\u0005\u01b2\u0000\u0000\u060f\u0657\u0005"+
		"\u01bb\u0000\u0000\u0610\u0657\u0005\u01dc\u0000\u0000\u0611\u0657\u0005"+
		"\u01ea\u0000\u0000\u0612\u0657\u0005\u01eb\u0000\u0000\u0613\u0657\u0005"+
		"\u01ec\u0000\u0000\u0614\u0657\u0005\u01f4\u0000\u0000\u0615\u0657\u0005"+
		"\u01f6\u0000\u0000\u0616\u0657\u0005\u0221\u0000\u0000\u0617\u0657\u0005"+
		"\u022f\u0000\u0000\u0618\u0657\u0005\u0237\u0000\u0000\u0619\u0657\u0005"+
		"\u024b\u0000\u0000\u061a\u0657\u0005\u02ac\u0000\u0000\u061b\u0657\u0005"+
		"\u02bc\u0000\u0000\u061c\u0657\u0005\u02ce\u0000\u0000\u061d\u0657\u0005"+
		"\u02f4\u0000\u0000\u061e\u0657\u0005\u02f6\u0000\u0000\u061f\u0657\u0005"+
		"\u0301\u0000\u0000\u0620\u0657\u0005\u0341\u0000\u0000\u0621\u0657\u0005"+
		"\u0342\u0000\u0000\u0622\u0657\u0005\u03a0\u0000\u0000\u0623\u0657\u0005"+
		"\u0348\u0000\u0000\u0624\u0657\u0005\u0386\u0000\u0000\u0625\u0657\u0005"+
		"\u0387\u0000\u0000\u0626\u0657\u0005\u0484\u0000\u0000\u0627\u0657\u0005"+
		"\u04b4\u0000\u0000\u0628\u0657\u0005\u04cf\u0000\u0000\u0629\u0657\u0005"+
		"\u04d7\u0000\u0000\u062a\u0657\u0005\u04dc\u0000\u0000\u062b\u0657\u0005"+
		"\u04e0\u0000\u0000\u062c\u0657\u0005\u04e3\u0000\u0000\u062d\u0657\u0005"+
		"\u051f\u0000\u0000\u062e\u0657\u0005\u0528\u0000\u0000\u062f\u0657\u0005"+
		"\u052f\u0000\u0000\u0630\u0657\u0005\u0538\u0000\u0000\u0631\u0657\u0005"+
		"\u0537\u0000\u0000\u0632\u0657\u0005\u0545\u0000\u0000\u0633\u0657\u0005"+
		"\u056c\u0000\u0000\u0634\u0657\u0005\u0580\u0000\u0000\u0635\u0657\u0005"+
		"\u0586\u0000\u0000\u0636\u0657\u0005\u0592\u0000\u0000\u0637\u0657\u0005"+
		"\u05a3\u0000\u0000\u0638\u0657\u0005\u05c0\u0000\u0000\u0639\u0657\u0005"+
		"\u05d2\u0000\u0000\u063a\u0657\u0005\u05d5\u0000\u0000\u063b\u0657\u0005"+
		"\u060a\u0000\u0000\u063c\u0657\u0005\u0619\u0000\u0000\u063d\u0657\u0005"+
		"\u0622\u0000\u0000\u063e\u0657\u0005\u062d\u0000\u0000\u063f\u0657\u0005"+
		"\u0632\u0000\u0000\u0640\u0657\u0005\u0641\u0000\u0000\u0641\u0657\u0005"+
		"\u0642\u0000\u0000\u0642\u0657\u0005\u064e\u0000\u0000\u0643\u0657\u0005"+
		"\u065b\u0000\u0000\u0644\u0657\u0005\u065c\u0000\u0000\u0645\u0657\u0005"+
		"\u069b\u0000\u0000\u0646\u0657\u0005\u07bf\u0000\u0000\u0647\u0657\u0005"+
		"\u07d9\u0000\u0000\u0648\u0657\u0005\u07db\u0000\u0000\u0649\u0657\u0005"+
		"\u07dc\u0000\u0000\u064a\u0657\u0005\u0809\u0000\u0000\u064b\u0657\u0005"+
		"\u086c\u0000\u0000\u064c\u0657\u0005\u086b\u0000\u0000\u064d\u0657\u0005"+
		"\u086d\u0000\u0000\u064e\u0657\u0005\u088c\u0000\u0000\u064f\u0657\u0005"+
		"\u0893\u0000\u0000\u0650\u0657\u0005\u08a3\u0000\u0000\u0651\u0657\u0005"+
		"\u08cc\u0000\u0000\u0652\u0657\u0005\u08ff\u0000\u0000\u0653\u0657\u0005"+
		"\u0907\u0000\u0000\u0654\u0657\u0005\u086a\u0000\u0000\u0655\u0657\u0005"+
		"\u08f2\u0000\u0000\u0656\u05f8\u0001\u0000\u0000\u0000\u0656\u05f9\u0001"+
		"\u0000\u0000\u0000\u0656\u05fa\u0001\u0000\u0000\u0000\u0656\u05fb\u0001"+
		"\u0000\u0000\u0000\u0656\u05fc\u0001\u0000\u0000\u0000\u0656\u05fd\u0001"+
		"\u0000\u0000\u0000\u0656\u05fe\u0001\u0000\u0000\u0000\u0656\u05ff\u0001"+
		"\u0000\u0000\u0000\u0656\u0600\u0001\u0000\u0000\u0000\u0656\u0601\u0001"+
		"\u0000\u0000\u0000\u0656\u0602\u0001\u0000\u0000\u0000\u0656\u0603\u0001"+
		"\u0000\u0000\u0000\u0656\u0604\u0001\u0000\u0000\u0000\u0656\u0605\u0001"+
		"\u0000\u0000\u0000\u0656\u0606\u0001\u0000\u0000\u0000\u0656\u0607\u0001"+
		"\u0000\u0000\u0000\u0656\u0608\u0001\u0000\u0000\u0000\u0656\u0609\u0001"+
		"\u0000\u0000\u0000\u0656\u060a\u0001\u0000\u0000\u0000\u0656\u060b\u0001"+
		"\u0000\u0000\u0000\u0656\u060c\u0001\u0000\u0000\u0000\u0656\u060d\u0001"+
		"\u0000\u0000\u0000\u0656\u060e\u0001\u0000\u0000\u0000\u0656\u060f\u0001"+
		"\u0000\u0000\u0000\u0656\u0610\u0001\u0000\u0000\u0000\u0656\u0611\u0001"+
		"\u0000\u0000\u0000\u0656\u0612\u0001\u0000\u0000\u0000\u0656\u0613\u0001"+
		"\u0000\u0000\u0000\u0656\u0614\u0001\u0000\u0000\u0000\u0656\u0615\u0001"+
		"\u0000\u0000\u0000\u0656\u0616\u0001\u0000\u0000\u0000\u0656\u0617\u0001"+
		"\u0000\u0000\u0000\u0656\u0618\u0001\u0000\u0000\u0000\u0656\u0619\u0001"+
		"\u0000\u0000\u0000\u0656\u061a\u0001\u0000\u0000\u0000\u0656\u061b\u0001"+
		"\u0000\u0000\u0000\u0656\u061c\u0001\u0000\u0000\u0000\u0656\u061d\u0001"+
		"\u0000\u0000\u0000\u0656\u061e\u0001\u0000\u0000\u0000\u0656\u061f\u0001"+
		"\u0000\u0000\u0000\u0656\u0620\u0001\u0000\u0000\u0000\u0656\u0621\u0001"+
		"\u0000\u0000\u0000\u0656\u0622\u0001\u0000\u0000\u0000\u0656\u0623\u0001"+
		"\u0000\u0000\u0000\u0656\u0624\u0001\u0000\u0000\u0000\u0656\u0625\u0001"+
		"\u0000\u0000\u0000\u0656\u0626\u0001\u0000\u0000\u0000\u0656\u0627\u0001"+
		"\u0000\u0000\u0000\u0656\u0628\u0001\u0000\u0000\u0000\u0656\u0629\u0001"+
		"\u0000\u0000\u0000\u0656\u062a\u0001\u0000\u0000\u0000\u0656\u062b\u0001"+
		"\u0000\u0000\u0000\u0656\u062c\u0001\u0000\u0000\u0000\u0656\u062d\u0001"+
		"\u0000\u0000\u0000\u0656\u062e\u0001\u0000\u0000\u0000\u0656\u062f\u0001"+
		"\u0000\u0000\u0000\u0656\u0630\u0001\u0000\u0000\u0000\u0656\u0631\u0001"+
		"\u0000\u0000\u0000\u0656\u0632\u0001\u0000\u0000\u0000\u0656\u0633\u0001"+
		"\u0000\u0000\u0000\u0656\u0634\u0001\u0000\u0000\u0000\u0656\u0635\u0001"+
		"\u0000\u0000\u0000\u0656\u0636\u0001\u0000\u0000\u0000\u0656\u0637\u0001"+
		"\u0000\u0000\u0000\u0656\u0638\u0001\u0000\u0000\u0000\u0656\u0639\u0001"+
		"\u0000\u0000\u0000\u0656\u063a\u0001\u0000\u0000\u0000\u0656\u063b\u0001"+
		"\u0000\u0000\u0000\u0656\u063c\u0001\u0000\u0000\u0000\u0656\u063d\u0001"+
		"\u0000\u0000\u0000\u0656\u063e\u0001\u0000\u0000\u0000\u0656\u063f\u0001"+
		"\u0000\u0000\u0000\u0656\u0640\u0001\u0000\u0000\u0000\u0656\u0641\u0001"+
		"\u0000\u0000\u0000\u0656\u0642\u0001\u0000\u0000\u0000\u0656\u0643\u0001"+
		"\u0000\u0000\u0000\u0656\u0644\u0001\u0000\u0000\u0000\u0656\u0645\u0001"+
		"\u0000\u0000\u0000\u0656\u0646\u0001\u0000\u0000\u0000\u0656\u0647\u0001"+
		"\u0000\u0000\u0000\u0656\u0648\u0001\u0000\u0000\u0000\u0656\u0649\u0001"+
		"\u0000\u0000\u0000\u0656\u064a\u0001\u0000\u0000\u0000\u0656\u064b\u0001"+
		"\u0000\u0000\u0000\u0656\u064c\u0001\u0000\u0000\u0000\u0656\u064d\u0001"+
		"\u0000\u0000\u0000\u0656\u064e\u0001\u0000\u0000\u0000\u0656\u064f\u0001"+
		"\u0000\u0000\u0000\u0656\u0650\u0001\u0000\u0000\u0000\u0656\u0651\u0001"+
		"\u0000\u0000\u0000\u0656\u0652\u0001\u0000\u0000\u0000\u0656\u0653\u0001"+
		"\u0000\u0000\u0000\u0656\u0654\u0001\u0000\u0000\u0000\u0656\u0655\u0001"+
		"\u0000\u0000\u0000\u0657\u00f9\u0001\u0000\u0000\u0000\u0658\u0659\u0007"+
		"\u0016\u0000\u0000\u0659\u00fb\u0001\u0000\u0000\u0000\u065a\u065b\u0007"+
		"\u0017\u0000\u0000\u065b\u00fd\u0001\u0000\u0000\u0000\u00c1\u0100\u0104"+
		"\u0118\u0122\u0127\u012d\u0130\u013f\u0144\u0148\u014b\u0155\u0158\u0165"+
		"\u0172\u0186\u0195\u019a\u01a1\u01a5\u01a7\u01aa\u01ad\u01b2\u01b6\u01ba"+
		"\u01c4\u01c6\u01cb\u01d0\u01d6\u01da\u01e1\u01f3\u01f7\u01fc\u01ff\u0202"+
		"\u0205\u0217\u021b\u021e\u0226\u022c\u0231\u0234\u023d\u024a\u025b\u025f"+
		"\u0270\u0277\u027c\u0287\u028a\u0290\u0292\u029c\u02a0\u02a3\u02a7\u02af"+
		"\u02b1\u02b5\u02bd\u02c4\u02c9\u02d6\u02de\u02e6\u02ea\u02ee\u02f6\u02ff"+
		"\u0309\u0311\u0315\u031b\u0324\u032c\u0336\u033d\u0346\u034d\u0357\u0361"+
		"\u0369\u0373\u037d\u038b\u038d\u0391\u0396\u039b\u03a7\u03ab\u03b2\u03b7"+
		"\u03bc\u03bf\u03ca\u03cf\u03d9\u03db\u03dd\u03e7\u03eb\u03ed\u03f9\u0401"+
		"\u040e\u0411\u0416\u0422\u0424\u042c\u0434\u043b\u0442\u0456\u0460\u046a"+
		"\u0470\u0472\u047d\u0481\u0484\u048b\u048e\u0492\u0495\u049c\u049f\u04a5"+
		"\u04a8\u04ac\u04af\u04b6\u04bb\u04c9\u04d1\u04dc\u04e3\u04e8\u04f3\u04fb"+
		"\u0502\u0507\u050a\u050f\u0513\u0517\u0520\u052a\u0533\u0536\u053e\u0544"+
		"\u0548\u054a\u054e\u0553\u0558\u055a\u055d\u0566\u0569\u056e\u0570\u0576"+
		"\u057e\u0583\u058a\u058f\u0592\u0596\u059d\u05a3\u05a9\u05af\u05b5\u05ba"+
		"\u05bc\u05bf\u05c9\u05cc\u05ce\u05d0\u05de\u05e8\u05ec\u05f2\u0656";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}